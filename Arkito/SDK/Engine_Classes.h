#pragma once

/**
 * Name: Arkito
 * Version: 1
 */

#ifdef _MSC_VER
	#pragma pack(push, 0x01)
#endif

#define M_PI 3.141592653589793238
#define CONCAT_IMPL(x, y) x##y
#define MACRO_CONCAT(x, y) CONCAT_IMPL(x, y)
#define PAD(SIZE) BYTE MACRO_CONCAT(_pad, __COUNTER__)[SIZE];


namespace CG
{
	// --------------------------------------------------
	// # Classes
	// --------------------------------------------------
	/**
	 * Class Engine.EngineBaseTypes
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */

	

	class UEngineBaseTypes : public UObject
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.EngineTypes
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class UEngineTypes : public UObject
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.Actor
	 * Size -> 0x0440 (FullSize[0x0468] - InheritedSize[0x0028])
	 */
	class AActor : public UObject
	{
	public:
		struct FActorTickFunction                                  PrimaryActorTick;                                        // 0x0028(0x0058)
		unsigned char                                              bHidden : 1;                                             // 0x0080(0x0001) BIT_FIELD Edit, BlueprintVisible, BlueprintReadOnly, Net, NoDestructor
		unsigned char                                              bNetTemporary : 1;                                       // 0x0080(0x0001) BIT_FIELD NoDestructor
		unsigned char                                              bIsMapActor : 1;                                         // 0x0080(0x0001) BIT_FIELD Transient, NoDestructor
		unsigned char                                              bHasHighVolumeRPCs : 1;                                  // 0x0080(0x0001) BIT_FIELD Transient, NoDestructor
		unsigned char                                              bNetStartup : 1;                                         // 0x0080(0x0001) BIT_FIELD NoDestructor
		unsigned char                                              bPreventCharacterBasing : 1;                             // 0x0080(0x0001) BIT_FIELD Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor
		unsigned char                                              bPreventCharacterBasingAllowSteppingUp : 1;              // 0x0080(0x0001) BIT_FIELD Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor
		unsigned char                                              bOnlyRelevantToOwner : 1;                                // 0x0080(0x0001) BIT_FIELD Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor
		unsigned char                                              bAlwaysRelevant : 1;                                     // 0x0081(0x0001) BIT_FIELD Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor
		unsigned char                                              bForceHiddenReplication : 1;                             // 0x0081(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		unsigned char                                              bUseBPChangedActorTeam : 1;                              // 0x0081(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		unsigned char                                              UnknownData_AWKB : 2;                                    // 0x0081(0x0001) BIT_FIELD (PADDING)
		unsigned char                                              bIgnoredByCharacterEncroachment : 1;                     // 0x0081(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		unsigned char                                              bClimbable : 1;                                          // 0x0081(0x0001) BIT_FIELD Edit, BlueprintVisible, NoDestructor
		unsigned char                                              bAttachmentReplicationUseNetworkParent : 1;              // 0x0081(0x0001) BIT_FIELD Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor
		unsigned char                                              bUnstreamComponentsUseEndOverlap : 1;                    // 0x0082(0x0001) BIT_FIELD Edit, NoDestructor
		unsigned char                                              bUseBPOverrideUILocation : 1;                            // 0x0082(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		unsigned char                                              bForceBasedActorsOutOfFastTick : 1;                      // 0x0082(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		unsigned char                                              bUseBPGetShowDebugAnimationComponents : 1;               // 0x0082(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		unsigned char                                              bWantsServerThrottledTick : 1;                           // 0x0082(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		unsigned char                                              UnknownData_JG54[0x1];                                   // 0x0083(0x0001) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      CustomTimeDilation;                                      // 0x0084(0x0004) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay
		unsigned char                                              bWantsPerformanceThrottledTick : 1;                      // 0x0088(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		unsigned char                                              UnknownData_3H85 : 1;                                    // 0x0088(0x0001) BIT_FIELD (PADDING)
		unsigned char                                              bForceInfiniteDrawDistance : 1;                          // 0x0088(0x0001) BIT_FIELD Edit, NoDestructor
		unsigned char                                              bUseBPCheckForErrors : 1;                                // 0x0088(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		unsigned char                                              bPreventRegularForceNetUpdate : 1;                       // 0x0088(0x0001) BIT_FIELD Edit, NoDestructor
		unsigned char                                              bUseBPOverrideTargetingLocation : 1;                     // 0x0088(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		unsigned char                                              bUseBPGetHUDDrawLocationOffset : 1;                      // 0x0088(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		unsigned char                                              bPreventNPCSpawnFloor : 1;                               // 0x0088(0x0001) BIT_FIELD Edit, NoDestructor
		unsigned char                                              bNetCritical : 1;                                        // 0x0089(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		unsigned char                                              bUseBPCustomIsRelevantForClient : 1;                     // 0x0089(0x0001) BIT_FIELD Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor
		unsigned char                                              bUseStasisGrid : 1;                                      // 0x0089(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		unsigned char                                              bPreventCliffPlatforms : 1;                              // 0x0089(0x0001) BIT_FIELD Edit, BlueprintVisible, NoDestructor
		unsigned char                                              UnknownData_B8PU[0x2];                                   // 0x008A(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      ClientReplicationSendNowThreshold;                       // 0x008C(0x0004) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              bReplicateInstigator : 1;                                // 0x0090(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		unsigned char                                              bSuppressDestroyedEvent : 1;                             // 0x0090(0x0001) BIT_FIELD NoDestructor
		unsigned char                                              bUseOnlyPointForLevelBounds : 1;                         // 0x0090(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		unsigned char                                              bReplicateMovement : 1;                                  // 0x0090(0x0001) BIT_FIELD Edit, BlueprintVisible, Net, DisableEditOnInstance, NoDestructor
		unsigned char                                              bTearOff : 1;                                            // 0x0090(0x0001) BIT_FIELD Net, NoDestructor
		unsigned char                                              bExchangedRoles : 1;                                     // 0x0090(0x0001) BIT_FIELD Transient, NoDestructor
		unsigned char                                              bStasised : 1;                                           // 0x0090(0x0001) BIT_FIELD BlueprintVisible, BlueprintReadOnly, Transient, NoDestructor
		unsigned char                                              UnknownData_IJKU : 1;                                    // 0x0090(0x0001) BIT_FIELD (PADDING)
		unsigned char                                              bPendingNetUpdate : 1;                                   // 0x0091(0x0001) BIT_FIELD Transient, NoDestructor
		unsigned char                                              bNetLoadOnClient : 1;                                    // 0x0091(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		unsigned char                                              bNetUseOwnerRelevancy : 1;                               // 0x0091(0x0001) BIT_FIELD Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor
		unsigned char                                              bNetUseClientRelevancy : 1;                              // 0x0091(0x0001) BIT_FIELD Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor
		unsigned char                                              bDoNotCook : 1;                                          // 0x0091(0x0001) BIT_FIELD Edit, NoDestructor
		unsigned char                                              bHibernateChange : 1;                                    // 0x0091(0x0001) BIT_FIELD Transient, NoDestructor
		unsigned char                                              bBlockInput : 1;                                         // 0x0091(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		unsigned char                                              bAutoStasis : 1;                                         // 0x0091(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		unsigned char                                              bBlueprintMultiUseEntries : 1;                           // 0x0092(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		unsigned char                                              bEnableMultiUse : 1;                                     // 0x0092(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		unsigned char                                              bUseBPGetMultiUseCenterText : 1;                         // 0x0092(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		unsigned char                                              bPreventSaving : 1;                                      // 0x0092(0x0001) BIT_FIELD Edit, SaveGame, NoDestructor, NativeAccessSpecifierPublic
		unsigned char                                              bMultiUseCenterHUD : 1;                                  // 0x0092(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		unsigned char                                              bOnlyInitialReplication : 1;                             // 0x0092(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		unsigned char                                              bUseAttachmentReplication : 1;                           // 0x0092(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		unsigned char                                              bUseNetworkSpatialization : 1;                           // 0x0092(0x0001) BIT_FIELD Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor
		unsigned char                                              bNetworkSpatializationForceRelevancyCheck : 1;           // 0x0093(0x0001) BIT_FIELD Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor
		unsigned char                                              bReplicates : 1;                                         // 0x0093(0x0001) BIT_FIELD Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor
		unsigned char                                              UnknownData_HLY4 : 4;                                    // 0x0093(0x0001) BIT_FIELD (PADDING)
		unsigned char                                              bActorEnableCollision : 1;                               // 0x0093(0x0001) BIT_FIELD Edit, NoDestructor
		bool                                                       bForceAllowNetMulticast;                                 // 0x0094(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected
		ENetRole                                                   RemoteRole;                                              // 0x0095(0x0001) Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_U697[0x2];                                   // 0x0096(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class AActor*                                              Owner;                                                   // 0x0098(0x0008) Net, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_0PMN[0x1C];                                  // 0x00A0(0x001C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FRepMovement                                        ReplicatedMovement;                                      // 0x00BC(0x0034) Net, Transient, RepNotify
		struct FRepAttachment                                      AttachmentReplication;                                   // 0x00F0(0x0040) BlueprintVisible, BlueprintReadOnly, Net, Transient, RepNotify
		ENetRole                                                   Role;                                                    // 0x0130(0x0001) Net, ZeroConstructor, IsPlainOldData, NoDestructor
		ENetDormancy                                               NetDormancy;                                             // 0x0131(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_XJVO[0x6];                                   // 0x0132(0x0006) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<TWeakObjectPtr<class UActorComponent>>              ReplicatedComponents;                                    // 0x0138(0x0010) ExportObject, ZeroConstructor, ContainsInstancedReference
		unsigned char                                              UnknownData_NUD5[0x8];                                   // 0x0148(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		EAutoReceiveInput                                          AutoReceiveInput;                                        // 0x0150(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_8U8W[0x3];                                   // 0x0151(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int32_t                                                    DefaultStasisComponentOctreeFlags;                       // 0x0154(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class UPrimitiveComponent*                                 StasisCheckComponent;                                    // 0x0158(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor
		TArray<class AActor*>                                      NetworkSpatializationChildren;                           // 0x0160(0x0010) ZeroConstructor, Transient
		class AActor*                                              NetworkSpatializationParent;                             // 0x0170(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		float                                                      NetworkAndStasisRangeMultiplier;                         // 0x0178(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_37NV[0x4];                                   // 0x017C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		double                                                     UnstasisLastInRangeTime;                                 // 0x0180(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		double                                                     LastPreReplicationTime;                                  // 0x0188(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		double                                                     LastEnterStasisTime;                                     // 0x0190(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, SaveGame, IsPlainOldData, NoDestructor
		double                                                     LastExitStasisTime;                                      // 0x0198(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		class FName                                                CustomTag;                                               // 0x01A0(0x0008) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		int32_t                                                    CustomData;                                              // 0x01A8(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      ReplicationIntervalMultiplier;                           // 0x01AC(0x0004) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_YT65[0x18];                                  // 0x01B0(0x0018) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<TWeakObjectPtr<class UActorComponent>>              StasisUnRegisteredComponents;                            // 0x01C8(0x0010) ExportObject, ZeroConstructor, ContainsInstancedReference
		class UInputComponent*                                     InputComponent;                                          // 0x01D8(0x0008) ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor
		EInputConsumeOptions                                       InputConsumeOption;                                      // 0x01E0(0x0001) ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_3ZXY[0x3];                                   // 0x01E1(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      NetCullDistanceSquared;                                  // 0x01E4(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      NetCullDistanceSquaredDormant;                           // 0x01E8(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		int32_t                                                    NetTag;                                                  // 0x01EC(0x0004) ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		double                                                     NetUpdateTime;                                           // 0x01F0(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      NetUpdateFrequency;                                      // 0x01F8(0x0004) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      NetPriority;                                             // 0x01FC(0x0004) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		double                                                     LastNetUpdateTime;                                       // 0x0200(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		class FName                                                NetDriverName;                                           // 0x0208(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              bAutoDestroyWhenFinished : 1;                            // 0x0210(0x0001) BIT_FIELD BlueprintVisible, NoDestructor
		unsigned char                                              bCanBeDamaged : 1;                                       // 0x0210(0x0001) BIT_FIELD Edit, BlueprintVisible, Net, SaveGame, NoDestructor
		unsigned char                                              bPendingKillPending : 1;                                 // 0x0210(0x0001) BIT_FIELD NoDestructor
		unsigned char                                              bCollideWhenPlacing : 1;                                 // 0x0210(0x0001) BIT_FIELD NoDestructor
		unsigned char                                              bPreventOnDedicatedServer : 1;                           // 0x0210(0x0001) BIT_FIELD Edit, NoDestructor
		unsigned char                                              UnknownData_DS6Y : 3;                                    // 0x0210(0x0001) BIT_FIELD (PADDING)
		unsigned char                                              UnknownData_F2YE : 2;                                    // 0x0211(0x0001) BIT_FIELD (PADDING)
		unsigned char                                              bAllowReceiveTickEventOnDedicatedServer : 1;             // 0x0211(0x0001) BIT_FIELD NoDestructor
		unsigned char                                              bLoadedFromSaveGame : 1;                                 // 0x0211(0x0001) BIT_FIELD BlueprintVisible, BlueprintReadOnly, NoDestructor
		unsigned char                                              bPreventLevelBoundsRelevant : 1;                         // 0x0211(0x0001) BIT_FIELD Edit, NoDestructor
		unsigned char                                              bForceReplicateDormantChildrenWithoutSpatialRelevancy : 1; // 0x0211(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		unsigned char                                              bFindCameraComponentWhenViewTarget : 1;                  // 0x0211(0x0001) BIT_FIELD Edit, BlueprintVisible, NoDestructor, AdvancedDisplay
		unsigned char                                              bBPPreInitializeComponents : 1;                          // 0x0211(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		unsigned char                                              bBPPostInitializeComponents : 1;                         // 0x0212(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		unsigned char                                              bForceNetworkSpatialization : 1;                         // 0x0212(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		unsigned char                                              bStasisComponentRadiusForceDistanceCheck : 1;            // 0x0212(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		unsigned char                                              bUseBPInventoryItemUsed : 1;                             // 0x0212(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		unsigned char                                              bUseBPInventoryItemDropped : 1;                          // 0x0212(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		unsigned char                                              bBPInventoryItemUsedHandlesDurability : 1;               // 0x0212(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		unsigned char                                              bUseBPForceAllowsInventoryUse : 1;                       // 0x0212(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		unsigned char                                              bAlwaysCreatePhysicsState : 1;                           // 0x0212(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		unsigned char                                              bReplicateRotationHighQuality : 1;                       // 0x0213(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		unsigned char                                              bReplicateVelocityHighQuality : 1;                       // 0x0213(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		unsigned char                                              bOnlyReplicateOnNetForcedUpdate : 1;                     // 0x0213(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		unsigned char                                              bActorInitialized : 1;                                   // 0x0213(0x0001) BIT_FIELD NoDestructor
		unsigned char                                              bActorSeamlessTraveled : 1;                              // 0x0213(0x0001) BIT_FIELD NoDestructor
		unsigned char                                              bIgnoresOriginShifting : 1;                              // 0x0213(0x0001) BIT_FIELD Edit, NoDestructor, AdvancedDisplay
		unsigned char                                              bReplicateHidden : 1;                                    // 0x0213(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		unsigned char                                              bPreventActorStasis : 1;                                 // 0x0213(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		unsigned char                                              bUseBPGetBonesToHideOnAllocation : 1;                    // 0x0214(0x0001) BIT_FIELD Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor
		unsigned char                                              UnknownData_UPW7[0x3];                                   // 0x0215(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int32_t                                                    TargetingTeam;                                           // 0x0218(0x0004) Edit, BlueprintVisible, Net, ZeroConstructor, SaveGame, IsPlainOldData, RepNotify, NoDestructor, NativeAccessSpecifierPublic
		float                                                      OverrideStasisComponentRadius;                           // 0x021C(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class APawn*                                               Instigator;                                              // 0x0220(0x0008) BlueprintVisible, Net, ZeroConstructor, SaveGame, IsPlainOldData, RepNotify, NoDestructor, ExposeOnSpawn
		double                                                     CreationTime;                                            // 0x0228(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		double                                                     OriginalCreationTime;                                    // 0x0230(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, SaveGame, IsPlainOldData, NoDestructor
		TArray<class AActor*>                                      Children;                                                // 0x0238(0x0010) ZeroConstructor, Transient
		uint32_t                                                   AnimUpdateRateShiftTag;                                  // 0x0248(0x0004) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected
		uint32_t                                                   AnimUpdateRateFrameCount;                                // 0x024C(0x0004) ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		class USceneComponent*                                     RootComponent;                                           // 0x0250(0x0008) ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected
		TArray<class AMatineeActor*>                               ControllingMatineeActors;                                // 0x0258(0x0010) ZeroConstructor, Transient, Protected
		float                                                      InitialLifeSpan;                                         // 0x0268(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, SaveGame, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_9P1Q[0x4];                                   // 0x026C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class FName>                                        Layers;                                                  // 0x0270(0x0010) ZeroConstructor
		TWeakObjectPtr<class AActor>                               ParentComponentActor;                                    // 0x0280(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor
		double                                                     LastRenderTime;                                          // 0x0288(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		double                                                     LastRenderTimeIgnoreShadow;                              // 0x0290(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		TArray<class FName>                                        Tags;                                                    // 0x0298(0x0010) Edit, BlueprintVisible, ZeroConstructor
		uint64_t                                                   HiddenEditorViews;                                       // 0x02A8(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		class FScriptMulticastDelegate                             OnTakeAnyDamage;                                         // 0x02B0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable
		class FScriptMulticastDelegate                             OnTakePointDamage;                                       // 0x02C0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable
		class FScriptMulticastDelegate                             OnActorBeginOverlap;                                     // 0x02D0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable
		class FScriptMulticastDelegate                             OnActorEndOverlap;                                       // 0x02E0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable
		class FScriptMulticastDelegate                             OnBeginCursorOver;                                       // 0x02F0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable
		class FScriptMulticastDelegate                             OnEndCursorOver;                                         // 0x0300(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable
		class FScriptMulticastDelegate                             OnClicked;                                               // 0x0310(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable
		class FScriptMulticastDelegate                             OnReleased;                                              // 0x0320(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable
		class FScriptMulticastDelegate                             OnInputTouchBegin;                                       // 0x0330(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable
		class FScriptMulticastDelegate                             OnInputTouchEnd;                                         // 0x0340(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable
		class FScriptMulticastDelegate                             OnInputTouchEnter;                                       // 0x0350(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable
		class FScriptMulticastDelegate                             OnInputTouchLeave;                                       // 0x0360(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable
		class FScriptMulticastDelegate                             OnActorHit;                                              // 0x0370(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable
		class FScriptMulticastDelegate                             OnTargetingTeamChanged;                                  // 0x0380(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable
		struct FVector                                             DefaultActorLocation;                                    // 0x0390(0x000C) ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		struct FGuid                                               UniqueGuidId;                                            // 0x039C(0x0010) ZeroConstructor
		unsigned char                                              UnknownData_X6NA[0x4];                                   // 0x03AC(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FScriptMulticastDelegate                             OnDestroyed;                                             // 0x03B0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable
		class FScriptMulticastDelegate                             OnActorCustomEvent;                                      // 0x03C0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable
		class FScriptMulticastDelegate                             OnEndPlay;                                               // 0x03D0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable
		unsigned char                                              UnknownData_8LN9[0x8];                                   // 0x03E0(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FScriptMulticastDelegate                             OnMatineeUpdated;                                        // 0x03E8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable
		unsigned char                                              UnknownData_0MPR[0x20];                                  // 0x03F8(0x0020) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FScriptMulticastDelegate                             OnSemaphoreTaken;                                        // 0x0418(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable
		float                                                      ForceMaximumReplicationRateUntilTime;                    // 0x0428(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_XEMA[0x4];                                   // 0x042C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		double                                                     LastActorForceReplicationTime;                           // 0x0430(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_I6XL[0x10];                                  // 0x0438(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class UActorComponent*>                             SerializedComponents;                                    // 0x0448(0x0010) ExportObject, ZeroConstructor, ContainsInstancedReference, TextExportTransient
		unsigned char                                              UnknownData_ANZA[0xC];                                   // 0x0458(0x000C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       bUseBPPreventAttachments;                                // 0x0464(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		bool                                                       bForceNonBlockingHits;                                   // 0x0465(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_LTYX[0x2];                                   // 0x0466(0x0002) MISSED OFFSET (PADDING)

	public:
		void UserConstructionScript();
		void Unstasis();
		bool TryMultiUse(class APlayerController* ForPC, int32_t UseIndex);
		void ThrottledTick();
		void TargetingTeamChanged__DelegateSignature();
		void TargetingTeamChanged();
		void TakePointDamageSignature__DelegateSignature(float Damage, class AController* InstigatedBy, const struct FVector& HitLocation, class UPrimitiveComponent* FHitComponent, const class FName& BoneName, const struct FVector& ShotFromDirection, class UDamageType* DamageType, class AActor* DamageCauser);
		void TakeAnyDamageSignature__DelegateSignature(float Damage, class UDamageType* DamageType, class AController* InstigatedBy, class AActor* DamageCauser);
		void StopActorSound(class USoundBase* SoundAsset, float FadeOutTime);
		void SnapRootComponentTo(class AActor* InParentActor, const class FName& InSocketName);
		void SetTickFunctionEnabled(bool bEnableTick);
		void SetTickableWhenPaused(bool bTickableWhenPaused);
		void SetReplicates(bool bInReplicates);
		void SetOwner(class AActor* NewOwner);
		void SetNetworkSpatializationParent(class AActor* NewParent);
		void SetLifeSpan(float InLifespan);
		bool SetActorTransform(const struct UObject_FTransform& NewTransform, bool bSweep);
		void SetActorScale3D(const struct FVector& NewScale3D);
		bool SetActorRotation(const struct FRotator& NewRotation);
		void SetActorRelativeTransform(const struct UObject_FTransform& NewRelativeTransform, bool bSweep);
		void SetActorRelativeScale3D(const struct FVector& NewRelativeScale);
		void SetActorRelativeRotation(const struct FRotator& NewRelativeRotation, bool bSweep);
		void SetActorRelativeLocation(const struct FVector& NewRelativeLocation, bool bSweep);
		bool SetActorLocationAndRotation(const struct FVector& NewLocation, const struct FRotator& NewRotation, bool bSweep);
		void SetActorHiddenInGame(bool bNewHidden);
		void SetActorEnableCollision(bool bNewActorEnableCollision);
		void ServerSendSimpleExecCommandToEveryone(const class FName& CommandName, bool bIsReliable, bool bForceSendToLocalPlayer, bool bIgnoreRelevancy);
		void ServerSendExecCommandToPlayer(class APlayerController* ToPC, const class FName& CommandName, const struct FBPNetExecParams& ExecParams, bool bIsReliable, bool bForceSendToLocalPlayer, bool bIgnoreRelevancy);
		void ServerSendExecCommandToEveryone(const class FName& CommandName, const struct FBPNetExecParams& ExecParams, bool bIsReliable, bool bForceSendToLocalPlayer, bool bIgnoreRelevancy);
		void RerunConstructionScripts();
		void ReregisterAllComponents();
		void RemoveTickPrerequisiteComponent(class UActorComponent* PrerequisiteComponent);
		void RemoveTickPrerequisiteActor(class AActor* PrerequisiteActor);
		void RecieveMatineeUpdated();
		void ReceiveTick(float DeltaSeconds);
		void ReceiveRadialDamage(float DamageReceived, class UDamageType* DamageType, const struct FVector& Origin, const struct FHitResult& HitInfo, class AController* InstigatedBy, class AActor* DamageCauser);
		void ReceivePointDamage(float Damage, class UDamageType* DamageType, const struct FVector& HitLocation, const struct FVector& HitNormal, class UPrimitiveComponent* HitComponent, const class FName& BoneName, const struct FVector& ShotFromDirection, class AController* InstigatedBy, class AActor* DamageCauser);
		void ReceiveInput(const class FString& InputName, float Value, const struct FVector& VectorValue, bool bStarted, bool bEnded);
		void ReceiveHit(class UPrimitiveComponent* MyComp, class AActor* Other, class UPrimitiveComponent* OtherComp, bool bSelfMoved, const struct FVector& HitLocation, const struct FVector& HitNormal, const struct FVector& NormalImpulse, const struct FHitResult& Hit);
		void ReceiveEndPlay(EEndPlayReason EndPlayReason);
		void ReceiveDestroyed();
		void ReceiveBeginPlay();
		void ReceiveAnyDamage(float Damage, class UDamageType* DamageType, class AController* InstigatedBy, class AActor* DamageCauser);
		void ReceiveActorOnReleased();
		void ReceiveActorOnInputTouchLeave(ETouchIndex FingerIndex);
		void ReceiveActorOnInputTouchEnter(ETouchIndex FingerIndex);
		void ReceiveActorOnInputTouchEnd(ETouchIndex FingerIndex);
		void ReceiveActorOnInputTouchBegin(ETouchIndex FingerIndex);
		void ReceiveActorOnClicked();
		void ReceiveActorEndOverlap(class AActor* OtherActor);
		void ReceiveActorEndCursorOver();
		void ReceiveActorBeginOverlap(class AActor* OtherActor);
		void ReceiveActorBeginCursorOver();
		void PropertyServerToClients(class AActor* ActorToRep, const class FName& PropertyName, TArray<unsigned char> ReplicationData);
		void PlaySoundOnActor(class USoundCue* InSoundCue, float VolumeMultiplier, float PitchMultiplier);
		void PlaySoundAtLocation(class USoundCue* InSoundCue, const struct FVector& SoundLocation, float VolumeMultiplier, float PitchMultiplier);
		void PerformanceThrottledTick();
		void OnRep_ReplicatedMovement();
		void OnRep_Instigator();
		void OnRep_AttachmentReplication();
		void OnInventoryItemGrind();
		void NetDetachRootComponentFromAny();
		void NetAttachRootComponentTo(class USceneComponent* InParent, const class FName& InSocketName, const struct FVector& RelativeLocation, const struct FRotator& RelativeRotation);
		void MulticastPropertyToPlayer(const class FName& PropertyName, class APlayerController* PC);
		void MulticastProperty(const class FName& PropertyName);
		void MulticastDrawDebugString(const struct FVector& TextLocation, const class FString& Text, class AActor* TestBaseActor, const struct FLinearColor& TextColor, float Duration, bool enableInShipping);
		void MulticastDrawDebugSphere(const struct FVector& Center, float Radius, int32_t Segments, const struct FLinearColor& LineColor, float Duration, bool enableInShipping);
		void MulticastDrawDebugPoint(const struct FVector& Position, float Size, const struct FLinearColor& PointColor, float Duration, bool enableInShipping);
		void MulticastDrawDebugPlane(const struct FPlane& PlaneCoordinates, const struct FVector& Location, float Size, const struct FLinearColor& PlaneColor, float Duration, bool enableInShipping);
		void MulticastDrawDebugLineTraceHitResult(const struct FHitResult& Hit, const struct FVector& TraceStart, const struct FVector& TraceEnd, const struct FLinearColor& StartColor, const struct FLinearColor& HitColor, float LineThickness, float HitSize, bool bDrawHitNormal, const struct FLinearColor& HitNormalColor, float HitNormalLength, float Duration, bool enableInShipping);
		void MulticastDrawDebugLine(const struct FVector& LineStart, const struct FVector& LineEnd, const struct FLinearColor& LineColor, float Duration, float Thickness, bool enableInShipping);
		void MulticastDrawDebugCylinder(const struct FVector& Start, const struct FVector& End, float Radius, int32_t Segments, const struct FLinearColor& LineColor, float Duration, bool enableInShipping);
		void MulticastDrawDebugCoordinateSystem(const struct FVector& AxisLoc, const struct FRotator& AxisRot, float Scale, float Duration, float Thickness, bool enableInShipping);
		void MulticastDrawDebugCapsuleWithExtents(const struct FVector& Top, const struct FVector& Bottom, float Radius, const struct FLinearColor& LineColor, float Duration, bool bPersistent, bool enableInShipping);
		void MulticastDrawDebugCapsule(const struct FVector& Center, float HalfHeight, float Radius, const struct FRotator& Rotation, const struct FLinearColor& LineColor, float Duration, bool enableInShipping);
		void MulticastDrawDebugCamera(class ACameraActor* CameraActor, const struct FLinearColor& CameraColor, float Duration, bool enableInShipping);
		void MulticastDrawDebugBox(const struct FVector& Center, const struct FVector& Extent, const struct FLinearColor& LineColor, const struct FRotator& Rotation, float Duration, bool enableInShipping);
		void MulticastDrawDebugArrow(const struct FVector& LineStart, const struct FVector& LineEnd, float ArrowSize, const struct FLinearColor& LineColor, float Duration, bool enableInShipping);
		void ModifyHudMultiUseLoc(struct FVector2D* theVec, class APlayerController* PC, int32_t index);
		void MakeNoise(float Loudness, class APawn* NoiseInstigator, const struct FVector& NoiseLocation);
		class UMaterialInstanceDynamic* MakeMIDForMaterial(class UMaterialInterface* Parent);
		bool K2_TeleportTo(const struct FVector& DestLocation, const struct FRotator& DestRotation, bool bSimpleTeleport);
		bool K2_SetActorLocation(const struct FVector& NewLocation, bool bSweep);
		void K2_OnEndViewTarget(class APlayerController* PC);
		void K2_OnBecomeViewTarget(class APlayerController* PC);
		class UWorld* K2_GetWorld();
		class USceneComponent* K2_GetRootComponent();
		struct FRotator K2_GetActorRotation();
		struct FVector K2_GetActorLocation();
		void K2_DestroyComponent(class UActorComponent* Component);
		void K2_DestroyActor();
		void K2_AttachRootComponentToActor(class AActor* InParentActor, const class FName& InSocketName, EAttachLocation AttachLocationType, bool bWeldSimulatedBodies);
		void K2_AttachRootComponentTo(class USceneComponent* InParent, const class FName& InSocketName, EAttachLocation AttachLocationType, bool bWeldSimulatedBodies);
		bool IsTargetable();
		bool IsShooterCharacter();
		bool IsPrimalStructureTurret();
		bool IsPrimalStructureItemContainer();
		bool IsPrimalStructure();
		bool IsPrimalDino();
		bool IsPrimalCharacterOrStructure();
		bool IsPrimalCharacter();
		bool IsOwnedOrControlledBy(class AActor* TestOwner);
		bool IsLocallyControlledByPlayer();
		bool IsFirstPersonMeshVisible();
		bool IsDead();
		bool IsCorruptDino();
		bool HasAuthority();
		class UPrimitiveComponent* GetVisibleComponentByClass(class UClass* ComponentClass, bool bSkipHiddenComponents);
		float GetVerticalDistanceTo(class AActor* OtherActor);
		struct FVector GetVelocity(bool bIsForRagdoll);
		float GetUsablePriority();
		struct UObject_FTransform GetTransform();
		struct FVector GetTargetingLocation(class AActor* Attacker);
		class AActor* GetSecondaryMountedActor();
		class APlayerController* GetOwnerController();
		class AActor* GetOwner();
		void GetOverlappingComponents(TArray<class UPrimitiveComponent*>* OverlappingComponents);
		void GetOverlappingActors(TArray<class AActor*>* OverlappingActors, class UClass* ClassFilter);
		float GetLifeSpan();
		struct UObject_FTransform GetInterpolatedTransform();
		struct FRotator GetInterpolatedRotation();
		struct FVector GetInterpolatedLocation();
		class AController* GetInstigatorController();
		class APawn* GetInstigator();
		struct FVector GetInputVectorAxisValue(const struct FKey& InputAxisKey);
		float GetInputAxisValue(const class FName& InputAxisName);
		float GetInputAxisKeyValue(const struct FKey& InputAxisKey);
		float GetHorizontalDotProductTo(class AActor* OtherActor);
		float GetHorizontalDistanceTo(class AActor* OtherActor);
		float GetDotProductTo(class AActor* OtherActor);
		float GetDistanceTo(class AActor* OtherActor);
		TArray<class UActorComponent*> GetComponentsByCustomTag(const class FName& TheTag);
		TArray<class UActorComponent*> GetComponentsByClass(class UClass* ComponentClass);
		class UActorComponent* GetComponentByCustomTag(const class FName& TheTag);
		class UActorComponent* GetComponentByClass(class UClass* ComponentClass);
		class AController* GetCharacterController();
		float GetAttachedSoundVolumeMultiplier();
		float GetAttachedSoundPitchMultiplier();
		void GetAttachedActors(TArray<class AActor*>* OutActors);
		void GetAllSceneComponents(TArray<class USceneComponent*>* OutComponents);
		struct FVector GetActorViewDirection();
		struct FVector GetActorUpVector();
		float GetActorTimeDilation();
		struct FVector GetActorScale3D();
		struct FVector GetActorRightVector();
		struct FVector GetActorRelativeScale3D();
		struct FVector GetActorForwardVector();
		bool GetActorEnableCollision();
		class UClass* GetActorClass();
		void GetActorBounds(bool bOnlyCollidingComponents, struct FVector* Origin, struct FVector* BoxExtent);
		void ForceReplicateNowWithChannel();
		void ForceReplicateNow(bool bForceCreateChannel, bool bForceCreateChannelIfRelevant);
		void ForceNetUpdate(bool bDormantDontReplicateProperties, bool bAbsoluteForceNetUpdate, bool bDontUpdateChannel);
		void ForceDestroy();
		void FlushNetDormancy();
		void EnableInput(class APlayerController* PlayerController);
		void DrawInEditorViewport(class UCanvas* Canvas, int32_t LHSX, int32_t InOutLHSY, int32_t RHSX, int32_t InOutRHSY, const struct FVector& ViewLocation, const struct FRotator& ViewRotation);
		void DrawBasicFloatingHUD(class AHUD* ForHUD);
		void DisableInput(class APlayerController* PlayerController);
		void DetachRootComponentFromParent(bool bMaintainWorldPosition);
		void ClientMultiUse(class APlayerController* ForPC, int32_t UseIndex);
		struct FBox CalculateComponentsBoundingBoxInLocalSpace(bool bNonColliding);
		bool BPTryMultiUse(class APlayerController* ForPC, int32_t UseIndex);
		bool BPServerHandleNetExecCommand(class APlayerController* FromPC, const class FName& CommandName, const struct FBPNetExecParams& ExecParams);
		bool BPPreventAttachments(class UObject* ForItem);
		void BPPreInitializeComponents();
		void BPPostInitializeComponents();
		struct FVector BPOverrideUILocation(class APlayerController* ForPC);
		bool BPIsA(class UClass* anActorClass);
		void BPInventoryItemUsed(class UObject* InventoryItemObject);
		void BPInventoryItemDropped(class UObject* InventoryItemObject);
		void BPGetShowDebugAnimationComponents(TArray<class USkeletalMeshComponent*>* SkelMeshComponents);
		TArray<struct FMultiUseEntry> BPGetMultiUseEntries(class APlayerController* ForPC, TArray<struct FMultiUseEntry> MultiUseEntries);
		bool BPGetMultiUseCenterText(class APlayerController* ForPC, int32_t UseIndex, class FString* OutCenterText, struct FLinearColor* OutCenterTextColor);
		int32_t BPGetExtraSpecialBlueprintInt(int32_t toCheck);
		TArray<class FName> BPGetBonesToHideOnAllocation();
		void BPGetActorEyesViewPoint(struct FVector* Location, struct FRotator* Rotation);
		bool BPForceAllowsInventoryUse(class UObject* InventoryItemObject);
		bool BPCustomIsRelevantForClient(class APlayerController* ForPC);
		bool BPConsumeUsePinCode(class AActor* FromKeypadActor, class APlayerController* ForPC, int32_t appledPinCode, bool bIsActivating);
		bool BPConsumeSetPinCode(class APlayerController* ForPC, int32_t appledPinCode, bool bIsSetting, int32_t TheCustomIndex);
		bool BPClientHandleNetExecCommand(const class FName& CommandName, const struct FBPNetExecParams& ExecParams, class APlayerController* ForPC);
		void BPClientDoMultiUse(class APlayerController* ForPC, int32_t ClientUseIndex);
		TArray<struct FBPMapCheckEntry> BPCheckForErrors();
		void BPChangedActorTeam();
		void BPAttachedRootComponent();
		struct FVector BP_OverrideTargetingLocation(class AActor* Attacker);
		struct FVector BP_GetHUDWorldDrawLocation(const class FName& HUDTag);
		bool AllowManualMultiUseActivation(class APlayerController* ForPC);
		bool AllowIgnoreCharacterEncroachment(class UPrimitiveComponent* HitComponent, class AActor* EncroachingCharacter);
		bool AllowGrappling();
		void AddTickPrerequisiteComponent(class UActorComponent* PrerequisiteComponent);
		void AddTickPrerequisiteActor(class AActor* PrerequisiteActor);
		class UActorComponent* AddComponent(const class FName& TemplateName, bool bManualAttachment, const struct UObject_FTransform& RelativeTransform, class UObject* ComponentTemplateContext);
		void AddActorWorldTransform(const struct UObject_FTransform& DeltaTransform, bool bSweep);
		void AddActorWorldRotation(const struct FRotator& DeltaRotation, bool bSweep);
		void AddActorWorldOffset(const struct FVector& DeltaLocation, bool bSweep);
		void AddActorLocalTransform(const struct UObject_FTransform& NewTransform, bool bSweep);
		void AddActorLocalRotation(const struct FRotator& DeltaRotation, bool bSweep);
		void AddActorLocalOffset(const struct FVector& DeltaLocation, bool bSweep);
		void ActorSemaphoreTaken__DelegateSignature(const class FName& SemaphoreName);
		void ActorPlaySoundUnreliable(class USoundBase* SoundAsset, bool bAttach, const class FName& BoneName, const struct FVector& LocOffset);
		void ActorPlaySound(class USoundBase* SoundAsset, bool bAttach, const class FName& BoneName, const struct FVector& LocOffset);
		void ActorOnReleasedSignature__DelegateSignature();
		void ActorOnInputTouchEndSignature__DelegateSignature(ETouchIndex FingerIndex);
		void ActorOnInputTouchBeginSignature__DelegateSignature(ETouchIndex FingerIndex);
		void ActorOnClickedSignature__DelegateSignature();
		void ActorMatineeUpdated__DelegateSignature();
		void ActorHitSignature__DelegateSignature(class AActor* SelfActor, class AActor* OtherActor, const struct FVector& NormalImpulse, const struct FHitResult& Hit);
		bool ActorHasTag(const class FName& Tag);
		void ActorEndTouchOverSignature__DelegateSignature(ETouchIndex FingerIndex);
		void ActorEndPlaySignature__DelegateSignature(EEndPlayReason EndPlayReason);
		void ActorEndOverlapSignature__DelegateSignature(class AActor* OtherActor);
		void ActorEndCursorOverSignature__DelegateSignature();
		void ActorDestroyedSignature__DelegateSignature();
		void ActorCustomEventSignature__DelegateSignature(const class FName& EventCustomName, const class FString& EventCustomString, class AActor* InstigatorActor);
		void ActorBeginTouchOverSignature__DelegateSignature(ETouchIndex FingerIndex);
		void ActorBeginOverlapSignature__DelegateSignature(class AActor* OtherActor);
		void ActorBeginCursorOverSignature__DelegateSignature();

		bool IsPrimalCharFriendly(class APrimalCharacter* primalChar)
		{
			static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalCharacter.IsPrimalCharFriendly");

			struct {
				class APrimalCharacter* primalChar;
				bool ReturnValue;
			}params;
			params.primalChar = primalChar;

			
			auto flags = fn->FunctionFlags;
			fn->FunctionFlags |= 0x00000400;
			CG::process_event(this, fn, &params);
			fn->FunctionFlags = flags;

			
			return params.ReturnValue;
		}
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.Controller
	 * Size -> 0x0058 (FullSize[0x04C0] - InheritedSize[0x0468])
	 */
	class AController : public AActor
	{
	public:
		unsigned char                                              UnknownData_RDN0[0x10];                                  // 0x0468(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class ACharacter*                                          Character;                                               // 0x0478(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor
		class APlayerState*                                        PlayerState;                                             // 0x0480(0x0008) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor
		class APawn*                                               Pawn;                                                    // 0x0488(0x0008) Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, Protected
		struct FRotator                                            ControlRotation;                                         // 0x0490(0x000C) ZeroConstructor, IsPlainOldData, NoDestructor, Protected
		unsigned char                                              bAttachToPawn : 1;                                       // 0x049C(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor, AdvancedDisplay, Protected
		unsigned char                                              UnknownData_RH0E[0xB];                                   // 0x049D(0x000B) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FName                                                StateName;                                               // 0x04A8(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor
		class FScriptMulticastDelegate                             OnInstigatedAnyDamage;                                   // 0x04B0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable

	public:
		void UnPossess();
		void StopMovement();
		void SetInitialLocationAndRotation(const struct FVector& NewLocation, const struct FRotator& NewRotation);
		void SetControlRotation(const struct FRotator& NewRotation);
		void ReceiveInstigatedAnyDamage(float Damage, class UDamageType* DamageType, class AActor* DamagedActor, class AActor* DamageCauser);
		void Possess(class APawn* inPawn);
		void OnRep_PlayerState();
		void OnRep_Pawn();
		bool LineOfSightTo(class AActor* Other, const struct FVector& ViewPoint, bool bAlternateChecks);
		class APawn* K2_GetPawn();
		bool IsLocalPlayerController();
		bool IsLocalController();
		void InstigatedAnyDamageSignature__DelegateSignature(float Damage, class UDamageType* DamageType, class AActor* DamagedActor, class AActor* DamageCauser);
		class AActor* GetViewTarget();
		void GetPlayerViewPoint(struct FVector* Location, struct FRotator* Rotation);
		struct FRotator GetDesiredRotation();
		struct FRotator GetControlRotation();
		void ClientSetRotation(const struct FRotator& NewRotation, bool bResetCamera);
		void ClientSetLocation(const struct FVector& NewLocation, const struct FRotator& NewRotation);
		class APlayerController* CastToPlayerController();
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.AnimationAsset
	 * Size -> 0x0018 (FullSize[0x0040] - InheritedSize[0x0028])
	 */
	class UAnimationAsset : public UObject
	{
	public:
		class USkeleton*                                           Skeleton;                                                // 0x0028(0x0008) Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, AssetRegistrySearchable
		unsigned char                                              UnknownData_BM7A[0x10];                                  // 0x0030(0x0010) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.ActorComponent
	 * Size -> 0x00B0 (FullSize[0x00D8] - InheritedSize[0x0028])
	 */
	class UActorComponent : public UObject
	{
	public:
		unsigned char                                              UnknownData_MJF7[0x8];                                   // 0x0028(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FActorComponentTickFunction                         PrimaryComponentTick;                                    // 0x0030(0x0058)
		TArray<class FName>                                        ComponentTags;                                           // 0x0088(0x0010) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance
		TArray<class UAssetUserData*>                              AssetUserData;                                           // 0x0098(0x0010) ZeroConstructor, Protected
		unsigned char                                              UnknownData_ZT9J : 4;                                    // 0x00A8(0x0001) BIT_FIELD (PADDING)
		unsigned char                                              bAutoRegister : 1;                                       // 0x00A8(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		unsigned char                                              bTickInEditor : 1;                                       // 0x00A8(0x0001) BIT_FIELD NoDestructor
		unsigned char                                              bNeverNeedsRenderUpdate : 1;                             // 0x00A8(0x0001) BIT_FIELD Transient, NoDestructor
		unsigned char                                              bAllowConcurrentTick : 1;                                // 0x00A8(0x0001) BIT_FIELD NoDestructor
		unsigned char                                              bCreatedByConstructionScript : 1;                        // 0x00A9(0x0001) BIT_FIELD NoDestructor
		unsigned char                                              bAutoActivate : 1;                                       // 0x00A9(0x0001) BIT_FIELD Edit, BlueprintVisible, NoDestructor
		unsigned char                                              bIsActive : 1;                                           // 0x00A9(0x0001) BIT_FIELD Net, Transient, RepNotify, NoDestructor
		unsigned char                                              bWantsInitializeComponent : 1;                           // 0x00A9(0x0001) BIT_FIELD NoDestructor
		unsigned char                                              UnknownData_Z7MJ : 2;                                    // 0x00A9(0x0001) BIT_FIELD (PADDING)
		unsigned char                                              bAlwaysReplicatePropertyConditional : 1;                 // 0x00A9(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		unsigned char                                              bUseBPOnComponentTick : 1;                               // 0x00A9(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		unsigned char                                              bUseBPOnComponentDestroyed : 1;                          // 0x00AA(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		unsigned char                                              bUseBPOnComponentCreated : 1;                            // 0x00AA(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		unsigned char                                              UnknownData_YD3J[0x1];                                   // 0x00AB(0x0001) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FName                                                CustomTag;                                               // 0x00AC(0x0008) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		int32_t                                                    CustomData;                                              // 0x00B4(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_3J43[0x10];                                  // 0x00B8(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		unsigned char                                              UnknownData_5BAW : 2;                                    // 0x00C8(0x0001) BIT_FIELD (PADDING)
		unsigned char                                              bReplicates : 1;                                         // 0x00C8(0x0001) BIT_FIELD Edit, BlueprintVisible, BlueprintReadOnly, Net, DisableEditOnInstance, NoDestructor, Protected
		unsigned char                                              bNetAddressable : 1;                                     // 0x00C8(0x0001) BIT_FIELD Transient, NoDestructor, Protected
		unsigned char                                              UnknownData_MDEW[0xF];                                   // 0x00C9(0x000F) MISSED OFFSET (PADDING)

	public:
		void ToggleActive();
		void SetIsReplicated(bool ShouldReplicate);
		void SetComponentTickEnabled(bool bEnabled);
		void SetActive(bool bNewActive, bool bReset);
		void ReregisterComponent();
		void RemoveTickPrerequisiteComponent(class UActorComponent* PrerequisiteComponent);
		void RemoveTickPrerequisiteActor(class AActor* PrerequisiteActor);
		void OnRep_IsActive();
		void K2_DestroyComponent(class UObject* Object);
		bool IsActive();
		class UWorld* GetWorld();
		class AActor* GetOwner();
		void Deactivate();
		bool ComponentHasTag(const class FName& Tag);
		void BPTickComponent(float DeltaTime);
		void BPOnComponentTick(float DeltaTime);
		void BPOnComponentDestroyed();
		void BPOnComponentCreated();
		void AddTickPrerequisiteComponent(class UActorComponent* PrerequisiteComponent);
		void AddTickPrerequisiteActor(class AActor* PrerequisiteActor);
		void AddedAsPrimalItemAttachment();
		void Activate(bool bReset);
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.SceneComponent
	 * Size -> 0x0100 (FullSize[0x01D8] - InheritedSize[0x00D8])
	 */
	class USceneComponent : public UActorComponent
	{
	public:
		unsigned char                                              UnknownData_LI71[0x8];                                   // 0x00D8(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct UObject_FTransform                                  ComponentToWorld;                                        // 0x00E0(0x0030) SaveGame, IsPlainOldData, NoDestructor
		unsigned char                                              bRequiresCustomLocation : 1;                             // 0x0110(0x0001) BIT_FIELD NoDestructor
		unsigned char                                              bAbsoluteLocation : 1;                                   // 0x0110(0x0001) BIT_FIELD Edit, BlueprintVisible, Net, RepNotify, NoDestructor, AdvancedDisplay
		unsigned char                                              bAllowActorUpdateCallback : 1;                           // 0x0110(0x0001) BIT_FIELD Edit, BlueprintVisible, NoDestructor, AdvancedDisplay
		unsigned char                                              bAbsoluteTranslation : 1;                                // 0x0110(0x0001) BIT_FIELD Deprecated, NoDestructor
		unsigned char                                              bAbsoluteRotation : 1;                                   // 0x0110(0x0001) BIT_FIELD Edit, BlueprintVisible, Net, RepNotify, NoDestructor, AdvancedDisplay
		unsigned char                                              bAbsoluteScale : 1;                                      // 0x0110(0x0001) BIT_FIELD Edit, BlueprintVisible, Net, RepNotify, NoDestructor, AdvancedDisplay
		unsigned char                                              bVisible : 1;                                            // 0x0110(0x0001) BIT_FIELD Edit, BlueprintVisible, BlueprintReadOnly, Net, RepNotify, NoDestructor
		unsigned char                                              bHiddenInGame : 1;                                       // 0x0110(0x0001) BIT_FIELD Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor
		unsigned char                                              bAttachedSoundsForceHighPriority : 1;                    // 0x0111(0x0001) BIT_FIELD Edit, BlueprintVisible, NoDestructor
		unsigned char                                              bShouldUpdatePhysicsVolume : 1;                          // 0x0111(0x0001) BIT_FIELD Edit, BlueprintVisible, NoDestructor
		unsigned char                                              bUpdateChildOverlaps : 1;                                // 0x0111(0x0001) BIT_FIELD Edit, BlueprintVisible, NoDestructor
		unsigned char                                              bBoundsChangeTriggersStreamingDataRebuild : 1;           // 0x0111(0x0001) BIT_FIELD NoDestructor
		unsigned char                                              bUseAttachParentBound : 1;                               // 0x0111(0x0001) BIT_FIELD Edit, BlueprintVisible, NoDestructor, AdvancedDisplay
		unsigned char                                              bWorldToComponentUpdated : 1;                            // 0x0111(0x0001) BIT_FIELD Transient, NoDestructor, Protected
		unsigned char                                              bClientSyncAlwaysUpdatePhysicsCollision : 1;             // 0x0111(0x0001) BIT_FIELD Edit, BlueprintVisible, NoDestructor
		unsigned char                                              bIgnoreParentTransformUpdate : 1;                        // 0x0111(0x0001) BIT_FIELD Edit, BlueprintVisible, NoDestructor
		unsigned char                                              UnknownData_MWE9[0x2];                                   // 0x0112(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		EComponentMobility                                         Mobility;                                                // 0x0114(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_FEKT[0x23];                                  // 0x0115(0x0023) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class USceneComponent*                                     AttachParent;                                            // 0x0138(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, Net, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor
		class FName                                                attachSocketName;                                        // 0x0140(0x0008) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor
		TArray<class USceneComponent*>                             AttachChildren;                                          // 0x0148(0x0010) ExportObject, ZeroConstructor, Transient, ContainsInstancedReference
		struct FVector                                             RelativeLocation;                                        // 0x0158(0x000C) Edit, BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor
		struct FRotator                                            RelativeRotation;                                        // 0x0164(0x000C) Edit, BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor
		struct FVector                                             RelativeTranslation;                                     // 0x0170(0x000C) ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor
		EDetailMode                                                DetailMode;                                              // 0x017C(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay
		unsigned char                                              UnknownData_QX08[0x3];                                   // 0x017D(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int32_t                                                    AttachmentChangedIncrementer;                            // 0x0180(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_MSEF[0x14];                                  // 0x0184(0x0014) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FVector                                             RelativeScale3D;                                         // 0x0198(0x000C) Edit, BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, RepNotify, Interp, NoDestructor
		struct FVector                                             ComponentVelocity;                                       // 0x01A4(0x000C) ZeroConstructor, IsPlainOldData, NoDestructor
		class APhysicsVolume*                                      PhysicsVolume;                                           // 0x01B0(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected
		class FScriptMulticastDelegate                             PhysicsVolumeChangedDelegate;                            // 0x01B8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable
		unsigned char                                              UnknownData_H95P[0x10];                                  // 0x01C8(0x0010) Fix size for supers

	public:
		void ToggleVisibility(bool bPropagateToChildren);
		void StopSound(class USoundBase* SoundToStop, float FadeOutTime);
		void SnapTo(class USceneComponent* InParent, const class FName& InSocketName);
		void SetWorldTransform(const struct UObject_FTransform& NewTransform, bool bSweep);
		void SetWorldScale3D(const struct FVector& NewScale);
		void SetWorldRotation(const struct FRotator& NewRotation, bool bSweep);
		void SetWorldLocationAndRotation(const struct FVector& NewLocation, const struct FRotator& NewRotation, bool bSweep);
		void SetWorldLocation(const struct FVector& NewLocation, bool bSweep);
		void SetVisibility(bool bNewVisibility, bool bPropagateToChildren);
		void SetRelativeTransform(const struct UObject_FTransform& NewTransform, bool bSweep);
		void SetRelativeScale3D(const struct FVector& NewScale3D);
		void SetRelativeRotation(const struct FRotator& NewRotation, bool bSweep);
		void SetRelativeLocationAndRotation(const struct FVector& NewLocation, const struct FRotator& NewRotation, bool bSweep);
		void SetRelativeLocation(const struct FVector& NewLocation, bool bSweep);
		void SetMobility(EComponentMobility NewMobility);
		void SetHiddenInGame(bool NewHidden, bool bPropagateToChildren);
		void SetAbsolute(bool bNewAbsoluteLocation, bool bNewAbsoluteRotation, bool bNewAbsoluteScale);
		void ResetRelativeTransform();
		void PhysicsVolumeChanged__DelegateSignature(class APhysicsVolume* NewVolume);
		void OnRep_Visibility(bool OldValue);
		void OnRep_Transform();
		struct UObject_FTransform K2_GetComponentToWorld();
		struct FVector K2_GetComponentScale();
		struct FRotator K2_GetComponentRotation();
		struct FVector K2_GetComponentLocation();
		void K2_AttachTo(class USceneComponent* InParent, const class FName& InSocketName, EAttachLocation AttachType, bool bWeldSimulatedBodies);
		bool IsVisible();
		bool IsSimulatingPhysics(const class FName& BoneName);
		bool IsAnySimulatingPhysics();
		struct FVector GetWorldLocation();
		struct FVector GetUpVector();
		struct UObject_FTransform GetSocketTransform(const class FName& InSocketName, ERelativeTransformSpace TransformSpace);
		struct FRotator GetSocketRotation(const class FName& InSocketName);
		struct FQuat GetSocketQuaternion(const class FName& InSocketName);
		struct FVector GetSocketLocation(const class FName& InSocketName);
		struct FVector GetRightVector();
		struct UObject_FTransform GetRelativeTransform();
		class APhysicsVolume* GetPhysicsVolume();
		void GetParentComponents(TArray<class USceneComponent*>* Parents);
		int32_t GetNumChildrenComponents();
		struct FVector GetForwardVector();
		struct FVector GetComponentVelocity();
		void GetChildrenComponents(bool bIncludeAllDescendants, TArray<class USceneComponent*>* Children);
		class USceneComponent* GetChildComponent(int32_t ChildIndex);
		class USceneComponent* GetAttachParent();
		TArray<class FName> GetAllSocketNames();
		bool DoesSocketExist(const class FName& InSocketName);
		void DetachFromParent(bool bMaintainWorldPosition);
		ECollisionEnabled BP_GetCollisionEnabled();
		void AddWorldTransform(const struct UObject_FTransform& DeltaTransform, bool bSweep);
		void AddWorldRotation(const struct FRotator& DeltaRotation, bool bSweep);
		void AddWorldOffset(const struct FVector& DeltaLocation, bool bSweep);
		void AddRelativeRotation(const struct FRotator& DeltaRotation, bool bSweep);
		void AddRelativeLocation(const struct FVector& DeltaLocation, bool bSweep);
		void AddLocalTransform(const struct UObject_FTransform& DeltaTransform, bool bSweep);
		void AddLocalRotation(const struct FRotator& DeltaRotation, bool bSweep);
		void AddLocalOffset(const struct FVector& DeltaLocation, bool bSweep);
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.PrimitiveComponent
	 * Size -> 0x0490 (FullSize[0x0668] - InheritedSize[0x01D8])
	 */
	class UPrimitiveComponent : public USceneComponent
	{
	public:
		unsigned char                                              UnknownData_KANE[0x8];                                   // 0x01D8(0x0008) Fix Super Size
		float                                                      MinDrawDistance;                                         // 0x01E0(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay
		float                                                      MassiveLODSizeOnScreen;                                  // 0x01E4(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      LDMaxDrawDistance;                                       // 0x01E8(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay
		float                                                      CachedMaxDrawDistance;                                   // 0x01EC(0x0004) Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, AdvancedDisplay
		ESceneDepthPriorityGroup                                   DepthPriorityGroup;                                      // 0x01F0(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor
		ESceneDepthPriorityGroup                                   ViewOwnerDepthPriorityGroup;                             // 0x01F1(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_C3OE[0x2];                                   // 0x01F2(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		unsigned char                                              bUseAbsoluteMaxDrawDisatance : 1;                        // 0x01F4(0x0001) BIT_FIELD Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay
		unsigned char                                              bIncludeBoundsRadiusInDrawDistances : 1;                 // 0x01F4(0x0001) BIT_FIELD Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay
		unsigned char                                              bExcludeFromLevelBounds : 1;                             // 0x01F4(0x0001) BIT_FIELD Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay
		unsigned char                                              bPreventCharacterBasing : 1;                             // 0x01F4(0x0001) BIT_FIELD Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay
		unsigned char                                              UnknownData_AVMP : 1;                                    // 0x01F4(0x0001) BIT_FIELD (PADDING)
		unsigned char                                              bNoEncroachCheck : 1;                                    // 0x01F4(0x0001) BIT_FIELD Deprecated, NoDestructor
		unsigned char                                              bDisableAllRigidBody : 1;                                // 0x01F4(0x0001) BIT_FIELD Deprecated, NoDestructor
		unsigned char                                              bForceDynamicPhysics : 1;                                // 0x01F4(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		unsigned char                                              bPreventDamage : 1;                                      // 0x01F5(0x0001) BIT_FIELD Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay
		unsigned char                                              bAlwaysCreatePhysicsState : 1;                           // 0x01F5(0x0001) BIT_FIELD Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay
		unsigned char                                              bGenerateOverlapEvents : 1;                              // 0x01F5(0x0001) BIT_FIELD Edit, BlueprintVisible, NoDestructor
		unsigned char                                              bForceOverlapEvents : 1;                                 // 0x01F5(0x0001) BIT_FIELD Edit, BlueprintVisible, NoDestructor
		unsigned char                                              bMultiBodyOverlap : 1;                                   // 0x01F5(0x0001) BIT_FIELD Edit, BlueprintVisible, NoDestructor, AdvancedDisplay
		unsigned char                                              bCheckAsyncSceneOnMove : 1;                              // 0x01F5(0x0001) BIT_FIELD Edit, BlueprintVisible, NoDestructor, AdvancedDisplay
		unsigned char                                              bTraceComplexOnMove : 1;                                 // 0x01F5(0x0001) BIT_FIELD Edit, BlueprintVisible, NoDestructor, AdvancedDisplay
		unsigned char                                              bReturnMaterialOnMove : 1;                               // 0x01F5(0x0001) BIT_FIELD Edit, BlueprintVisible, NoDestructor, AdvancedDisplay
		unsigned char                                              bUseViewOwnerDepthPriorityGroup : 1;                     // 0x01F6(0x0001) BIT_FIELD NoDestructor
		unsigned char                                              bAllowCullDistanceVolume : 1;                            // 0x01F6(0x0001) BIT_FIELD Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay
		unsigned char                                              bHasMotionBlurVelocityMeshes : 1;                        // 0x01F6(0x0001) BIT_FIELD NoDestructor
		unsigned char                                              bRenderCustomDepth : 1;                                  // 0x01F6(0x0001) BIT_FIELD Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay
		unsigned char                                              UnknownData_QNZV[0x1];                                   // 0x01F7(0x0001) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int32_t                                                    CustomDepthStencilValue;                                 // 0x01F8(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay
		unsigned char                                              bRenderInMainPass : 1;                                   // 0x01FC(0x0001) BIT_FIELD Edit, BlueprintVisible, NoDestructor, AdvancedDisplay
		unsigned char                                              bIsInForeground : 1;                                     // 0x01FC(0x0001) BIT_FIELD Edit, BlueprintVisible, NoDestructor, AdvancedDisplay
		unsigned char                                              HiddenGame : 1;                                          // 0x01FC(0x0001) BIT_FIELD Deprecated, NoDestructor
		unsigned char                                              DrawInGame : 1;                                          // 0x01FC(0x0001) BIT_FIELD Deprecated, NoDestructor
		unsigned char                                              bReceivesDecals : 1;                                     // 0x01FC(0x0001) BIT_FIELD Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay
		unsigned char                                              bOwnerNoSee : 1;                                         // 0x01FC(0x0001) BIT_FIELD Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, AdvancedDisplay
		unsigned char                                              bOnlyOwnerSee : 1;                                       // 0x01FC(0x0001) BIT_FIELD Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, AdvancedDisplay
		unsigned char                                              bTreatAsBackgroundForOcclusion : 1;                      // 0x01FC(0x0001) BIT_FIELD Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay
		unsigned char                                              bUseAsOccluder : 1;                                      // 0x01FD(0x0001) BIT_FIELD NoDestructor
		unsigned char                                              bSelectable : 1;                                         // 0x01FD(0x0001) BIT_FIELD NoDestructor
		unsigned char                                              bForceMipStreaming : 1;                                  // 0x01FD(0x0001) BIT_FIELD Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay
		unsigned char                                              bHasPerInstanceHitProxies : 1;                           // 0x01FD(0x0001) BIT_FIELD NoDestructor
		unsigned char                                              CastShadow : 1;                                          // 0x01FD(0x0001) BIT_FIELD Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor
		unsigned char                                              bAffectDynamicIndirectLighting : 1;                      // 0x01FD(0x0001) BIT_FIELD Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay
		unsigned char                                              bAffectDistanceFieldLighting : 1;                        // 0x01FD(0x0001) BIT_FIELD Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay
		unsigned char                                              bCastDynamicShadow : 1;                                  // 0x01FD(0x0001) BIT_FIELD Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay
		unsigned char                                              bCastStaticShadow : 1;                                   // 0x01FE(0x0001) BIT_FIELD Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay
		unsigned char                                              UnknownData_1XT2[0x1];                                   // 0x01FF(0x0001) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int32_t                                                    ObjectLayer;                                             // 0x0200(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              bCastVolumetricTranslucentShadow : 1;                    // 0x0204(0x0001) BIT_FIELD Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay
		unsigned char                                              bCastFarShadow : 1;                                      // 0x0204(0x0001) BIT_FIELD NoDestructor
		unsigned char                                              bCastInsetShadow : 1;                                    // 0x0204(0x0001) BIT_FIELD Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay
		unsigned char                                              bCastHiddenShadow : 1;                                   // 0x0204(0x0001) BIT_FIELD Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay
		unsigned char                                              bCastShadowAsTwoSided : 1;                               // 0x0204(0x0001) BIT_FIELD Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay
		unsigned char                                              bLightAsIfStatic : 1;                                    // 0x0204(0x0001) BIT_FIELD Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay
		unsigned char                                              bLightAttachmentsAsGroup : 1;                            // 0x0204(0x0001) BIT_FIELD Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay
		unsigned char                                              bUseInternalOctree : 1;                                  // 0x0204(0x0001) BIT_FIELD Edit, BlueprintVisible, NoDestructor, AdvancedDisplay
		unsigned char                                              bUseInternalOctreeOnClient : 1;                          // 0x0205(0x0001) BIT_FIELD Edit, BlueprintVisible, NoDestructor, AdvancedDisplay
		unsigned char                                              UnknownData_OT1Y[0x2];                                   // 0x0206(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		EIndirectLightingCacheQuality                              IndirectLightingCacheQuality;                            // 0x0208(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay
		bool                                                       bHasCachedStaticLighting;                                // 0x0209(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor
		bool                                                       bStaticLightingBuildEnqueued;                            // 0x020A(0x0001) ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_80QI[0x1];                                   // 0x020B(0x0001) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		unsigned char                                              bIgnoreRadialImpulse : 1;                                // 0x020C(0x0001) BIT_FIELD NoDestructor
		unsigned char                                              bIgnoreRadialForce : 1;                                  // 0x020C(0x0001) BIT_FIELD NoDestructor
		unsigned char                                              AlwaysLoadOnClient : 1;                                  // 0x020C(0x0001) BIT_FIELD NoDestructor
		unsigned char                                              AlwaysLoadOnServer : 1;                                  // 0x020C(0x0001) BIT_FIELD NoDestructor
		unsigned char                                              bUseEditorCompositing : 1;                               // 0x020C(0x0001) BIT_FIELD NoDestructor
		unsigned char                                              bIgnoredByCharacterEncroachment : 1;                     // 0x020C(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		unsigned char                                              bMovableUseDynamicDrawDistance : 1;                      // 0x020C(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		unsigned char                                              UnknownData_37X5[0x3];                                   // 0x020D(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int32_t                                                    TranslucencySortPriority;                                // 0x0210(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay
		int32_t                                                    VisibilityId;                                            // 0x0214(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_PEGI[0x140];                                 // 0x0218(0x0140) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int32_t                                                    InternalOctreeMask;                                      // 0x0358(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay
		float                                                      LpvBiasMultiplier;                                       // 0x035C(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay
		float                                                      OverrideStepHeight;                                      // 0x0360(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_H8LQ[0x4];                                   // 0x0364(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FBodyInstance                                       BodyInstance;                                            // 0x0368(0x0160) Edit, BlueprintVisible, BlueprintReadOnly
		unsigned char                                              bCanEverAffectNavigation : 1;                            // 0x04C8(0x0001) BIT_FIELD Edit, NoDestructor, AdvancedDisplay
		unsigned char                                              UnknownData_YDSV[0xB];                                   // 0x04C9(0x000B) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      BoundsScale;                                             // 0x04D4(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay
		double                                                     LastSubmitTime;                                          // 0x04D8(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		double                                                     LastRenderTime;                                          // 0x04E0(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		double                                                     LastRenderTimeIgnoreShadow;                              // 0x04E8(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		ECanBeCharacterBase                                        CanBeCharacterBase;                                      // 0x04F0(0x0001) ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor
		ECanBeCharacterBase                                        CanCharacterStepUpOn;                                    // 0x04F1(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_FFN9[0x26];                                  // 0x04F2(0x0026) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FScriptMulticastDelegate                             OnComponentHit;                                          // 0x0518(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable
		class FScriptMulticastDelegate                             OnComponentBeginOverlap;                                 // 0x0528(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable
		class FScriptMulticastDelegate                             OnComponentEndOverlap;                                   // 0x0538(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable
		class FScriptMulticastDelegate                             OnBeginCursorOver;                                       // 0x0548(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable
		class FScriptMulticastDelegate                             OnEndCursorOver;                                         // 0x0558(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable
		class FScriptMulticastDelegate                             OnClicked;                                               // 0x0568(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable
		class FScriptMulticastDelegate                             OnReleased;                                              // 0x0578(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable
		class FScriptMulticastDelegate                             OnInputTouchBegin;                                       // 0x0588(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable
		class FScriptMulticastDelegate                             OnInputTouchEnd;                                         // 0x0598(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable
		class FScriptMulticastDelegate                             OnInputTouchEnter;                                       // 0x05A8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable
		class FScriptMulticastDelegate                             OnInputTouchLeave;                                       // 0x05B8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable
		unsigned char                                              UnknownData_SM47[0x30];                                  // 0x05C8(0x0030) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		uint32_t                                                   ProxyMeshID;                                             // 0x05F8(0x0004) Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor
		bool                                                       bIsProxyMeshParent;                                      // 0x05FC(0x0001) Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_A0A6[0x1B];                                  // 0x05FD(0x001B) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FPrimitiveComponentPostPhysicsTickFunction          PostPhysicsComponentTick;                                // 0x0618(0x0050)

	public:
		bool WasRecentlyVisible();
		void WakeRigidBody(const class FName& BoneName);
		void WakeAllRigidBodies();
		void SetTranslucentSortPriority(int32_t NewTranslucentSortPriority);
		void SetSimulatePhysics(bool bSimulate);
		void SetRenderCustomDepth(bool bValue);
		void SetPhysMaterialOverride(class UPhysicalMaterial* NewPhysMaterial);
		void SetPhysicsMaxAngularVelocity(float NewMaxAngVel, bool bAddToCurrent, const class FName& BoneName);
		void SetPhysicsLinearVelocity(const struct FVector& NewVel, bool bAddToCurrent, const class FName& BoneName);
		void SetPhysicsAngularVelocity(const struct FVector& NewAngVel, bool bAddToCurrent, const class FName& BoneName);
		void SetOwnerNoSee(bool bNewOwnerNoSee);
		void SetOnlyOwnerSee(bool bNewOnlyOwnerSee);
		void SetNotifyRigidBodyCollision(bool bNewNotifyRigidBodyCollision);
		void SetMaterial(int32_t ElementIndex, class UMaterialInterface* Material);
		void SetLinearDamping(float InDamping);
		void SetEnableGravity(bool bGravityEnabled);
		void SetCustomDepthStencilValue(int32_t Value);
		void SetCollisionResponseToChannel(ECollisionChannel Channel, ECollisionResponse NewResponse);
		void SetCollisionResponseToAllChannels(ECollisionResponse NewResponse);
		void SetCollisionResponseSet(const struct FCollisionResponseSet& Responses);
		void SetCollisionProfileName(const class FName& InCollisionProfileName);
		void SetCollisionObjectType(ECollisionChannel Channel);
		void SetCollisionEnabled(ECollisionEnabled NewType);
		void SetCastShadow(bool NewCastShadow);
		void SetAngularDamping(float InDamping);
		void SetAllPhysicsLinearVelocity(const struct FVector& NewVel, bool bAddToCurrent);
		void PutRigidBodyToSleep(const class FName& BoneName);
		bool K2_LineTraceComponent(const struct FVector& TraceStart, const struct FVector& TraceEnd, bool bTraceComplex, bool bShowTrace, struct FVector* HitLocation, struct FVector* HitNormal, class FName* BoneName);
		bool IsGravityEnabled();
		void IgnoreActorWhenMoving(class AActor* Actor, bool bShouldIgnore);
		struct FWalkableSlopeOverride GetWalkableSlopeOverride();
		struct FVector GetPhysicsLinearVelocity(const class FName& BoneName);
		struct FVector GetPhysicsAngularVelocity(const class FName& BoneName);
		void GetOverlappingComponents(TArray<class UPrimitiveComponent*>* OverlappingComponents);
		void GetOverlappingActors(TArray<class AActor*>* OverlappingActors, class UClass* ClassFilter);
		TArray<struct FOverlapInfo> GetOverlapInfos();
		int32_t GetNumMaterials();
		TArray<TWeakObjectPtr<class AActor>> GetMoveIgnoreActors();
		class UMaterialInterface* GetMaterial(int32_t ElementIndex);
		float GetMass();
		float GetLinearDamping();
		void GetCollisionResponseSet(struct FCollisionResponseSet* OutResponses);
		class FName GetCollisionProfileName();
		float GetAngularDamping();
		class UMaterialInstanceDynamic* CreateDynamicMaterialInstance(int32_t ElementIndex, class UMaterialInterface* SourceMaterial);
		class UMaterialInstanceDynamic* CreateAndSetMaterialInstanceDynamicFromMaterial(int32_t ElementIndex, class UMaterialInterface* Parent);
		class UMaterialInstanceDynamic* CreateAndSetMaterialInstanceDynamic(int32_t ElementIndex);
		void ComponentOnReleasedSignature__DelegateSignature(class UPrimitiveComponent* TouchedComponent);
		void ComponentOnInputTouchEndSignature__DelegateSignature(ETouchIndex FingerIndex, class UPrimitiveComponent* TouchedComponent);
		void ComponentOnInputTouchBeginSignature__DelegateSignature(ETouchIndex FingerIndex, class UPrimitiveComponent* TouchedComponent);
		void ComponentOnClickedSignature__DelegateSignature(class UPrimitiveComponent* TouchedComponent);
		void ComponentHitSignature__DelegateSignature(class AActor* OtherActor, class UPrimitiveComponent* OtherComp, const struct FVector& NormalImpulse, const struct FHitResult& Hit);
		void ComponentEndTouchOverSignature__DelegateSignature(ETouchIndex FingerIndex, class UPrimitiveComponent* TouchedComponent);
		void ComponentEndOverlapSignature__DelegateSignature(class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex);
		void ComponentEndCursorOverSignature__DelegateSignature(class UPrimitiveComponent* TouchedComponent);
		void ComponentBeginTouchOverSignature__DelegateSignature(ETouchIndex FingerIndex, class UPrimitiveComponent* TouchedComponent);
		void ComponentBeginOverlapSignature__DelegateSignature(class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
		void ComponentBeginCursorOverSignature__DelegateSignature(class UPrimitiveComponent* TouchedComponent);
		void ClearMoveIgnoreActors();
		void AddTorque(const struct FVector& Torque, const class FName& BoneName);
		void AddRadialImpulse(const struct FVector& Origin, float Radius, float Strength, ERadialImpulseFalloff Falloff, bool bVelChange);
		void AddRadialForce(const struct FVector& Origin, float Radius, float Strength, ERadialImpulseFalloff Falloff);
		void AddImpulseAtLocation(const struct FVector& Impulse, const struct FVector& Location, const class FName& BoneName);
		void AddImpulse(const struct FVector& Impulse, const class FName& BoneName, bool bVelChange);
		void AddForceAtLocation(const struct FVector& Force, const struct FVector& Location, const class FName& BoneName);
		void AddForce(const struct FVector& Force, const class FName& BoneName);
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.MeshComponent
	 * Size -> 0x0010 (FullSize[0x0678] - InheritedSize[0x0668])
	 */
	class UMeshComponent : public UPrimitiveComponent
	{
	public:
		TArray<class UMaterialInterface*>                          Materials;                                               // 0x0668(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.SkinnedMeshComponent
	 * Size -> 0x0128 (FullSize[0x07A0] - InheritedSize[0x0678])
	 */
	class USkinnedMeshComponent : public UMeshComponent
	{
	public:
		class USkeletalMesh*                                       SkeletalMesh;                                            // 0x0678(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_JKSD[0x50];                                  // 0x0680(0x0050) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		unsigned char                                              bUseBoundsFromMasterPoseComponent : 1;                   // 0x06D0(0x0001) BIT_FIELD NoDestructor
		unsigned char                                              bFreeSpaceBasesOnUnregister : 1;                         // 0x06D0(0x0001) BIT_FIELD Edit, NoDestructor
		unsigned char                                              bAlwaysUpdateMeshForShadowRendering : 1;                 // 0x06D0(0x0001) BIT_FIELD Edit, NoDestructor
		unsigned char                                              UnknownData_3MQI[0x7];                                   // 0x06D1(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<struct FActiveVertexAnim>                           ActiveVertexAnims;                                       // 0x06D8(0x0010) ZeroConstructor, Transient
		class UPhysicsAsset*                                       PhysicsAssetOverride;                                    // 0x06E8(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay
		int32_t                                                    ForcedLodModel;                                          // 0x06F0(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay
		int32_t                                                    MinLodModel;                                             // 0x06F4(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay
		int32_t                                                    PredictedLODLevel;                                       // 0x06F8(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor
		int32_t                                                    OldPredictedLODLevel;                                    // 0x06FC(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      MaxDistanceFactor;                                       // 0x0700(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      ShadowedRecentlyRenderedBoundsScaleMultiplier;           // 0x0704(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		TArray<struct FSkelMeshComponentLODInfo>                   LODInfo;                                                 // 0x0708(0x0010) ZeroConstructor, Transient
		float                                                      StreamingDistanceMultiplier;                             // 0x0718(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay
		struct FColor                                              WireframeColor;                                          // 0x071C(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay
		float                                                      ForceTickPoseWithinRangeSquared;                         // 0x0720(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay
		unsigned char                                              bForceTickPoseWithinRange : 1;                           // 0x0724(0x0001) BIT_FIELD Edit, BlueprintVisible, NoDestructor, AdvancedDisplay
		unsigned char                                              bForceWireframe : 1;                                     // 0x0724(0x0001) BIT_FIELD NoDestructor
		unsigned char                                              bDisplayBones : 1;                                       // 0x0724(0x0001) BIT_FIELD NoDestructor
		unsigned char                                              bHideSkin : 1;                                           // 0x0724(0x0001) BIT_FIELD NoDestructor
		unsigned char                                              bLastUpdatedBoneTransforms : 1;                          // 0x0724(0x0001) BIT_FIELD NoDestructor
		unsigned char                                              UnknownData_ANMI[0x13];                                  // 0x0725(0x0013) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		unsigned char                                              bPerBoneMotionBlur : 1;                                  // 0x0738(0x0001) BIT_FIELD Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay
		unsigned char                                              bComponentUseFixedSkelBounds : 1;                        // 0x0738(0x0001) BIT_FIELD Edit, BlueprintVisible, NoDestructor, AdvancedDisplay
		unsigned char                                              bConsiderAllBodiesForBounds : 1;                         // 0x0738(0x0001) BIT_FIELD Edit, BlueprintVisible, NoDestructor, AdvancedDisplay
		unsigned char                                              bUpdateSkelWhenNotRendered : 1;                          // 0x0738(0x0001) BIT_FIELD Deprecated, NoDestructor
		unsigned char                                              UnknownData_IO33[0x3];                                   // 0x0739(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		EMeshComponentUpdateFlag                                   MeshComponentUpdateFlag;                                 // 0x073C(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay
		unsigned char                                              UnknownData_E04I[0x3];                                   // 0x073D(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		unsigned char                                              bForceMeshObjectUpdate : 1;                              // 0x0740(0x0001) BIT_FIELD Transient, NoDestructor
		unsigned char                                              bForceUpdateMesh : 1;                                    // 0x0740(0x0001) BIT_FIELD NoDestructor
		unsigned char                                              bForceUpdateKinematic : 1;                               // 0x0740(0x0001) BIT_FIELD Transient, NoDestructor
		unsigned char                                              bForceTickPose : 1;                                      // 0x0740(0x0001) BIT_FIELD NoDestructor
		unsigned char                                              bChartDistanceFactor : 1;                                // 0x0740(0x0001) BIT_FIELD NoDestructor
		unsigned char                                              bCanHighlightSelectedSections : 1;                       // 0x0740(0x0001) BIT_FIELD Transient, NoDestructor
		unsigned char                                              bRecentlyRendered : 1;                                   // 0x0740(0x0001) BIT_FIELD Transient, NoDestructor
		unsigned char                                              UnknownData_B68H[0x3];                                   // 0x0741(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      ProgressiveDrawingFraction;                              // 0x0744(0x0004) ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		unsigned char                                              CustomSortAlternateIndexMode;                            // 0x0748(0x0001) ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_8GDB[0xF];                                   // 0x0749(0x000F) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FBoxSphereBounds                                    CachedLocalBounds;                                       // 0x0758(0x001C) ZeroConstructor, Transient, Protected
		bool                                                       bCachedLocalBoundsUpToDate;                              // 0x0774(0x0001) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected
		bool                                                       bEnableUpdateRateOptimizations;                          // 0x0775(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay
		bool                                                       bDisplayDebugUpdateRateOptimizations;                    // 0x0776(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay
		unsigned char                                              UnknownData_EAYP[0x1];                                   // 0x0777(0x0001) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      SkippedTickDeltaTime;                                    // 0x0778(0x0004) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected
		unsigned char                                              UnknownData_ETRC[0x4];                                   // 0x077C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FAnimUpdateRateParameters                           AnimUpdateRateParams;                                    // 0x0780(0x000C) Transient
		unsigned char                                              UnknownData_LESC[0x4];                                   // 0x078C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class USkinnedMeshComponent*                               OverrideTickingVisiblityMesh;                            // 0x0790(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_O3HP[0x8];                                   // 0x0798(0x0008) MISSED OFFSET (PADDING)

	public:
		void UnHideBoneByName(const class FName& BoneName);
		void TransformToBoneSpace(const class FName& BoneName, const struct FVector& InPosition, const struct FRotator& InRotation, struct FVector* OutPosition, struct FRotator* OutRotation);
		void TransformFromBoneSpace(const class FName& BoneName, const struct FVector& InPosition, const struct FRotator& InRotation, struct FVector* OutPosition, struct FRotator* OutRotation);
		void SetSkeletalMesh(class USkeletalMesh* NewMesh);
		void SetPhysicsAsset(class UPhysicsAsset* NewPhysicsAsset, bool bForceReinit);
		void SetMasterPoseComponent(class USkinnedMeshComponent* NewMasterBoneComponent);
		bool IsBoneHiddenByName(const class FName& BoneName);
		void HideBoneByName(const class FName& BoneName, EPhysBodyOp PhysBodyOption);
		class FName GetSocketBoneName(const class FName& InSocketName);
		class FName GetParentBone(const class FName& BoneName);
		int32_t GetNumBones();
		class FName GetBoneName(int32_t BoneIndex);
		int32_t GetBoneIndex(const class FName& BoneName);
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.AnimInstance
	 * Size -> 0x0318 (FullSize[0x0340] - InheritedSize[0x0028])
	 */
	class UAnimInstance : public UObject
	{
	public:
		float                                                      DeltaTime;                                               // 0x0028(0x0004) ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_HAF4[0x4];                                   // 0x002C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class USkeleton*                                           CurrentSkeleton;                                         // 0x0030(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		TArray<struct FAnimTickRecord>                             UngroupedActivePlayers;                                  // 0x0038(0x0010) ZeroConstructor, Transient
		TArray<struct FAnimGroupInstance>                          SyncGroups;                                              // 0x0048(0x0010) ZeroConstructor, Transient
		TArray<struct FActiveVertexAnim>                           VertexAnims;                                             // 0x0058(0x0010) ZeroConstructor, Transient
		class FScriptMulticastDelegate                             OnMontageBlendingOut;                                    // 0x0068(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable
		class FScriptMulticastDelegate                             OnMontageEnded;                                          // 0x0078(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable
		unsigned char                                              UnknownData_OQE3[0x260];                                 // 0x0088(0x0260) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       bBoneCachesInvalidated;                                  // 0x02E8(0x0001) ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_8RWU[0x57];                                  // 0x02E9(0x0057) MISSED OFFSET (PADDING)

	public:
		void UnlockAIResources(bool bUnlockMovement, bool UnlockAILogic);
		class APawn* TryGetPawnOwner();
		void StopSlotAnimation(float InBlendOutTime);
		void SetMorphTarget(const class FName& MorphTargetName, float Value);
		float PlaySlotAnimation(class UAnimSequenceBase* Asset, const class FName& SlotNodeName, float BlendInTime, float BlendOutTime, float InPlayRate);
		void OnMontageEndedMCDelegate__DelegateSignature(class UAnimMontage* Montage, bool bInterrupted);
		void OnMontageBlendingOutStartedMCDelegate__DelegateSignature(class UAnimMontage* Montage, bool bInterrupted);
		void Montage_Stop(float InBlendOutTime, class UAnimMontage* Montage);
		void Montage_SetPosition(class UAnimMontage* Montage, float NewPosition);
		void Montage_SetPlayRate(class UAnimMontage* Montage, float NewPlayRate);
		void Montage_SetNextSection(const class FName& SectionNameToChange, const class FName& NextSection, class UAnimMontage* Montage);
		float Montage_Play_WithBlending(class UAnimMontage* MontageToPlay, float BlendInTime, float BlendOutTime, float InPlayRate, bool bPauseOnFinish);
		float Montage_Play(class UAnimMontage* MontageToPlay, float InPlayRate, bool bPauseOnFinish);
		void Montage_JumpToSectionsEnd(const class FName& SectionName, class UAnimMontage* Montage);
		void Montage_JumpToSection(const class FName& SectionName, class UAnimMontage* Montage);
		bool Montage_IsPlaying(class UAnimMontage* Montage, float TimeFromEndToConsiderFinished);
		bool Montage_IsActive(class UAnimMontage* Montage);
		float Montage_GetPosition(class UAnimMontage* Montage);
		float Montage_GetPlayRate(class UAnimMontage* Montage);
		bool Montage_GetIsStopped(class UAnimMontage* Montage);
		bool Montage_GetCurrentTime(class UAnimMontage* Montage, float* MontageTimeRemaining, float* TotalMontageDuration);
		class FName Montage_GetCurrentSection(class UAnimMontage* Montage);
		void LockAIResources(bool bLockMovement, bool LockAILogic);
		bool IsPlayingSlotAnimation(class UAnimSequenceBase* Asset, const class FName& SlotNodeName);
		float GetStateWeight(int32_t MachineIndex, int32_t StateIndex);
		class USkeletalMeshComponent* GetOwningComponent();
		class AActor* GetOwningActor();
		float GetCurveValue(const class FName& CurveName);
		float GetCurrentStateElapsedTime(int32_t MachineIndex);
		class UAnimMontage* GetCurrentActiveMontage();
		float STATIC_GetAnimAssetPlayerTimeFromEndFraction(class UAnimationAsset* AnimAsset, float CurrentTime);
		float STATIC_GetAnimAssetPlayerTimeFromEnd(class UAnimationAsset* AnimAsset, float CurrentTime);
		float STATIC_GetAnimAssetPlayerTimeFraction(class UAnimationAsset* AnimAsset, float CurrentTime);
		float STATIC_GetAnimAssetPlayerLength(class UAnimationAsset* AnimAsset);
		void ClearMorphTargets();
		float CalculateDirection(const struct FVector& Velocity, const struct FRotator& BaseRotation);
		void BlueprintUpdateAnimation(float DeltaTimeX);
		void BlueprintTriggerAnimationEvent(const class FName& AnimationEventName, float* playedAnimLength);
		void BlueprintPlayAnimationEvent(class UAnimMontage* AnimationMontage, float PlayRate, float* playedAnimLength);
		void BlueprintInitializeAnimation();
		void AnimNotify_Sound(class UAnimNotify* Notify);
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.AnimNotify
	 * Size -> 0x0010 (FullSize[0x0038] - InheritedSize[0x0028])
	 */
	class UAnimNotify : public UObject
	{
	public:
		bool                                                       bIgnoreOnDediServer;                                     // 0x0028(0x0001) Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_4SR9[0xF];                                   // 0x0029(0x000F) MISSED OFFSET (PADDING)

	public:
		bool Received_Notify(class USkeletalMeshComponent* MeshComp, class UAnimSequenceBase* Animation);
		class FString GetNotifyName();
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.AnimNotifyState
	 * Size -> 0x0008 (FullSize[0x0030] - InheritedSize[0x0028])
	 */
	class UAnimNotifyState : public UObject
	{
	public:
		bool                                                       bIgnoreOnDediServer;                                     // 0x0028(0x0001) Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_NVJL[0x7];                                   // 0x0029(0x0007) MISSED OFFSET (PADDING)

	public:
		bool Received_NotifyTick(class USkeletalMeshComponent* MeshComp, class UAnimSequenceBase* Animation, float FrameDeltaTime);
		bool Received_NotifyEnd(class USkeletalMeshComponent* MeshComp, class UAnimSequenceBase* Animation);
		bool Received_NotifyBegin(class USkeletalMeshComponent* MeshComp, class UAnimSequenceBase* Animation, float TotalDuration);
		class FString GetNotifyName();
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.CurveBase
	 * Size -> 0x0018 (FullSize[0x0040] - InheritedSize[0x0028])
	 */
	class UCurveBase : public UObject
	{
	public:
		unsigned char                                              UnknownData_0GJS[0x8];                                   // 0x0028(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FString                                              ImportPath;                                              // 0x0030(0x0010) ZeroConstructor

	public:
		void GetValueRange(float* MinValue, float* MaxValue);
		void GetTimeRange(float* MinTime, float* MaxTime);
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.CurveFloat
	 * Size -> 0x0080 (FullSize[0x00C0] - InheritedSize[0x0040])
	 */
	class UCurveFloat : public UCurveBase
	{
	public:
		struct FInterpCurveFloat                                   FloatKeys;                                               // 0x0040(0x0010) ZeroConstructor, Deprecated
		struct FRichCurve                                          FloatCurve;                                              // 0x0050(0x0068)
		bool                                                       bIsEventCurve;                                           // 0x00B8(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_RY53[0x7];                                   // 0x00B9(0x0007) MISSED OFFSET (PADDING)

	public:
		float GetFloatValue(float InTime);
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.ForceFeedbackEffect
	 * Size -> 0x0018 (FullSize[0x0040] - InheritedSize[0x0028])
	 */
	class UForceFeedbackEffect : public UObject
	{
	public:
		TArray<struct FForceFeedbackChannelDetails>                ChannelDetails;                                          // 0x0028(0x0010) Edit, ZeroConstructor
		float                                                      Duration;                                                // 0x0038(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, AssetRegistrySearchable
		unsigned char                                              UnknownData_Z20K[0x4];                                   // 0x003C(0x0004) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.Scene
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class UScene : public UObject
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.PlayerCameraManager
	 * Size -> 0x13B8 (FullSize[0x1820] - InheritedSize[0x0468])
	 */
	class APlayerCameraManager : public AActor
	{
	public:
		class APlayerController*                                   PCOwner;                                                 // 0x0468(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor
		class USceneComponent*                                     TransformComponent;                                      // 0x0470(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, SubobjectReference, IsPlainOldData, NoDestructor
		class FName                                                CameraStyle;                                             // 0x0478(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      DefaultFOV;                                              // 0x0480(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      LockedFOV;                                               // 0x0484(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      DefaultOrthoWidth;                                       // 0x0488(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      LockedOrthoWidth;                                        // 0x048C(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor
		bool                                                       bIsOrthographic;                                         // 0x0490(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_2FP3[0x3];                                   // 0x0491(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      DefaultAspectRatio;                                      // 0x0494(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		struct FColor                                              FadeColor;                                               // 0x0498(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      FadeAmount;                                              // 0x049C(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor
		struct FVector                                             ColorScale;                                              // 0x04A0(0x000C) ZeroConstructor, IsPlainOldData, NoDestructor
		struct FVector                                             DesiredColorScale;                                       // 0x04AC(0x000C) ZeroConstructor, IsPlainOldData, NoDestructor
		struct FVector                                             OriginalColorScale;                                      // 0x04B8(0x000C) ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      ColorScaleInterpDuration;                                // 0x04C4(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      ColorScaleInterpStartTime;                               // 0x04C8(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_VESO[0x4];                                   // 0x04CC(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FCameraCacheEntry                                   CameraCache;                                             // 0x04D0(0x03A0)
		struct FCameraCacheEntry                                   LastFrameCameraCache;                                    // 0x0870(0x03A0)
		struct FTViewTarget                                        ViewTarget;                                              // 0x0C10(0x03A8)
		struct FTViewTarget                                        PendingViewTarget;                                       // 0x0FB8(0x03A8)
		float                                                      BlendTimeToGo;                                           // 0x1360(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor
		struct FViewTargetTransitionParams                         BlendParams;                                             // 0x1364(0x0010)
		unsigned char                                              UnknownData_XHUY[0x4];                                   // 0x1374(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class UCameraModifier*>                             ModifierList;                                            // 0x1378(0x0010) ZeroConstructor
		float                                                      FreeCamDistance;                                         // 0x1388(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		struct FVector                                             FreeCamOffset;                                           // 0x138C(0x000C) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		struct FVector                                             TPVCameraOffset;                                         // 0x1398(0x000C) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      TPVCameraCollisionHeightScaler;                          // 0x13A4(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		struct FVector2D                                           FadeAlpha;                                               // 0x13A8(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      FadeTime;                                                // 0x13B0(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      FadeTimeRemaining;                                       // 0x13B4(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor
		TArray<class AEmitterCameraLensEffectBase*>                CameraLensEffects;                                       // 0x13B8(0x0010) ZeroConstructor, Transient, Protected
		class UCameraModifier_CameraShake*                         CameraShakeCamMod;                                       // 0x13C8(0x0008) Edit, BlueprintVisible, ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor
		class UClass*                                              CameraShakeCamModClass;                                  // 0x13D0(0x0008) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected
		bool                                                       bAlwaysApplyModifiers;                                   // 0x13D8(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, Protected
		unsigned char                                              UnknownData_O5NR[0x7];                                   // 0x13D9(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UCameraAnimInst*                                     AnimInstPool[0x8];                                       // 0x13E0(0x0040) ZeroConstructor, IsPlainOldData, NoDestructor, Protected
		unsigned char                                              UnknownData_Z09O[0x20];                                  // 0x1420(0x0020) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class UCameraAnimInst*>                             ActiveAnims;                                             // 0x1440(0x0010) ZeroConstructor
		TArray<class UCameraAnimInst*>                             FreeAnims;                                               // 0x1450(0x0010) ZeroConstructor, Protected
		class ACameraActor*                                        AnimCameraActor;                                         // 0x1460(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected
		unsigned char                                              bLockedFOV : 1;                                          // 0x1468(0x0001) BIT_FIELD NoDestructor, Protected
		unsigned char                                              bLockedOrthoWidth : 1;                                   // 0x1468(0x0001) BIT_FIELD NoDestructor, Protected
		unsigned char                                              bEnableFading : 1;                                       // 0x1468(0x0001) BIT_FIELD NoDestructor
		unsigned char                                              bFadeAudio : 1;                                          // 0x1468(0x0001) BIT_FIELD NoDestructor
		unsigned char                                              bEnableColorScaling : 1;                                 // 0x1468(0x0001) BIT_FIELD NoDestructor
		unsigned char                                              bEnableColorScaleInterp : 1;                             // 0x1468(0x0001) BIT_FIELD NoDestructor
		unsigned char                                              bClientSimulatingViewTarget : 1;                         // 0x1468(0x0001) BIT_FIELD NoDestructor
		unsigned char                                              bUseClientSideCameraUpdates : 1;                         // 0x1468(0x0001) BIT_FIELD Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor
		unsigned char                                              bDebugClientSideCamera : 1;                              // 0x1469(0x0001) BIT_FIELD NoDestructor
		unsigned char                                              bShouldSendClientSideCameraUpdate : 1;                   // 0x1469(0x0001) BIT_FIELD Transient, NoDestructor
		unsigned char                                              bGameCameraCutThisFrame : 1;                             // 0x1469(0x0001) BIT_FIELD Transient, NoDestructor
		unsigned char                                              bFollowHmdOrientation : 1;                               // 0x1469(0x0001) BIT_FIELD Edit, BlueprintVisible, NoDestructor
		unsigned char                                              UnknownData_VK6X[0x2];                                   // 0x146A(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      ViewPitchMin;                                            // 0x146C(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      ViewPitchMax;                                            // 0x1470(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      ViewYawMin;                                              // 0x1474(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      ViewYawMax;                                              // 0x1478(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      ViewRollMin;                                             // 0x147C(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      ViewRollMax;                                             // 0x1480(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_DHCE[0x4];                                   // 0x1484(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FMinimalViewInfo                                    LastPreModifierCameraCache;                              // 0x1488(0x0398) Transient

	public:
		void StopCameraAnimInst(class UCameraAnimInst* AnimInst, bool bImmediate);
		void StopAllInstancesOfCameraAnim(class UCameraAnim* Anim, bool bImmediate);
		void StopAllCameraAnims(bool bImmediate);
		void RemoveCameraLensEffect(class AEmitterCameraLensEffectBase* Emitter);
		class UCameraAnimInst* PlayCameraAnim(class UCameraAnim* Anim, float Rate, float Scale, float BlendInTime, float BlendOutTime, bool bLoop, bool bRandomStartTime, float Duration, ECameraAnimPlaySpace PlaySpace, const struct FRotator& UserPlaySpaceRot);
		float GetWorldCameraShakeScale(bool bForceReturnUserSettingScale);
		class APlayerController* GetOwningPlayerController();
		struct FRotator GetCameraRotation();
		struct FVector GetCameraLocation();
		void ClearCameraLensEffects();
		bool BlueprintUpdateCamera(class AActor* CameraTarget, struct FVector* NewCameraLocation, struct FRotator* NewCameraRotation, float* NewCameraFOV);
		class AEmitterCameraLensEffectBase* AddCameraLensEffect(class UClass* LensEffectEmitterClass);
		static UClass* StaticClass();
	};



	class AShooterCharacter
	{
	public:
		PAD(0x14b0);
		FString AShooterCharacterPlayerName; //0x14b0
		PAD(0x1578);
		FString                                                PlatformProfileName;                                       // 0x1578(0x0010)
		PAD(0x188);
		//AShooterWeapon* CurrentWeapon;                                             // 0x1708(0x0008)

		static UClass* StaticClass()
		{
			static auto ptr = UObject::FindClass("Class ShooterGame.ShooterCharacter");
			return ptr;
		}

		std::string GetName()
		{
			return this->AShooterCharacterPlayerName.c_str();
		}
	};


		class APawn : public AActor
		{
		public:
			unsigned char                                              UnknownData_GVI2[0x8];                                   // 0x0468(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
			unsigned char                                              bUseControllerRotationPitch : 1;                         // 0x0470(0x0001) BIT_FIELD Edit, BlueprintVisible, NoDestructor
			unsigned char                                              bUseControllerRotationYaw : 1;                           // 0x0470(0x0001) BIT_FIELD Edit, BlueprintVisible, NoDestructor
			unsigned char                                              bUseControllerRotationRoll : 1;                          // 0x0470(0x0001) BIT_FIELD Edit, BlueprintVisible, NoDestructor
			unsigned char                                              bCanAffectNavigationGeneration : 1;                      // 0x0470(0x0001) BIT_FIELD Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor
			unsigned char                                              bPreventMovementStoppingOnPossess : 1;                   // 0x0470(0x0001) BIT_FIELD Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor
			unsigned char                                              UnknownData_E97U[0x3];                                   // 0x0471(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
			float                                                      BaseEyeHeight;                                           // 0x0474(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
			EAutoReceiveInput                                          AutoPossess;                                             // 0x0478(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
			unsigned char                                              UnknownData_M4S1[0x7];                                   // 0x0479(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
			class UClass* AIControllerClass;                                       // 0x0480(0x0008) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
			class APlayerState* PlayerState;                                             // 0x0488(0x0008) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor
			unsigned char                                              RemoteViewPitch;                                         // 0x0490(0x0001) Net, ZeroConstructor, IsPlainOldData, NoDestructor
			unsigned char                                              UnknownData_XN9V[0x7];                                   // 0x0491(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
			class AController* LastHitBy;                                               // 0x0498(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor
			class AController* Controller;                                              // 0x04A0(0x0008) Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor
			unsigned char                                              UnknownData_JN8O[0x8];                                   // 0x04A8(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
			bool                                                       bClearOnConsume;                                         // 0x04B0(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
			unsigned char                                              UnknownData_XLPX[0x3];                                   // 0x04B1(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
			TWeakObjectPtr<class AActor>                               TetherActor;                                             // 0x04B4(0x0008) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor
			float                                                      TetherRadius;                                            // 0x04BC(0x0004) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor
			float                                                      TetherHeight;                                            // 0x04C0(0x0004) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor
			unsigned char                                              UnknownData_G65N[0x4];                                   // 0x04C4(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
			class FScriptMulticastDelegate                             OnMovementTetherSet;                                     // 0x04C8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable
			struct FVector                                             ControlInputVector;                                      // 0x04D8(0x000C) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected
			struct FVector                                             LastControlInputVector;                                  // 0x04E4(0x000C) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected
			TWeakObjectPtr<class AController>                          SpawnedForController;                                    // 0x04F0(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor

		public:
			void SpawnDefaultController();
			void SetMovementTether(class AActor* InTetherActor, float Radius, float Height);
			void SetCanAffectNavigationGeneration(bool bNewValue);
			void ReceiveUnpossessed(class AController* OldController);
			void ReceivePossessed(class AController* NewController);
			void PawnMakeNoise(float Loudness, const struct FVector& NoiseLocation, bool bUseNoiseMakerLocation, class AActor* NoiseMaker);
			void OnRep_PlayerState();
			void OnRep_Controller();
			void MovementTetherEvent__DelegateSignature(class APawn* Pawn, class AActor* TetherObject);
			void LaunchPawn(const struct FVector& LaunchVelocity, bool bXYOverride, bool bZOverride);
			struct FVector K2_GetMovementInputVector();
			bool IsWithinTether();
			bool IsWalking();
			bool IsTargetWithinTether(const struct FVector& Destination, float AdditionalRadius);
			bool IsMovementTethered();
			bool IsMoveInputIgnored();
			bool IsLocallyControlled();
			bool IsFalling();
			bool IsCrouched();
			bool IsControlled();
			void InterceptInputEvent(const class FString& InputName);
			class AActor* GetTetherObject();
			struct FVector GetTetheredVelocity(const struct FVector& RequestedVelocity, float DeltaSeconds);
			struct FVector GetTetheredDestination(const struct FVector& Destination, float AdditionalRadius);
			struct FVector GetPendingMovementInputVector();
			struct FVector GetNavAgentLocation();
			class UPawnMovementComponent* GetMovementComponent();
			class AActor* STATIC_GetMovementBaseActor(class APawn* Pawn);
			struct FVector GetLastMovementInputVector();
			struct FRotator GetControlRotation();
			class AController* GetController();
			struct FRotator GetBaseAimRotation();
			void DetachFromControllerPendingDestroy();
			struct FVector ConsumeMovementInputVector();
			void ClearMovementTether();
			void AddMovementInput(const struct FVector& WorldDirection, float ScaleValue, bool bForce);
			void AddControllerYawInput(float val);
			void AddControllerRollInput(float val);
			void AddControllerPitchInput(float val);
			static UClass* StaticClass();
		};



		class ACharacter : public APawn
		{
		public:
			class USkeletalMeshComponent* Mesh;                                                    // 0x04F8(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, SubobjectReference, IsPlainOldData, NoDestructor
			class UCharacterMovementComponent* CharacterMovement;                                       // 0x0500(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, SubobjectReference, IsPlainOldData, NoDestructor
			class UCapsuleComponent* CapsuleComponent;                                        // 0x0508(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, SubobjectReference, IsPlainOldData, NoDestructor
			struct FBasedMovementInfo                                  BasedMovement;                                           // 0x0510(0x0030) ContainsInstancedReference, Protected
			struct FBasedMovementInfo                                  ReplicatedBasedMovement;                                 // 0x0540(0x0030) Net, RepNotify, ContainsInstancedReference, Protected
			struct FVector                                             BaseTranslationOffset;                                   // 0x0570(0x000C) ZeroConstructor, IsPlainOldData, NoDestructor, Protected
			unsigned char                                              ReplicatedMovementMode;                                  // 0x057C(0x0001) Net, ZeroConstructor, IsPlainOldData, NoDestructor, Protected
			unsigned char                                              UnknownData_M7J0[0x7];                                   // 0x057D(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
			float                                                      CrouchedEyeHeight;                                       // 0x0584(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
			float                                                      ProneEyeHeight;                                          // 0x0588(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
			unsigned char                                              bIsCrouched : 1;                                         // 0x058C(0x0001) BIT_FIELD BlueprintVisible, BlueprintReadOnly, Net, SaveGame, RepNotify, NoDestructor
			unsigned char                                              bIsProne : 1;                                            // 0x058C(0x0001) BIT_FIELD BlueprintVisible, BlueprintReadOnly, Net, SaveGame, RepNotify, NoDestructor
			unsigned char                                              bCanEverProne : 1;                                       // 0x058C(0x0001) BIT_FIELD Edit, BlueprintVisible, NoDestructor
			unsigned char                                              bCanEverCrouch : 1;                                      // 0x058C(0x0001) BIT_FIELD Edit, BlueprintVisible, NoDestructor
			unsigned char                                              bReplicateDesiredRotation : 1;                           // 0x058C(0x0001) BIT_FIELD Edit, BlueprintVisible, NoDestructor
			unsigned char                                              bUseBPOverrideCharacterSound : 1;                        // 0x058C(0x0001) BIT_FIELD Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor
			unsigned char                                              bUseBPOverrideCharacterParticle : 1;                     // 0x058C(0x0001) BIT_FIELD Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor
			unsigned char                                              bPressedJump : 1;                                        // 0x058C(0x0001) BIT_FIELD BlueprintVisible, BlueprintReadOnly, NoDestructor
			unsigned char                                              bClientUpdating : 1;                                     // 0x058D(0x0001) BIT_FIELD BlueprintVisible, BlueprintReadOnly, Transient, NoDestructor
			unsigned char                                              bIsPlayingTurningAnim : 1;                               // 0x058D(0x0001) BIT_FIELD BlueprintVisible, Transient, NoDestructor
			unsigned char                                              bClientWasFalling : 1;                                   // 0x058D(0x0001) BIT_FIELD Transient, NoDestructor
			unsigned char                                              bClientResimulateRootMotion : 1;                         // 0x058D(0x0001) BIT_FIELD Transient, NoDestructor
			unsigned char                                              bSimGravityDisabled : 1;                                 // 0x058D(0x0001) BIT_FIELD NoDestructor
			unsigned char                                              bIsBigPusher : 1;                                        // 0x058D(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
			unsigned char                                              bCanBePushed : 1;                                        // 0x058D(0x0001) BIT_FIELD Edit, BlueprintVisible, NoDestructor
			unsigned char                                              bCanPushOthers : 1;                                      // 0x058D(0x0001) BIT_FIELD Edit, BlueprintVisible, NoDestructor
			unsigned char                                              UnknownData_GQFP : 1;                                    // 0x058E(0x0001) BIT_FIELD (PADDING)
			unsigned char                                              bOverrideWalkingVelocity : 1;                            // 0x058E(0x0001) BIT_FIELD BlueprintVisible, Transient, NoDestructor
			unsigned char                                              bOverrideSwimmingVelocity : 1;                           // 0x058E(0x0001) BIT_FIELD BlueprintVisible, Transient, NoDestructor
			unsigned char                                              bOverrideSwimmingAcceleration : 1;                       // 0x058E(0x0001) BIT_FIELD BlueprintVisible, Transient, NoDestructor
			unsigned char                                              bOverrideNewFallVelocity : 1;                            // 0x058E(0x0001) BIT_FIELD BlueprintVisible, Transient, NoDestructor
			unsigned char                                              bOverrideFlyingVelocity : 1;                             // 0x058E(0x0001) BIT_FIELD BlueprintVisible, Transient, NoDestructor
			unsigned char                                              bPreventWaterHopCorrectionVelChange : 1;                 // 0x058E(0x0001) BIT_FIELD Edit, BlueprintVisible, NoDestructor
			unsigned char                                              bUsesRootMotion : 1;                                     // 0x058E(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
			unsigned char                                              bBasedUsesFastPathSMCTick : 1;                           // 0x058F(0x0001) BIT_FIELD Transient, NoDestructor
			unsigned char                                              bBasedUsesFastPathMoveTick : 1;                          // 0x058F(0x0001) BIT_FIELD Transient, NoDestructor
			unsigned char                                              bForceUnfreezeIkNextFrame : 1;                           // 0x058F(0x0001) BIT_FIELD Edit, BlueprintVisible, Transient, NoDestructor
			unsigned char                                              bForceReplicationWithoutController : 1;                  // 0x058F(0x0001) BIT_FIELD Edit, BlueprintVisible, NoDestructor
			unsigned char                                              bUse_ModifySavedMoveAcceleration_PreRep : 1;             // 0x058F(0x0001) BIT_FIELD Edit, BlueprintVisible, NoDestructor
			unsigned char                                              bUse_ModifySavedMoveAcceleration_PostRep : 1;            // 0x058F(0x0001) BIT_FIELD Edit, BlueprintVisible, NoDestructor
			unsigned char                                              bUseBPValidateStoredClientMovementInputs : 1;            // 0x058F(0x0001) BIT_FIELD Edit, BlueprintVisible, NoDestructor
			float                                                      HarvestingDestructionMeshRangeMultipler;                 // 0x0590(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
			unsigned char                                              UnknownData_79DO[0x4];                                   // 0x0594(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
			TArray<class USoundBase*>                                  CharacterOverrideSoundFrom;                              // 0x0598(0x0010) Edit, ZeroConstructor, DisableEditOnInstance
			TArray<class USoundBase*>                                  CharacterOverrideSoundTo;                                // 0x05A8(0x0010) Edit, ZeroConstructor, DisableEditOnInstance
			TArray<class UParticleSystem*>                             CharacterOverrideParticleFrom;                           // 0x05B8(0x0010) Edit, ZeroConstructor, DisableEditOnInstance
			TArray<class UParticleSystem*>                             CharacterOverrideParticleTo;                             // 0x05C8(0x0010) Edit, ZeroConstructor, DisableEditOnInstance
			bool                                                       bInBaseReplication;                                      // 0x05D8(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor
			unsigned char                                              UnknownData_TUYA[0x3];                                   // 0x05D9(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
			float                                                      JumpKeyHoldTime;                                         // 0x05DC(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst, IsPlainOldData, NoDestructor
			float                                                      JumpMaxHoldTime;                                         // 0x05E0(0x0004) Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor
			struct FRotator_NetQuantizeSmartPitch                      LastMovementDesiredRotation;                             // 0x05E4(0x000C) Net
			unsigned char                                              UnknownData_HNA1[0x10];                                  // 0x05F0(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
			class FScriptMulticastDelegate                             OnCharacterMovementUpdated;                              // 0x0600(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable
			struct FRootMotionMovementParams                           ClientRootMotionParams;                                  // 0x0610(0x0040) Transient
			TArray<struct FSimulatedRootMotionReplicatedMove>          RootMotionRepMoves;                                      // 0x0650(0x0010) ZeroConstructor, Transient, ContainsInstancedReference
			struct FRepRootMotionMontage                               RepRootMotion;                                           // 0x0660(0x0040) Net, RepNotify, ContainsInstancedReference
			float                                                      ExtraMaxAccelerationModifier;                            // 0x06A0(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
			float                                                      ExtraFrictionModifier;                                   // 0x06A4(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
			unsigned char                                              UnknownData_GM1I[0x8];                                   // 0x06A8(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
			double                                                     ForceUnfreezeSkeletalDynamicsUntilTime;                  // 0x06B0(0x0008) BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor
			unsigned char                                              UnknownData_57UR[0x8];                                   // 0x06B8(0x0008) MISSED OFFSET (PADDING)

		public:
			void UnProne(bool bClientSimulation);
			void UnCrouch(bool bClientSimulation);
			void StopJumping();
			void StopAnimMontage(class UAnimMontage* AnimMontage);
			bool ShouldForceDedicatedMovementTickEveryFrame();
			bool ReplicateMovementToSimulatedClients();
			void Prone(bool bClientSimulation);
			float PlayAnimMontage(class UAnimMontage* AnimMontage, float InPlayRate, const class FName& StartSectionName, bool bForceTickPoseAndServerUpdateMesh, bool bForceTickPoseOnServer, float BlendInTime, float BlendOutTime);
			float OverrideTerminalVelocity();
			void OnWalkingOffLedge();
			void OnRep_RootMotion();
			void OnRep_ReplicatedBasedMovement();
			void OnRep_IsProne();
			void OnRep_IsCrouched();
			void OnLaunched(const struct FVector& LaunchVelocity, bool bXYOverride, bool bZOverride);
			void OnLanded(const struct FHitResult& Hit);
			void OnJumped();
			void NetTeleportSucceeded(const struct FVector& ToLoc, const struct FRotator& ToRot);
			void MovementModeChangedSignature__DelegateSignature(class ACharacter* Character, EMovementMode PrevMovementMode, unsigned char PreviousCustomMode);
			void LaunchCharacter(const struct FVector& LaunchVelocity, bool bXYOverride, bool bZOverride);
			void K2_UpdateCustomMovement(float DeltaTime);
			void K2_OnStartCrouch(float HalfHeightAdjust, float ScaledHalfHeightAdjust);
			void K2_OnMovementModeChanged(EMovementMode PrevMovementMode, EMovementMode NewMovementMode, unsigned char PrevCustomMode, unsigned char NewCustomMode);
			void K2_OnEndCrouch(float HalfHeightAdjust, float ScaledHalfHeightAdjust);
			void Jump();
			bool IsRagdolled();
			bool IsPlayingRootMotion();
			bool IsJumpProvidingForce();
			struct FRotator GetLastMovementDesiredRotation();
			class UAnimMontage* GetCurrentMontage();
			void Crouch(bool bClientSimulation);
			void ClientCheatWalk();
			void ClientCheatGhost();
			void ClientCheatFly();
			void CharacterMovementUpdatedSignature__DelegateSignature(float DeltaSeconds, const struct FVector& OldLocation, const struct FVector& OldVelocity);
			bool CanJumpInternal();
			bool CanJump();
			struct FRotator BPValidateStoredClientRotationInput(float TimeSinceLastMove, const struct FRotator& ClientRotation);
			class USoundBase* BPOverrideCharacterSound(class USoundBase* SoundIn);
			class UParticleSystem* BPOverrideCharacterParticle(class UParticleSystem* ParticleIn);
			struct FRotator BPModifyRootMotionDeltaRotation(const struct FRotator& Delta);
			bool BPAcknowledgeServerCorrection(float TimeStamp, const struct FVector& NewLoc, const struct FVector& NewVel, class UPrimitiveComponent* NewBase, const class FName& NewBaseBoneName, bool bHasBase, bool bBaseRelativePosition, unsigned char ServerMovementMode);
			bool BP_PreventMovementMode(EMovementMode NewMovementMode, unsigned char NewCustomMode);
			static UClass* StaticClass();
		};



		class APrimalCharacter : public ACharacter
		{
		public:
			unsigned char                                              UnknownData_M66Y[0x8];                                   // 0x06C0(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
			struct FVector                                             OldLocation;                                             // 0x06C8(0x000C) ZeroConstructor, Transient, IsPlainOldData, NoDestructor
			struct FRotator                                            OldRotation;                                             // 0x06D4(0x000C) ZeroConstructor, Transient, IsPlainOldData, NoDestructor
			float                                                      EffectorInterpSpeed;                                     // 0x06E0(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
			float                                                      HalfLegLength;                                           // 0x06E4(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
			float                                                      TwoLeggedVirtualPointDistFactor;                         // 0x06E8(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
			float                                                      FullIKDistance;                                          // 0x06EC(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
			float                                                      IKAfterFallingTime;                                      // 0x06F0(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
			float                                                      SimpleIkRate;                                            // 0x06F4(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
			struct FVector                                             GroundCheckExtent;                                       // 0x06F8(0x000C) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
			unsigned char                                              UnknownData_YZ12[0x4];                                   // 0x0704(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
			double                                                     LastForceAimedCharactersTime;                            // 0x0708(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor
			class UAnimMontage* JumpAnim;                                                // 0x0710(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
			class UAnimMontage* LandedAnim;                                              // 0x0718(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
			class UAnimMontage* HurtAnim;                                                // 0x0720(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
			class UAnimMontage* HurtAnim_Flying;                                         // 0x0728(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
			class UAnimMontage* PinnedAnim;                                              // 0x0730(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
			class UParticleSystem* HurtFX;                                                  // 0x0738(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
			class USoundCue* HurtSound;                                               // 0x0740(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
			class FName                                                RootBodyBoneName;                                        // 0x0748(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
			PAD(0x20);// struct FDecalData                                          HurtDecalData;                                           // 0x0750(0x0020) Edit, DisableEditOnInstance
			unsigned char                                              UnknownData_E1SK[0x18];                                  // 0x0770(0x0018) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
			unsigned char                                              bUseBlueprintJumpInputEvents : 1;                        // 0x0788(0x0001) BIT_FIELD Edit, BlueprintVisible, NoDestructor
			unsigned char                                              bUseBPOverrideAccessInventoryInput : 1;                  // 0x0788(0x0001) BIT_FIELD Edit, BlueprintVisible, NoDestructor
			unsigned char                                              bDisableCameraShakeOnNotifyHit : 1;                      // 0x0788(0x0001) BIT_FIELD Edit, BlueprintVisible, NoDestructor
			unsigned char                                              bHasBuffPreSerializeForInstigator : 1;                   // 0x0788(0x0001) BIT_FIELD Edit, BlueprintVisible, NoDestructor
			unsigned char                                              UnknownData_OZ7G[0x7];                                   // 0x0789(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
			class FString                                              TribeName;                                               // 0x0790(0x0010) Edit, BlueprintVisible, Net, ZeroConstructor, Transient, SaveGame
			float                                                      WaterSubmergedDepthThreshold;                            // 0x07A0(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
			float                                                      ProneWaterSubmergedDepthThreshold;                       // 0x07A4(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
			EMovementMode                                              SubmergedWaterMovementMode;                              // 0x07A8(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
			EMovementMode                                              UnSubmergedWaterMovementMode;                            // 0x07A9(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
			unsigned char                                              UnknownData_IIM0[0x6];                                   // 0x07AA(0x0006) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
			TArray<struct FDamageTypeAdjuster>                         DamageTypeAdjusters;                                     // 0x07B0(0x0010) Edit, ZeroConstructor, DisableEditOnInstance
			float                                                      SnapshotScale;                                           // 0x07C0(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
			unsigned char                                              UnknownData_K4V3[0x4];                                   // 0x07C4(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
			TArray<struct FPrimalSnapshotPose>                         SnapshotPoses;                                           // 0x07C8(0x0010) Edit, ZeroConstructor, DisableEditOnInstance
			class UClass* PoopItemClass;                                           // 0x07D8(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
			class UClass* TaxidermySkinClass;                                      // 0x07E0(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
			class FName                                                DragBoneName;                                            // 0x07E8(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
			class FName                                                DragSocketName;                                          // 0x07F0(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
			float                                                      MaxDragDistance;                                         // 0x07F8(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
			float                                                      MaxDragDistanceTimeout;                                  // 0x07FC(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
			TArray<class FName>                                        BonesToIngoreWhileDragged;                               // 0x0800(0x0010) Edit, ZeroConstructor
			float                                                      PreviewCameraMaxZoomMultiplier;                          // 0x0810(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
			float                                                      PreviewCameraDefaultZoomMultiplier;                      // 0x0814(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
			float                                                      PreviewCameraDistanceScaleFactor;                        // 0x0818(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
			unsigned char                                              UnknownData_44PV[0x4];                                   // 0x081C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
			class USoundBase* StartDraggedSound;                                       // 0x0820(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
			class USoundBase* EndDraggedSound;                                         // 0x0828(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
			class APrimalCharacter* DraggedCharacter;                                        // 0x0830(0x0008) Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor
			class APrimalCharacter* DraggingCharacter;                                       // 0x0838(0x0008) Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor
			unsigned char                                              UnknownData_Z63U[0x40];                                  // 0x0840(0x0040) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
			float                                                      StasisConsumerRangeMultiplier;                           // 0x0880(0x0004) BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor
			unsigned char                                              bIsSleeping : 1;                                         // 0x0884(0x0001) BIT_FIELD BlueprintVisible, BlueprintReadOnly, Net, Transient, SaveGame, RepNotify, NoDestructor, NativeAccessSpecifierPublic
			unsigned char                                              bWantsToRun : 1;                                         // 0x0884(0x0001) BIT_FIELD BlueprintVisible, Transient, NoDestructor
			unsigned char                                              bActiveRunToggle : 1;                                    // 0x0884(0x0001) BIT_FIELD Transient, NoDestructor
			unsigned char                                              bIsBeingDragged : 1;                                     // 0x0884(0x0001) BIT_FIELD Net, Transient, NoDestructor
			unsigned char                                              bDisableSpawnDefaultController : 1;                      // 0x0884(0x0001) BIT_FIELD BlueprintVisible, Transient, NoDestructor
			unsigned char                                              bIsDragging : 1;                                         // 0x0884(0x0001) BIT_FIELD Net, Transient, NoDestructor
			unsigned char                                              bIsDraggingWithGrapHook : 1;                             // 0x0884(0x0001) BIT_FIELD Net, Transient, NoDestructor
			unsigned char                                              bDeathKeepCapsuleCollision : 1;                          // 0x0884(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
			unsigned char                                              bRemoteRunning : 1;                                      // 0x0885(0x0001) BIT_FIELD Net, Transient, NoDestructor
			unsigned char                                              bCanRun : 1;                                             // 0x0885(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
			unsigned char                                              bUseHealthDamageMaterialOverlay : 1;                     // 0x0885(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
			unsigned char                                              bIsBlinking : 1;                                         // 0x0885(0x0001) BIT_FIELD BlueprintVisible, BlueprintReadOnly, Transient, NoDestructor
			unsigned char                                              bSleepedWaterRagdoll : 1;                                // 0x0885(0x0001) BIT_FIELD BlueprintVisible, NoDestructor
			unsigned char                                              bCanBeTorpid : 1;                                        // 0x0885(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
			unsigned char                                              bDebugIK : 1;                                            // 0x0885(0x0001) BIT_FIELD Edit, NoDestructor
			unsigned char                                              bDebugIK_ShowTraceNames : 1;                             // 0x0885(0x0001) BIT_FIELD Edit, NoDestructor
			unsigned char                                              bForceAlwaysUpdateMesh : 1;                              // 0x0886(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
			unsigned char                                              bRagdollIgnoresPawnCapsules : 1;                         // 0x0886(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
			unsigned char                                              bUsePoopAnimationNotify : 1;                             // 0x0886(0x0001) BIT_FIELD Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor
			unsigned char                                              bIsBigDino : 1;                                          // 0x0886(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
			unsigned char                                              bDeathUseRagdoll : 1;                                    // 0x0886(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
			unsigned char                                              bCanBeCarried : 1;                                       // 0x0886(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
			unsigned char                                              bUseBPCanNotifyTeamAggroAI : 1;                          // 0x0886(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
			unsigned char                                              bDamageNotifyTeamAggroAI : 1;                            // 0x0886(0x0001) BIT_FIELD Transient, NoDestructor
			unsigned char                                              bUseBP_OverrideCameraTargetOriginLocation : 1;           // 0x0887(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
			unsigned char                                              bUseBPGetOverrideCameraInterpSpeed : 1;                  // 0x0887(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
			unsigned char                                              bRecentlyUpdateIk : 1;                                   // 0x0887(0x0001) BIT_FIELD Transient, NoDestructor
			unsigned char                                              bIKEnabled : 1;                                          // 0x0887(0x0001) BIT_FIELD Transient, NoDestructor
			unsigned char                                              bIsCarried : 1;                                          // 0x0887(0x0001) BIT_FIELD BlueprintVisible, BlueprintReadOnly, Transient, NoDestructor
			unsigned char                                              bIsCarriedAsPassenger : 1;                               // 0x0887(0x0001) BIT_FIELD BlueprintVisible, BlueprintReadOnly, Transient, NoDestructor
			unsigned char                                              bUseBPPreventFallDamage : 1;                             // 0x0887(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
			unsigned char                                              bUseBPNotifyIsDamageCauserOfAddedBuff : 1;               // 0x0887(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
			unsigned char                                              bPreventProjectileAttachment : 1;                        // 0x0888(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
			unsigned char                                              UnknownData_SV6W[0x7];                                   // 0x0889(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
			class AActor* ImmobilizationActor;                                     // 0x0890(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor
			unsigned char                                              bForceIKOnDedicatedServer : 1;                           // 0x0898(0x0001) BIT_FIELD Edit, BlueprintVisible, NoDestructor
			unsigned char                                              bIgnoreAllImmobilizationTraps : 1;                       // 0x0898(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
			unsigned char                                              bForceTriggerIgnoredTraps : 1;                           // 0x0898(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
			unsigned char                                              bIsImmobilized : 1;                                      // 0x0898(0x0001) BIT_FIELD BlueprintVisible, BlueprintReadOnly, Net, NoDestructor
			unsigned char                                              bCanIgnoreWater : 1;                                     // 0x0898(0x0001) BIT_FIELD BlueprintVisible, Net, Transient, NoDestructor
			unsigned char                                              bIsDead : 1;                                             // 0x0898(0x0001) BIT_FIELD Edit, BlueprintVisible, BlueprintReadOnly, Net, EditConst, SaveGame, RepNotify, NoDestructor
			unsigned char                                              ReplicateAllBones : 1;                                   // 0x0898(0x0001) BIT_FIELD Edit, NoDestructor
			unsigned char                                              AutoStopReplicationWhenSleeping : 1;                     // 0x0898(0x0001) BIT_FIELD Edit, NoDestructor
			unsigned char                                              bCanDrag : 1;                                            // 0x0899(0x0001) BIT_FIELD Edit, NoDestructor
			unsigned char                                              bCanBeDragged : 1;                                       // 0x0899(0x0001) BIT_FIELD Edit, NoDestructor
			unsigned char                                              bUsesRunningAnimation : 1;                               // 0x0899(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
			unsigned char                                              bForceNetDidLand : 1;                                    // 0x0899(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
			unsigned char                                              bPreventSimpleIK : 1;                                    // 0x0899(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
			unsigned char                                              bOnlyAllowRunningWhileFlying : 1;                        // 0x0899(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
			unsigned char                                              bOrbitCamera : 1;                                        // 0x0899(0x0001) BIT_FIELD BlueprintVisible, BlueprintReadOnly, NoDestructor
			unsigned char                                              UnknownData_W6F1 : 1;                                    // 0x0899(0x0001) BIT_FIELD (PADDING)
			unsigned char                                              UnknownData_JDSD : 7;                                    // 0x089A(0x0001) BIT_FIELD (PADDING)
			unsigned char                                              bDraggedFromExtremitiesOnly : 1;                         // 0x089A(0x0001) BIT_FIELD Edit, NoDestructor
			unsigned char                                              bEnableIK : 1;                                           // 0x089B(0x0001) BIT_FIELD Edit, BlueprintVisible, NoDestructor
			unsigned char                                              bOnlyPlayPoopAnimWhileWalking : 1;                       // 0x089B(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
			unsigned char                                              bUseBlueprintAnimNotifyCustomEvent : 1;                  // 0x089B(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
			unsigned char                                              bNoDamageImpulse : 1;                                    // 0x089B(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
			unsigned char                                              bPreventImmobilization : 1;                              // 0x089B(0x0001) BIT_FIELD Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor
			unsigned char                                              UnknownData_P1C3[0x4];                                   // 0x089C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
			unsigned char                                              UnknownData_2DM5 : 1;                                    // 0x08A0(0x0001) BIT_FIELD (PADDING)
			unsigned char                                              bSleepingUseRagdoll : 1;                                 // 0x08A0(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
			unsigned char                                              bDediForceUnregisterSKMesh : 1;                          // 0x08A0(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
			unsigned char                                              bReadyToPoop : 1;                                        // 0x08A0(0x0001) BIT_FIELD Net, Transient, NoDestructor
			unsigned char                                              bHasDynamicBase : 1;                                     // 0x08A0(0x0001) BIT_FIELD Net, Transient, NoDestructor
			unsigned char                                              UnknownData_2VUR : 3;                                    // 0x08A0(0x0001) BIT_FIELD (PADDING)
			unsigned char                                              UnknownData_BLDE : 1;                                    // 0x08A1(0x0001) BIT_FIELD (PADDING)
			unsigned char                                              bDieIfLeftWater : 1;                                     // 0x08A1(0x0001) BIT_FIELD Edit, BlueprintVisible, NoDestructor
			unsigned char                                              bIsAmphibious : 1;                                       // 0x08A1(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
			unsigned char                                              bUseAmphibiousTargeting : 1;                             // 0x08A1(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
			unsigned char                                              bIsWaterDino : 1;                                        // 0x08A1(0x0001) BIT_FIELD Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor
			unsigned char                                              bIsFlyerDino : 1;                                        // 0x08A1(0x0001) BIT_FIELD Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor
			unsigned char                                              bIgnoreTargetingCarnivores : 1;                          // 0x08A1(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
			unsigned char                                              UnknownData_O3VY : 1;                                    // 0x08A1(0x0001) BIT_FIELD (PADDING)
			unsigned char                                              UnknownData_D9P4 : 1;                                    // 0x08A2(0x0001) BIT_FIELD (PADDING)
			unsigned char                                              bIsPlayingLowHealthAnim : 1;                             // 0x08A2(0x0001) BIT_FIELD BlueprintVisible, NoDestructor
			unsigned char                                              bAllowCharacterPainting : 1;                             // 0x08A2(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
			unsigned char                                              bTickStatusComponent : 1;                                // 0x08A2(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
			unsigned char                                              UnknownData_173Q : 1;                                    // 0x08A2(0x0001) BIT_FIELD (PADDING)
			unsigned char                                              bDontActuallyEmitPoop : 1;                               // 0x08A2(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
			unsigned char                                              bBPHUDOverideBuffProgressBar : 1;                        // 0x08A2(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
			unsigned char                                              bAllowRunningWhileSwimming : 1;                          // 0x08A2(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
			unsigned char                                              bUseBPNotifyBumpedByPawn : 1;                            // 0x08A3(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
			unsigned char                                              bUseBPNotifyBumpedPawn : 1;                              // 0x08A3(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
			unsigned char                                              bUseBPAdjustDamage : 1;                                  // 0x08A3(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
			unsigned char                                              UnknownData_HSL3 : 5;                                    // 0x08A3(0x0001) BIT_FIELD (PADDING)
			unsigned char                                              bUseBPTimerServer : 1;                                   // 0x08A4(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
			unsigned char                                              bUseBPTimerNonDedicated : 1;                             // 0x08A4(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
			unsigned char                                              bTriggerBPStasis : 1;                                    // 0x08A4(0x0001) BIT_FIELD Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor
			unsigned char                                              bUseBPSetCharacterMeshseMaterialScalarParamValue : 1;    // 0x08A4(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
			unsigned char                                              UnknownData_Y5H5[0x3];                                   // 0x08A5(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
			float                                                      BPTimerServerMin;                                        // 0x08A8(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
			float                                                      BPTimerServerMax;                                        // 0x08AC(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
			float                                                      BPTimerNonDedicatedMin;                                  // 0x08B0(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
			float                                                      BPTimerNonDedicatedMax;                                  // 0x08B4(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
			double                                                     NextBPTimerServer;                                       // 0x08B8(0x0008) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
			double                                                     NextBPTimerNonDedicated;                                 // 0x08C0(0x0008) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
			unsigned char                                              bIsMounted : 1;                                          // 0x08C8(0x0001) BIT_FIELD BlueprintVisible, BlueprintReadOnly, Transient, NoDestructor
			unsigned char                                              bPreventTargetingByTurrets : 1;                          // 0x08C8(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
			unsigned char                                              bDelayFootstepsUnderMinInterval : 1;                     // 0x08C8(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
			unsigned char                                              bSleepingDisableIK : 1;                                  // 0x08C8(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
			unsigned char                                              bRagdollRetainAnimations : 1;                            // 0x08C8(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
			unsigned char                                              bUseBPAddedAttachments : 1;                              // 0x08C8(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
			unsigned char                                              bCanPlayLandingAnim : 1;                                 // 0x08C8(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
			unsigned char                                              bOnlyHasRunningAnimationWhenWalking : 1;                 // 0x08C8(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
			unsigned char                                              UnknownData_COJ3 : 1;                                    // 0x08C9(0x0001) BIT_FIELD (PADDING)
			unsigned char                                              bPreventTargetingAndMovement : 1;                        // 0x08C9(0x0001) BIT_FIELD Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor
			unsigned char                                              bPreventMovement : 1;                                    // 0x08C9(0x0001) BIT_FIELD Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor
			unsigned char                                              UnknownData_2S3Z : 1;                                    // 0x08C9(0x0001) BIT_FIELD (PADDING)
			unsigned char                                              bBPPreventInputType : 1;                                 // 0x08C9(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
			unsigned char                                              bForcePreventAllInput : 1;                               // 0x08C9(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
			unsigned char                                              bPreventAllBuffs : 1;                                    // 0x08C9(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
			unsigned char                                              LastIsInsideVaccumSealedCube : 1;                        // 0x08C9(0x0001) BIT_FIELD BlueprintVisible, BlueprintReadOnly, NoDestructor
			unsigned char                                              bPreventJump : 1;                                        // 0x08CA(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
			unsigned char                                              bUseBPPreventStasis : 1;                                 // 0x08CA(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
			unsigned char                                              bDestroyOnStasis : 1;                                    // 0x08CA(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
			unsigned char                                              bUseBPPreSerializeSaveGame : 1;                          // 0x08CA(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
			unsigned char                                              bUseBPPostLoadedFromSaveGame : 1;                        // 0x08CA(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
			unsigned char                                              bUseHeavyCombatMusic : 1;                                // 0x08CA(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
			unsigned char                                              UnknownData_NG80 : 1;                                    // 0x08CA(0x0001) BIT_FIELD (PADDING)
			unsigned char                                              bBPModifyAllowedViewHitDir : 1;                          // 0x08CA(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
			unsigned char                                              bBPLimitPlayerRotation : 1;                              // 0x08CB(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
			unsigned char                                              bBPManagedFPVViewLocation : 1;                           // 0x08CB(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
			unsigned char                                              bBPCameraRotationFinal : 1;                              // 0x08CB(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
			unsigned char                                              bServerBPNotifyInventoryItemChangesUseQuantity : 1;      // 0x08CB(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
			unsigned char                                              bServerBPNotifyInventoryItemChanges : 1;                 // 0x08CB(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
			unsigned char                                              UnknownData_377B[0x4];                                   // 0x08CC(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
			double                                                     LastCausedDamageTime;                                    // 0x08D0(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor
			unsigned char                                              bIsAtMaxInventoryItems : 1;                              // 0x08D8(0x0001) BIT_FIELD Net, Transient, NoDestructor
			unsigned char                                              bUseBPOnStaminaDrained : 1;                              // 0x08D8(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
			unsigned char                                              UnknownData_R59Y : 1;                                    // 0x08D8(0x0001) BIT_FIELD (PADDING)
			unsigned char                                              bUseBPGrabDebugSnapshot : 1;                             // 0x08D8(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
			unsigned char                                              bIsAttachedOtherCharacter : 1;                           // 0x08D8(0x0001) BIT_FIELD BlueprintVisible, BlueprintReadOnly, Transient, NoDestructor
			unsigned char                                              bUseBPOnLethalDamage : 1;                                // 0x08D8(0x0001) BIT_FIELD Edit, BlueprintVisible, NoDestructor
			unsigned char                                              bUseBPAdjustTorpidityDamage : 1;                         // 0x08D8(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
			unsigned char                                              bUseBPForceCameraStyle : 1;                              // 0x08D8(0x0001) BIT_FIELD Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor
			unsigned char                                              bUseBPRemovedAsPassenger : 1;                            // 0x08D9(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
			unsigned char                                              bDisableFPV : 1;                                         // 0x08D9(0x0001) BIT_FIELD Edit, BlueprintVisible, NoDestructor
			unsigned char                                              bConsumeZoomInput : 1;                                   // 0x08D9(0x0001) BIT_FIELD Edit, BlueprintVisible, NoDestructor
			unsigned char                                              UnknownData_98UZ[0x6];                                   // 0x08DA(0x0006) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
			TArray<class UClass*>                                      ImmobilizationTrapsToIgnore;                             // 0x08E0(0x0010) Edit, ZeroConstructor
			unsigned char                                              UnknownData_YZ4I[0x8];                                   // 0x08F0(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
			TWeakObjectPtr<class APrimalDinoCharacter>                 CarryingDino;                                            // 0x08F8(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor
			class FName                                                DediOverrideCapsuleCollisionProfileName;                 // 0x0900(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
			class FName                                                DediOverrideMeshCollisionProfileName;                    // 0x0908(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
			class FName                                                SnaredFromSocket;                                        // 0x0910(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
			class UClass* DeathDestructionDepositInventoryClass;                   // 0x0918(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
			float                                                      DamageNotifyTeamAggroMultiplier;                         // 0x0920(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
			float                                                      DamageNotifyTeamAggroRange;                              // 0x0924(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
			float                                                      DamageNotifyTeamAggroRangeFalloff;                       // 0x0928(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
			float                                                      ReplicatedCurrentHealth;                                 // 0x092C(0x0004) Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor
			float                                                      ReplicatedMaxHealth;                                     // 0x0930(0x0004) Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor
			float                                                      ReplicatedCurrentTorpor;                                 // 0x0934(0x0004) Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor
			float                                                      ReplicatedMaxTorpor;                                     // 0x0938(0x0004) Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor
			unsigned char                                              UnknownData_Y1YU[0x4];                                   // 0x093C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
			class APrimalProjectileGrapplingHook* LastGrapHookPullingMe;                                   // 0x0940(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor
			unsigned char                                              UnknownData_MPQF : 2;                                    // 0x0948(0x0001) BIT_FIELD (PADDING)
			unsigned char                                              bInRagdoll : 1;                                          // 0x0948(0x0001) BIT_FIELD Edit, EditConst, NoDestructor
			unsigned char                                              bIsNPC : 1;                                              // 0x0948(0x0001) BIT_FIELD Edit, EditConst, NoDestructor
			unsigned char                                              UnknownData_Q2UU : 4;                                    // 0x0948(0x0001) BIT_FIELD (PADDING)
			unsigned char                                              bIsDraggingWithOffset : 1;                               // 0x0949(0x0001) BIT_FIELD Transient, NoDestructor
			unsigned char                                              bIsDraggedWithOffset : 1;                                // 0x0949(0x0001) BIT_FIELD Transient, NoDestructor
			unsigned char                                              bPreventRunningWhileWalking : 1;                         // 0x0949(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
			unsigned char                                              bCanLandOnWater : 1;                                     // 0x0949(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
			unsigned char                                              bUseBPAdjustMoveForward : 1;                             // 0x0949(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
			unsigned char                                              bUseBPAdjustMoveRight : 1;                               // 0x0949(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
			unsigned char                                              bUseBPGetGravity : 1;                                    // 0x0949(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
			unsigned char                                              bAllowDamageWhenMounted : 1;                             // 0x0949(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
			unsigned char                                              bUseBPOnAttachmentReplication : 1;                       // 0x094A(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
			unsigned char                                              bUseBPOnMovementModeChangedNotify : 1;                   // 0x094A(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
			unsigned char                                              bUseBPOnAnimPlayedNotify : 1;                            // 0x094A(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
			unsigned char                                              bUseBPOverrideCharacterNewFallVelocity : 1;              // 0x094A(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
			unsigned char                                              bUseBP_OnSetRunningEvent : 1;                            // 0x094A(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
			unsigned char                                              bForceTurretFastTargeting : 1;                           // 0x094A(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
			unsigned char                                              bFlyingOrWaterDinoPreventBackwardsRun : 1;               // 0x094A(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
			unsigned char                                              bUseBPOverrideFlyingVelocity : 1;                        // 0x094A(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
			unsigned char                                              bSleepingDisableRagdoll : 1;                             // 0x094B(0x0001) BIT_FIELD Net, Transient, SaveGame, NoDestructor
			unsigned char                                              bDestroyOnStasisWhenDead : 1;                            // 0x094B(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
			unsigned char                                              bPreventLiveBlinking : 1;                                // 0x094B(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
			unsigned char                                              UnknownData_2WR5 : 1;                                    // 0x094B(0x0001) BIT_FIELD (PADDING)
			unsigned char                                              bForceAlwaysUpdateMeshAndCollision : 1;                  // 0x094B(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
			unsigned char                                              UnknownData_SUOG : 3;                                    // 0x094B(0x0001) BIT_FIELD (PADDING)
			unsigned char                                              bUseBPGetHUDElements : 1;                                // 0x094C(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
			unsigned char                                              bPreventHurtAnim : 1;                                    // 0x094C(0x0001) BIT_FIELD Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor
			unsigned char                                              UnknownData_8F2X[0x3];                                   // 0x094D(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
			class AShooterCharacter* LastGrapHookPullingOwner;                                // 0x0950(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor
			unsigned char                                              bUseBPCanBeBaseForCharacter : 1;                         // 0x0958(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
			unsigned char                                              bUseBPCanBaseOnCharacter : 1;                            // 0x0958(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
			unsigned char                                              bUseBPOnLanded : 1;                                      // 0x0958(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
			unsigned char                                              bEnableMoveCollapsing : 1;                               // 0x0958(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
			unsigned char                                              bUseBP_ForceAllowBuffClasses : 1;                        // 0x0958(0x0001) BIT_FIELD Edit, NoDestructor
			unsigned char                                              UnknownData_5JNN[0x3];                                   // 0x0959(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
			struct FVector                                             DragOffset;                                              // 0x095C(0x000C) BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor
			unsigned char                                              bUseBPCheckJumpInput : 1;                                // 0x0968(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
			unsigned char                                              bUseBPOverrideHurtAnim : 1;                              // 0x0968(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
			unsigned char                                              bUseBPOverrideDamageCauserHitMarker : 1;                 // 0x0968(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
			unsigned char                                              bIsSkinned : 1;                                          // 0x0968(0x0001) BIT_FIELD Transient, SaveGame, NoDestructor
			unsigned char                                              bUseBPAdjustImpulseFromDamage : 1;                       // 0x0968(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
			unsigned char                                              bUseBPAdjustCharacterMovementImpulse : 1;                // 0x0968(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
			unsigned char                                              bUseBPModifyFOVInterpSpeed : 1;                          // 0x0968(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
			unsigned char                                              bVerifyBasingForSaddleStructures : 1;                    // 0x0968(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
			unsigned char                                              bUseBP_OverrideTerminalVelocity : 1;                     // 0x0969(0x0001) BIT_FIELD Edit, NoDestructor
			unsigned char                                              bUseBP_ShouldForceDisableTPVCameraInterpolation : 1;     // 0x0969(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
			unsigned char                                              bUseBPAllowPlayMontage : 1;                              // 0x0969(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
			unsigned char                                              bPreventPerPixelPainting : 1;                            // 0x0969(0x0001) BIT_FIELD Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor
			unsigned char                                              bUseBPItemSlotOverrides : 1;                             // 0x0969(0x0001) BIT_FIELD Edit, NoDestructor
			unsigned char                                              UnknownData_06VL[0xE];                                   // 0x096A(0x000E) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
			double                                                     LastIkUpdateTime;                                        // 0x0978(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor
			unsigned char                                              UnknownData_JCDL[0x24];                                  // 0x0980(0x0024) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
			int32_t                                                    DraggedBoneIndex;                                        // 0x09A4(0x0004) ZeroConstructor, Transient, IsPlainOldData, NoDestructor
			int32_t                                                    customBitFlags;                                          // 0x09A8(0x0004) BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor
			float                                                      RunningSpeedModifier;                                    // 0x09AC(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
			unsigned char                                              UnknownData_7L92[0x10];                                  // 0x09B0(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
			class UAnimMontage* DeathAnim;                                               // 0x09C0(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
			class USoundCue* DeathSound;                                              // 0x09C8(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
			class USoundCue* RunLoopSound;                                            // 0x09D0(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
			class USoundCue* RunStopSound;                                            // 0x09D8(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
			TArray<class USoundCue*>                                   FootStepSoundsPhysMat;                                   // 0x09E0(0x0010) Edit, ZeroConstructor, DisableEditOnInstance
			TArray<class USoundCue*>                                   LandedSoundsPhysMat;                                     // 0x09F0(0x0010) Edit, ZeroConstructor, DisableEditOnInstance
			class FName                                                MeshRootSocketName;                                      // 0x0A00(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
			unsigned char                                              UnknownData_FM84[0x8];                                   // 0x0A08(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
			float                                                      MaxFallSpeed;                                            // 0x0A10(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
			float                                                      FallDamageMultiplier;                                    // 0x0A14(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
			class UAudioComponent* RunLoopAC;                                               // 0x0A18(0x0008) ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor
			struct FConstraintInstance                                 DraggingConstraint;                                      // 0x0A20(0x0160) ContainsInstancedReference
			unsigned char                                              UnknownData_JRCU[0x8];                                   // 0x0B80(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
			class APrimalStructureExplosiveTransGPS* CurrentTransponder;                                      // 0x0B88(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor
			unsigned char                                              UnknownData_A15N[0x4];                                   // 0x0B90(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
			float                                                      ServerTargetCarriedYaw;                                  // 0x0B94(0x0004) Net, ZeroConstructor, IsPlainOldData, NoDestructor
			class USoundBase* NetDynamicMusicSound;                                    // 0x0B98(0x0008) Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor
			TWeakObjectPtr<class APrimalDinoCharacter>                 MountedDino;                                             // 0x0BA0(0x0008) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor
			float                                                      MountedDinoTime;                                         // 0x0BA8(0x0004) ZeroConstructor, Transient, IsPlainOldData, NoDestructor
			unsigned char                                              UnknownData_AQPS[0x2C];                                  // 0x0BAC(0x002C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
			TWeakObjectPtr<class AActor>                               LastBasedMovementActorRef;                               // 0x0BD8(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor
			float                                                      GrabWeightThreshold;                                     // 0x0BE0(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
			float                                                      DragWeight;                                              // 0x0BE4(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
			class FString                                              DescriptiveName;                                         // 0x0BE8(0x0010) Edit, ZeroConstructor
			TArray<struct FVector_NetQuantize>                         ReplicatedRagdollPositions;                              // 0x0BF8(0x0010) Net, ZeroConstructor, Transient, RepNotify, Protected
			TArray<struct FRotator_NetQuantize>                        ReplicatedRagdollRotations;                              // 0x0C08(0x0010) Net, ZeroConstructor, Transient, Protected
			unsigned char                                              UnknownData_D2S8[0x50];                                  // 0x0C18(0x0050) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
			float                                                      KillXPBase;                                              // 0x0C68(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
			unsigned char                                              UnknownData_KUXC[0x14];                                  // 0x0C6C(0x0014) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
			float                                                      RagdollReplicationInterval;                              // 0x0C80(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
			unsigned char                                              UnknownData_WZZ7[0x4];                                   // 0x0C84(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
			TArray<struct FBoneDamageAdjuster>                         BoneDamageAdjusters;                                     // 0x0C88(0x0010) Edit, ZeroConstructor
			float                                                      ClientRotationInterpSpeed;                               // 0x0C98(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
			float                                                      ClientLocationInterpSpeed;                               // 0x0C9C(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
			float                                                      MaxDragMovementSpeed;                                    // 0x0CA0(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
			struct FRotator                                            CurrentAimRot;                                           // 0x0CA4(0x000C) ZeroConstructor, IsPlainOldData, NoDestructor
			struct FVector                                             CurrentRootLoc;                                          // 0x0CB0(0x000C) ZeroConstructor, IsPlainOldData, NoDestructor
			unsigned char                                              UnknownData_I0M9[0x14];                                  // 0x0CBC(0x0014) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
			class UPrimalCharacterStatusComponent* MyCharacterStatusComponent;                              // 0x0CD0(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, SaveGame, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
			unsigned char                                              UnknownData_SBCF[0x8];                                   // 0x0CD8(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
			class UPrimalInventoryComponent* MyInventoryComponent;                                    // 0x0CE0(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, SaveGame, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
			class UAnimMontage* SyncedMontage;                                           // 0x0CE8(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor
			unsigned char                                              UnknownData_0UCU[0xC];                                   // 0x0CF0(0x000C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
			float                                                      MontageSyncInterval;                                     // 0x0CFC(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
			double                                                     LastRunningTime;                                         // 0x0D00(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor
			struct FVector                                             TPVCameraOffset;                                         // 0x0D08(0x000C) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
			struct FVector                                             TPVCameraOffsetMultiplier;                               // 0x0D14(0x000C) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
			struct FVector                                             TPVCameraOrgOffset;                                      // 0x0D20(0x000C) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
			float                                                      LandedSoundMaxRange;                                     // 0x0D2C(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
			float                                                      FallingDamageHealthScaleBase;                            // 0x0D30(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
			float                                                      FootstepsMaxRange;                                       // 0x0D34(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
			float                                                      MinTimeBetweenFootsteps;                                 // 0x0D38(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
			unsigned char                                              UnknownData_B19U[0xC];                                   // 0x0D3C(0x000C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
			float                                                      MinTimeBetweenFootstepsRunning;                          // 0x0D48(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
			unsigned char                                              UnknownData_KCIU[0x4];                                   // 0x0D4C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
			TArray<class UAnimMontage*>                                AnimationsPreventInput;                                  // 0x0D50(0x0010) Edit, ZeroConstructor, DisableEditOnInstance
			class UClass* DeathHarvestingComponent;                                // 0x0D60(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
			class UPrimalHarvestingComponent* MyDeathHarvestingComponent;                              // 0x0D68(0x0008) ExportObject, ZeroConstructor, Transient, InstancedReference, SaveGame, IsPlainOldData, NoDestructor
			unsigned char                                              UnknownData_TEBR[0x18];                                  // 0x0D70(0x0018) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
			TWeakObjectPtr<class AController>                          LastDamageEventInstigator;                               // 0x0D88(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor
			unsigned char                                              UnknownData_8AME[0x20];                                  // 0x0D90(0x0020) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
			EMeshComponentUpdateFlag                                   PreDragComponentUpdateFlag;                              // 0x0DB0(0x0001) ZeroConstructor, Transient, IsPlainOldData, NoDestructor
			PAD(0x1);// EShooterPhysMaterialType                                   TargetableDamageFXDefaultPhysMaterial;                   // 0x0DB1(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
			unsigned char                                              UnknownData_LR0A[0x6];                                   // 0x0DB2(0x0006) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
			class UAnimMontage* PoopAnimation;                                           // 0x0DB8(0x0008) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
			double                                                     CorpseDestructionTime;                                   // 0x0DC0(0x0008) Net, ZeroConstructor, Transient, SaveGame, IsPlainOldData, NoDestructor
			float                                                      CorpseLifespan;                                          // 0x0DC8(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
			float                                                      TPVStructurePlacingHeightMultiplier;                     // 0x0DCC(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
			float                                                      CorpseFadeAwayTime;                                      // 0x0DD0(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
			float                                                      RagdollDeathImpulseScaler;                               // 0x0DD4(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
			class USoundCue* PoopSound;                                               // 0x0DD8(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
			float                                                      BaseTargetingDesirability;                               // 0x0DE0(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
			float                                                      DeadBaseTargetingDesirability;                           // 0x0DE4(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
			unsigned char                                              UnknownData_J0VC[0xC];                                   // 0x0DE8(0x000C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
			float                                                      OrbitCamZoom;                                            // 0x0DF4(0x0004) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor
			float                                                      OrbitCamZoomStepSize;                                    // 0x0DF8(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
			float                                                      OrbitCamMinZoomLevel;                                    // 0x0DFC(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
			float                                                      OrbitCamMaxZoomLevel;                                    // 0x0E00(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
			unsigned char                                              UnknownData_I11N[0x2C];                                  // 0x0E04(0x002C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
			float                                                      MaxCursorHUDDistance;                                    // 0x0E30(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
			float                                                      AddForwardVelocityOnJump;                                // 0x0E34(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
			struct FVector                                             DeathActorTargetingOffset;                               // 0x0E38(0x000C) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
			class FName                                                SocketOverrideTargetingLocation;                         // 0x0E44(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
			unsigned char                                              UnknownData_2MBP[0x24];                                  // 0x0E4C(0x0024) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
			double                                                     LastTimeSubmerged;                                       // 0x0E70(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor
			unsigned char                                              UnknownData_BZKU[0x10];                                  // 0x0E78(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
			float                                                      FootPhysicalSurfaceCheckInterval;                        // 0x0E88(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
			unsigned char                                              UnknownData_6Y99[0xC];                                   // 0x0E8C(0x000C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
			TWeakObjectPtr<class APrimalCharacter>                     LastAttackedNearbyPlayer;                                // 0x0E98(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor
			float                                                      LastAttackedNearbyPlayerTime;                            // 0x0EA0(0x0004) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor
			unsigned char                                              UnknownData_KEV8[0x18];                                  // 0x0EA4(0x0018) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
			float                                                      RagdollImpactDamageVelocityScale;                        // 0x0EBC(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
			float                                                      RagdollImpactDamageMinDecelerationSpeed;                 // 0x0EC0(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
			float                                                      StartFallingImpactRagdollTimeInterval;                   // 0x0EC4(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
			unsigned char                                              UnknownData_DOXR[0x30];                                  // 0x0EC8(0x0030) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
			class USoundCue* EnteredSwimmingSound;                                    // 0x0EF8(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
			class USoundCue* EnteredSleepingSound;                                    // 0x0F00(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
			class USoundCue* LeftSleepingSound;                                       // 0x0F08(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
			unsigned char                                              UnknownData_25BS[0x30];                                  // 0x0F10(0x0030) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
			float                                                      CorpseDraggedDecayRate;                                  // 0x0F40(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
			float                                                      PoopAltItemChance;                                       // 0x0F44(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
			class UClass* PoopAltItemClass;                                        // 0x0F48(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
			TArray<class UClass*>                                      DefaultBuffs;                                            // 0x0F50(0x0010) Edit, ZeroConstructor, DisableEditOnInstance
			class UTexture2D* PoopIcon;                                                // 0x0F60(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
			float                                                      RunningMaxDesiredRotDelta;                               // 0x0F68(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
			unsigned char                                              UnknownData_YEW6[0x4];                                   // 0x0F6C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
			double                                                     CorpseDestructionTimer;                                  // 0x0F70(0x0008) ZeroConstructor, Transient, SaveGame, IsPlainOldData, NoDestructor
			double                                                     LastSkinnedTime;                                         // 0x0F78(0x0008) ZeroConstructor, Transient, SaveGame, IsPlainOldData, NoDestructor
			unsigned char                                              UnknownData_R6QW[0x8];                                   // 0x0F80(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
			class FScriptMulticastDelegate                             OnDied;                                                  // 0x0F88(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable
			class FScriptMulticastDelegate                             OnNotifyDamage;                                          // 0x0F98(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable
			class FScriptMulticastDelegate                             OnSleepStateChanged;                                     // 0x0FA8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable
			class FScriptMulticastDelegate                             NotifyLevelUp;                                           // 0x0FB8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable
			class FScriptMulticastDelegate                             NotifyUnstasis;                                          // 0x0FC8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable
			class FScriptMulticastDelegate                             NotifyStasis;                                            // 0x0FD8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable
			unsigned char                                              UnknownData_CHQD[0x10];                                  // 0x0FE8(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
			double                                                     LastTimeInSwimming;                                      // 0x0FF8(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor
			unsigned char                                              UnknownData_GZG2[0x8];                                   // 0x1000(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
			TArray<struct FDefaultTextureParamOverride>                DefaultNoItemTextureParamOverrides;                      // 0x1008(0x0010) Edit, ZeroConstructor, DisableEditOnInstance
			unsigned char                                              UnknownData_4BKE[0x10];                                  // 0x1018(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
			class UStructurePaintingComponent* PaintingComponent;                                       // 0x1028(0x0008) ExportObject, Net, ZeroConstructor, InstancedReference, SaveGame, IsPlainOldData, RepNotify, NoDestructor
			float                                                      ExtraMaxSpeedModifier;                                   // 0x1030(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
			float                                                      ExtraRotationRateModifier;                               // 0x1034(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
			float                                                      TamedDinoCallOutRange;                                   // 0x1038(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
			unsigned char                                              UnknownData_3P4K[0xC];                                   // 0x103C(0x000C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
			struct FVector                                             TargetPathfindingLocationOffset;                         // 0x1048(0x000C) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
			unsigned char                                              UnknownData_S8HW[0x4];                                   // 0x1054(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
			double                                                     LastTookDamageTime;                                      // 0x1058(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor
			float                                                      ExtraReceiveDamageMultiplier;                            // 0x1060(0x0004) BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor
			float                                                      ExtraMeleeDamageMultiplier;                              // 0x1064(0x0004) BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor
			unsigned char                                              UnknownData_UGCF[0x18];                                  // 0x1068(0x0018) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
			float                                                      DamageTheMeleeDamageCauserPercent;                       // 0x1080(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
			float                                                      DurabilityDegrateTheMeleeDamageCauserPercent;            // 0x1084(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
			class UClass* DamageTheMeleeDamageCauserDamageType;                    // 0x1088(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
			unsigned char                                              TribeGroupInventoryRank;                                 // 0x1090(0x0001) Net, ZeroConstructor, Transient, SaveGame, IsPlainOldData, NoDestructor
			unsigned char                                              UnknownData_Y123[0x3];                                   // 0x1091(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
			float                                                      CharacterDamageImpulseMultiplier;                        // 0x1094(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
			unsigned char                                              UnknownData_RIS7[0x18];                                  // 0x1098(0x0018) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
			float                                                      MaxRagdollDeathVelocityImpulse;                          // 0x10B0(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
			float                                                      ClientRotationInterpSpeedMultiplierGround;               // 0x10B4(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
			float                                                      GlideGravityScaleMultiplier;                             // 0x10B8(0x0004) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
			float                                                      GlideMaxCarriedWeight;                                   // 0x10BC(0x0004) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
			unsigned char                                              UnknownData_LP8M[0x8];                                   // 0x10C0(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
			float                                                      ScaleDeathHarvestHealthyByMaxHealthBase;                 // 0x10C8(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
			unsigned char                                              UnknownData_R9T6[0x4];                                   // 0x10CC(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
			class FScriptMulticastDelegate                             NotifyInputEvent;                                        // 0x10D0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable
			unsigned char                                              UnknownData_MVLB[0x10];                                  // 0x10E0(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
			float                                                      RunMinVelocityRotDot;                                    // 0x10F0(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
			unsigned char                                              UnknownData_8JU1[0x4];                                   // 0x10F4(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
			double                                                     LastHitDamageTime;                                       // 0x10F8(0x0008) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
			unsigned char                                              bShouldBeInGodMode;                                      // 0x1100(0x0001) ZeroConstructor, Transient, SaveGame, IsPlainOldData, NoDestructor
			unsigned char                                              UnknownData_6BW7[0x7];                                   // 0x1101(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
			int32_t                                                    MeshingTickCounterMultiplier;                            // 0x1108(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
			unsigned char                                              UnknownData_XD07[0x4];                                   // 0x110C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
			TArray<class UClass*>                                      PreventBuffClasses;                                      // 0x1110(0x0010) Edit, ZeroConstructor, DisableEditOnInstance
			TArray<class FName>                                        PreventBuffClassesWithTag;                               // 0x1120(0x0010) Edit, ZeroConstructor, DisableEditOnInstance
			unsigned char                                              bIgnoreLowGravityDisorientation : 1;                     // 0x1130(0x0001) BIT_FIELD Edit, BlueprintVisible, NoDestructor
			unsigned char                                              bUseBPOnMassTeleportEvent : 1;                           // 0x1130(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
			unsigned char                                              bUseBlueprintAnimNotifyCustomState : 1;                  // 0x1130(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
			unsigned char                                              bPreventIKWhenNotWalking : 1;                            // 0x1130(0x0001) BIT_FIELD Edit, NoDestructor
			unsigned char                                              bIgnoreCorpseDecompositionMultipliers : 1;               // 0x1130(0x0001) BIT_FIELD Edit, BlueprintVisible, NoDestructor
			unsigned char                                              bInterpHealthDamageMaterialOverlayAlpha : 1;             // 0x1130(0x0001) BIT_FIELD Edit, NoDestructor
			unsigned char                                              bSuppressPlayerKillNotification : 1;                     // 0x1130(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
			unsigned char                                              bAllowCorpseDestructionWithPreventSaving : 1;            // 0x1130(0x0001) BIT_FIELD Edit, BlueprintVisible, NoDestructor
			unsigned char                                              bPreventInventoryAccess : 1;                             // 0x1131(0x0001) BIT_FIELD Edit, BlueprintVisible, NoDestructor
			unsigned char                                              bUseGetOverrideSocket : 1;                               // 0x1131(0x0001) BIT_FIELD Edit, BlueprintVisible, NoDestructor
			unsigned char                                              bAllowBPNewDoorInteractionDrawHUD : 1;                   // 0x1131(0x0001) BIT_FIELD Edit, BlueprintVisible, NoDestructor
			unsigned char                                              bJumpOnRelease : 1;                                      // 0x1131(0x0001) BIT_FIELD Edit, BlueprintVisible, NoDestructor
			unsigned char                                              bAllowMultiUseByRemoteDino : 1;                          // 0x1131(0x0001) BIT_FIELD Edit, BlueprintVisible, NoDestructor
			unsigned char                                              bUseBPOverrideJumpZModifier : 1;                         // 0x1131(0x0001) BIT_FIELD Edit, BlueprintVisible, NoDestructor
			unsigned char                                              bUseZeroGravityWander : 1;                               // 0x1131(0x0001) BIT_FIELD Edit, BlueprintVisible, NoDestructor
			unsigned char                                              bUseBPPreventNotifySound : 1;                            // 0x1131(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
			unsigned char                                              bUseBP_ModifyInputAcceleration : 1;                      // 0x1132(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
			unsigned char                                              bUseBP_ModifySavedMoveAcceleration_PreRep : 1;           // 0x1132(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
			unsigned char                                              bUseBP_ModifySavedMoveAcceleration_PostRep : 1;          // 0x1132(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
			unsigned char                                              bForceSimpleTeleportFade : 1;                            // 0x1132(0x0001) BIT_FIELD BlueprintVisible, Transient, NoDestructor
			unsigned char                                              bUseBPGetArmorDurabilityDecreaseMultiplier : 1;          // 0x1132(0x0001) BIT_FIELD Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor
			unsigned char                                              bUseBPShieldBlock : 1;                                   // 0x1132(0x0001) BIT_FIELD Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor
			unsigned char                                              bHideFromScans : 1;                                      // 0x1132(0x0001) BIT_FIELD Edit, BlueprintVisible, NoDestructor
			unsigned char                                              UnknownData_WNAV[0x1];                                   // 0x1133(0x0001) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
			float                                                      ControlledInventoryAccessDistanceOffset;                 // 0x1134(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
			class FScriptMulticastDelegate                             OnOrbitCameraViewChange;                                 // 0x1138(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable
			float                                                      AdditionalMaxUseDistance;                                // 0x1148(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
			unsigned char                                              UnknownData_6PLV[0x4];                                   // 0x114C(0x0004) MISSED OFFSET (PADDING)

		/*public:
			void ZoomOut();
			void ZoomIn();
			bool UseCenteredTPVCamera();
			void UpdateTickSetting();
			void UpdateSwimmingState();
			bool UpdateHasBuffPreSerialize();
			void TurnAtRate(float val);
			void TryPoop();
			void TryGiveDefaultWeapon();
			void TickMovementComponent(float DeltaTime);
			void TempDampenInputAcceleration();
			float TakeDamage(float Damage, const struct FDamageEvent& DamageEvent, class AController* EventInstigator, class AActor* DamageCauser);
			void StopAnimEx(class UAnimMontage* AnimMontage, bool bReplicate, bool bReplicateToOwner, float BlendOutTime);
			void STATIC_StaticRemoveCharacterSnapshot(class UPrimalItem* Item, class AActor* From);
			int32_t STATIC_StaticGetSnapshotPoseCount(class UPrimalItem* Item);
			struct FPrimalSnapshotPose STATIC_StaticGetSnapshotPose(class UPrimalItem* Item, int32_t PoseIndex);
			void STATIC_StaticApplyCharacterSnapshotEquipment(class UPrimalInventoryComponent* inventory, class AActor* To);
			void STATIC_StaticApplyCharacterSnapshot(class UPrimalItem* Item, class AActor* To, const struct FVector& Offset, float MaxExtent, int32_t Pose, bool bCollisionOn);
			void StartForceSkelUpdate(float ForTime, bool bForceUpdateMesh, bool bServerOnly);
			void SleepBodies();
			bool ShouldDisableCameraInterpolation();
			bool ShouldDealDamageTo(class APrimalCharacter* OtherCharacter, bool bAllowDamageToSelf, bool bAllowDamageToTribe, bool bAllowDamageToAlliedTribes);
			void SetSleeping(bool bSleeping, bool bUseRagdollLocationOffset);
			void SetMyInventoryComponent(class UPrimalInventoryComponent* TheInventoryComponent);
			void SetLastCausedDamageTime(double lastCausedDamageTimeValue);
			void SetEnableIK(bool bEnable);
			void SetCharacterMeshesMaterialScalarParamValue(const class FName& ParamName, float Value);
			void SetBoundsScale(float NewScale);
			void ServerTryPoop();
			void ServerSetRunning(bool bNewRunning);
			void ServerRequestDrag();
			void ServerGiveDefaultWeapon();
			void ServerDinoOrder(class APrimalDinoCharacter* aDino, EDinoTamedOrder OrderType, class AActor* Target);
			void ServerCaptureDermis(class APrimalCharacter* Target);
			void ServerCallStayOne(class APrimalDinoCharacter* ForDinoChar);
			void ServerCallStay();
			void ServerCallSetAggressive();
			void ServerCallPassiveFlee();
			void ServerCallPassive();
			void ServerCallNeutral();
			void ServerCallMoveTo(const struct FVector& MoveToLoc);
			void ServerCallLandFlyerOne(class APrimalDinoCharacter* ForDinoChar);
			void ServerCallFollowOne(class APrimalDinoCharacter* ForDinoChar);
			void ServerCallFollowDistanceCycleOne(class APrimalDinoCharacter* ForDinoChar);
			void ServerCallFollow();
			void ServerCallAttackTarget(class AActor* TheTarget);
			void ServerCallAggressive();
			void RemoveAllJumpDeactivatedBuffs(class APrimalBuff* IgnoredBuff);
			void PrimalCharacterSleepStateChanged__DelegateSignature(class APrimalCharacter* forCharacter, bool bIsSleeping);
			void PrimalCharacterNotifyUnstasis__DelegateSignature(class APrimalCharacter* ForPrimalCharacter);
			void PrimalCharacterNotifyStasis__DelegateSignature(class APrimalCharacter* ForPrimalCharacter);
			void PrimalCharacterNotifyLevelUp__DelegateSignature(int32_t ExtraCharacterLevel);
			void PrimalCharacterNotifyDamage__DelegateSignature(float DamageAmount, const struct FDamageEvent& DamageEvent, class AController* EventInstigator, class AActor* DamageCauser);
			void PrimalCharacterInputNotify__DelegateSignature(class APrimalCharacter* ForPrimalCharacter, EPrimalCharacterInputType inputType);
			void PrimalCharacterDied__DelegateSignature(class APrimalCharacter* DiedCharacter);
			bool PreventsTargeting(class AActor* ByActor);
			bool PreventNotifySound(class USoundBase* SoundIn);
			bool PreventInputType(EPrimalCharacterInputType inputType);
			bool PreventInputDoesOffset();
			bool Poop(bool bForcePoop);
			void PlayHurtAnim(float DamageTaken, const struct FDamageEvent& DamageEvent, class APawn* PawnInstigator, class AActor* DamageCauser, bool bIsLocalPath);
			void PlayHitEffectRadial(float DamageTaken, const struct FRadialDamageEvent& DamageEvent, class APawn* PawnInstigator, class AActor* DamageCauser);
			void PlayHitEffectPoint(float DamageTaken, const struct FPointDamageEvent& DamageEvent, class APawn* PawnInstigator, class AActor* DamageCauser);
			void PlayHitEffectGeneric(float DamageTaken, const struct FDamageEvent& DamageEvent, class APawn* PawnInstigator, class AActor* DamageCauser);
			class FString PlayerCommand(const class FString& TheCommand);
			void PlayDyingRadial(float KillingDamage, const struct FRadialDamageEvent& DamageEvent, class APawn* InstigatingPawn, class AActor* DamageCauser);
			void PlayDyingPoint(float KillingDamage, const struct FPointDamageEvent& DamageEvent, class APawn* InstigatingPawn, class AActor* DamageCauser);
			void PlayDyingGeneric(float KillingDamage, const struct FDamageEvent& DamageEvent, class APawn* InstigatingPawn, class AActor* DamageCauser);
			float PlayAnimEx(class UAnimMontage* AnimMontage, float InPlayRate, const class FName& StartSectionName, bool bReplicate, bool bReplicateToOwner, bool bForceTickPoseAndServerUpdateMesh, bool bForceTickPoseOnServer, bool bForceKeepSynced, float BlendInTime, float BlendOutTime);
			void OverrideCameraTargetOriginLocation(struct FVector* OutOverrideOrigin, const class FName& WithCameraStyle);
			void OverrideCameraInterpSpeed(float DefaultTPVCameraSpeedInterpMultiplier, float DefaultTPVOffsetInterpSpeed, float* TPVCameraSpeedInterpMultiplier, float* TPVOffsetInterpSpeed);
			void OrbitCamToggle();
			void OrbitCamOn();
			void OrbitCamOff();
			void OnStopRunning();
			void OnStopJump();
			void OnStopFire(bool bFromGamepadRight);
			void OnStopAltFire(bool bFromGamepad);
			void OnStartRunning();
			void OnStartJump();
			void OnStartFire(bool bFromGamepadRight);
			void OnStartAltFire(bool bFromGamepad);
			void OnRunToggleReleased();
			void OnRunTogglePressed();
			void OnRunToggle();
			void OnRep_RagdollPositions();
			void OnRep_PaintingComponent();
			void OnRep_MountedDino();
			void OnRep_IsSleeping();
			void OnRep_IsDead();
			void OnOrbitCameraViewChange__DelegateSignature(bool bEnabled);
			void OnMassTeleportEvent(EMassTeleportState EventState, class APrimalCharacter* TeleportInitiatedByChar);
			void OnEndDrag();
			void OnDetachedFromCharacter(class APrimalCharacter* ACharacter, int32_t OverrideDirection);
			void OnBeginDrag(class APrimalCharacter* Dragged, int32_t BoneIndex, bool bWithGrapHook);
			void OnAttachedToCharacter();
			void OnAltFireReleased();
			void OnAltFirePressed();
			void NetUpdateTribeName(const class FString& NewTribeName);
			void NetStopAllAnimMontage();
			void NetSetMovementModeSimulatedInternal(EMovementMode NewMovementMode);
			void NetSetCharacterMovementVelocity(bool bSetNewVelocity, const struct FVector& NewVelocity, bool bSetNewMovementMode, EMovementMode NewMovementMode);
			void NetPlaySoundOnCharacter(class USoundBase* SoundToPlay, bool bPlayOnOwner);
			void NetOnJumped();
			void NetForceUpdateAimedCharacters(const struct FVector& StartLoc, const struct FVector& EndLoc, class AActor* IgnoreActor, bool bForceUpdateIgnoreActor, float TraceRadius);
			void NetDidLand();
			void NetAddCharacterMovementImpulse(const struct FVector& Impulse, bool bVelChange, float ImpulseExponent, bool bSetNewMovementMode, EMovementMode NewMovementMode, bool bOverrideMaxImpulseZ);
			void NativeSimulateHair(TArray<struct FVector>* CurrentPos, TArray<struct FVector>* LastPos, TArray<struct FVector>* RestPos, TArray<struct FVector>* PivotPos, TArray<float>* RestDistance, const struct FVector& HairSocketLoc, const struct FRotator& HairSocketRot, const struct FVector& ChestSocketLoc, const struct FRotator& ChestSocketRot, float DeltaTime, float Damping, float DampingFrontModifier, float DampingBack, float InWater, float HairWetness, float DragForce, float HairScale, float SpringForce, float SpringForceFrontModifier, float SpringForceBack, float GravityForce, const struct FVector& ShoulderLCollisionOffset, float ShoulderLCollisionRadius, const struct FVector& ShoulderRCollisionOffset, float ShoulderRCollisionRadius, const struct FVector& HeadHairCollisionOffset, float HeadHairCollisionRadius, const struct FVector& NeckHairCollisionOffset, float NeckHairCollisionRadius, float MaxDistanceToRestPos, const struct UObject_FTransform& LastHeadTransform, bool bPosAsPivot, bool bCollideMiddle, bool bCollideWithNeck);
			void MoveUp(float val);
			void MoveRight(float val);
			void MoveForward(float val);
			void ModifyStasisComponentRadius(float Delta);
			void LookUpAtRate(float val);
			void LocalUnpossessed();
			int32_t LevelUpPlayerAddedStat(EPrimalCharacterStatusValue StatToLevel, int32_t NumLevels, class AShooterPlayerController* ForPlayer);
			bool IsWildSlow();
			bool IsWatered();
			bool IsValidForCombatMusic();
			bool IsSubmerged(bool bDontCheckSwimming, bool bUseFullThreshold, bool bForceCheck, bool bFromVolumeChange);
			bool IsSitting(bool bIgnoreLockedToSeat);
			bool IsRunning();
			bool IsRider();
			bool IsProneOrSitting(bool bIgnoreLockedToSeat);
			bool IsPrimalCharWalking();
			bool IsPrimalCharSwimming();
			bool IsPrimalCharFriendly(class APrimalCharacter* primalChar);
			bool IsPrimalCharFlying();
			bool IsPrimalCharFalling();
			bool IsOwningClient();
			bool IsOnSeatingStructure();
			bool IsMoving();
			bool IsMontagePlaying(class UAnimMontage* AnimMontage, float TimeFromEndToConsiderFinished);
			bool IsMeshGameplayRelevant();
			bool IsInvincible();
			bool IsInVacuumSealedSpace();
			bool IsInStatusState(EPrimalCharacterStatusState StatusStateType);
			bool IsHostileTo(class APrimalCharacter* OtherCharacter, bool ignoreDead);
			bool IsHostileOrAggressiveTo(class APrimalCharacter* OtherCharacter);
			bool IsGameInputAllowed();
			bool IsFirstPerson();
			bool IsDeadOrDying();
			bool IsDamageOccludedByStructures(class AActor* DamageCauser);
			bool IsCharacterHardAttached(bool bIgnoreRiding, bool bIgnoreCarried);
			bool IsBossDino();
			bool IsBlockedByShield(const struct FHitResult& HitInfo, const struct FVector& ShotDirection, bool bBlockAllPointDamage);
			bool IsBeingDestroyed();
			bool IsBaby();
			bool IsAttachedToSomething();
			bool IsAlliedWithOtherTeam(int32_t OtherTeamID);
			bool IsAlive();
			void Immobilize(bool bImmobilize, class AActor* UsingActor, bool bImmobilizeFalling, bool bPreventDismount);
			void HurtMe(int32_t HowMuch);
			bool HasCryoSickness();
			bool HasBuffWithCustomTags(TArray<class FName> customTags);
			bool HasBuffWithCustomTag(const class FName& BuffCustomTag);
			bool HasBuff(class UClass* BuffClass, bool useExactMatch);
			bool HasAnyBuffWithDisabledWeaponTag(const class FName& Tag, class APrimalBuff** FoundBuff);
			bool GiveKillExperience();
			struct FVector GetTPVCameraOffsetMultiplier();
			struct FVector GetTPVCameraOffset();
			struct FVector GetSocketLocation(const class FName& SocketName);
			class UActorComponent* STATIC_GetSnapshotComponent(class AActor* From, const class FName& Tag);
			class FString GetShortName();
			float GetRunningSpeedModifier(bool bIsForDefaultSpeed);
			ENetRole GetRole();
			EMovementMode GetPrimalCharMovementMode();
			EPhysicalSurface GetPhysMatTypeFromHits(TArray<struct FHitResult> FromHits);
			EPhysicalSurface GetPhysMatTypeFromHit(const struct FHitResult& FromHit);
			class UPaintingTexture* GetPaintingTexture();
			class UMeshComponent* GetPaintingMesh();
			class FName GetOverrideSocket(const class FName& From);
			class UAnimMontage* GetOverridenMontage(class UAnimMontage* AnimMontage);
			class UAnimSequence* GetOverridenAnimSequence(class UAnimSequence* AnimSeq);
			class ABiomeZoneVolume* GetMyBiomeZoneVolume();
			float GetMoveAnimRate();
			float GetMaxHealth();
			double GetLastCausedDamageTime();
			float GetKillXP();
			struct FRotator GetInterpolatedRotation_NonFlattened();
			struct FVector GetInputDirectionVector(bool bRelativeToViewDirection);
			float GetImmersionDepth();
			float GetHealthPercentage();
			float GetHealth();
			class UClass* GetGrappledBuffClassOverride();
			EPhysicalSurface GetFootPhysicalSurfaceType(bool bForce, bool bIsForFootstepParticles);
			struct FVector GetFloatingHUDLocation();
			float GetFallAcceleration();
			float GetDragWeight(class APrimalCharacter* ForDragger);
			TArray<class FString> GetDetailedDescription(const class FString& IndentPrefix);
			class FString GetDescriptiveName();
			float GetDefaultMovementSpeed();
			class FString GetDebugInfoString();
			void GetCharacterViewLocationAndDirection(struct FVector* ViewLocation, struct FVector* ViewDirection, bool* bFromCrosshairOrCamera, float FallbackAngleOffsetDegrees);
			class UPrimalCharacterStatusComponent* GetCharacterStatusComponent();
			void GetCharactersGrappledToMe(TArray<class APrimalCharacter*>* GrappledCharsArray);
			struct FVector GetCapsuleTopLocation();
			struct FVector GetCapsuleBottomLocation();
			class APrimalBuff* GetBuffWithCustomTag(const class FName& BuffCustomTag);
			int32_t GetBuffStackCount(class UClass* BuffClass, bool useExactMatch);
			void GetBuffs(TArray<class APrimalBuff*>* TheBuffs);
			class APrimalBuff* GetBuff(class UClass* BuffClass);
			float GetBaseStatusValue(EPrimalCharacterStatusValue StatusValueType);
			float GetBaseDragWeight();
			class APrimalDinoCharacter* GetBasedOrSeatingOnDino();
			class APrimalDinoCharacter* GetBasedOnDino();
			class UPrimitiveComponent* GetBasedMovementComponent();
			class APrimalStructureExplosive* GetAttachedExplosive();
			void GetAllBuffs(TArray<class APrimalBuff*>* AllBuffs);
			bool GetAllAttachedChars(TArray<class APrimalCharacter*>* AttachedCharsArray, bool bIncludeSelf, bool bIncludeBased, bool bIncludePassengers, bool bIncludeCarried);
			struct FRotator GetAimOffsets(float DeltaTime, struct FRotator* RootRotOffset, float* TheRootYawSpeed, float MaxYawAimClamp, struct FVector* RootLocOffset);
			void GetAimedActor(struct FHitResult* outHitResult, ECollisionChannel CollisionChannel, float MaxDistanceOverride, float CheckRadius, bool bForceUseCameraLocation, bool bForceUpdateAimedActors);
			void STATIC_ForceUpdateCharacter(class UWorld* World, class APrimalCharacter* primalChar);
			void STATIC_ForceUpdateAimedCharacters(class UWorld* World, const struct FVector& StartLoc, const struct FVector& EndLoc, class AActor* IgnoreActor, bool bForceUpdateIgnoreActor, float TraceRadius);
			void ForceTickPoseDelta();
			void ForceRefreshBones();
			void ForceMeshRelevant(float Duration);
			bool ForceAddUnderwaterCharacterStatusValues();
			void FadeOutLoadingMusic();
			void ExecSetSleeping(bool bEnable);
			void ExecSetPawnSleeping(bool bEnable);
			void EndForceSkelUpdate();
			void EndDragCharacter();
			bool EnableTurnToFaceRotation();
			void EnableIK(bool bEnable, bool bForceOnDedicated);
			void EnableBPTimerServer(bool bEnable);
			void EnableBPTimerNonDedicated(bool bEnable);
			void EnableBodiesGravity();
			void EmitPoop();
			void DoSetRagdollPhysics();
			void DoFindGoodSpot(const struct FVector& RagdollLoc, bool bClearCollisionSweep);
			void DoCharacterDetachment(bool bIncludeRiding, bool bIncludeCarrying, class APrimalBuff* BuffToIgnore);
			bool DinoMountOnMe(class APrimalDinoCharacter* DinoCharacter);
			void DidTeleport(const struct FVector& NewLoc, const struct FRotator& newRot, bool bDoCameraFade, const struct FLinearColor& CameraFadeColor);
			void DetachFromOtherCharacter(bool enableMovementAndCollision);
			void DeathHarvestingFadeOut();
			void DeactivateBuffs(class UClass* ForBuffClass, class UPrimalItem* ForInstigatorItem, bool perfectClassMatch);
			class UActorComponent* STATIC_CreateSnapshotComponent(class AActor* For, class UObject* Template, const class FName& Tag, const class FName& Name);
			bool ConsumeProjectileImpact(class AShooterProjectile* theProjectile, const struct FHitResult& HitResult);
			void ClientSyncAnimation(class UAnimMontage* AnimMontage, float PlayRate, float ServerCurrentMontageTime, bool bForceTickPoseAndServerUpdateMesh, float BlendInTime, float BlendOutTime);
			void ClientStopAnimation(class UAnimMontage* AnimMontage, bool bStopOnOwner, float BlendOutTime);
			void ClientRagdollUpdate(TArray<struct FVector_NetQuantize> BoneLocations, const struct FRotator_NetQuantize& TargetRootRotation);
			void ClientPlayAnimation(class UAnimMontage* AnimMontage, float PlayRate, const class FName& StartSectionName, bool bPlayOnOwner, bool bForceTickPoseAndServerUpdateMesh);
			void ClientOrderedMoveTo(const struct FVector& MoveToLoc);
			void ClientOrderedAttackTarget(class AActor* attackTarget);
			void ClientNotifyLevelUp();
			void ClientFailedPoop();
			void ClientEndRagdollUpdate();
			void ClientDidPoop();
			void ClearRidingDinoAsPassenger(bool bFromDino);
			void ClearMountedDino(bool fromMountedDino);
			void ClearControlInputVector();
			void ClearCarryingDino(bool bFromDino, bool bCancelAnyCarryBuffs);
			bool CharacterIsCarriedAsPassenger();
			bool CharacterBuffsPreventFirstPerson();
			void CaptureCharacterSnapshot(class UPrimalItem* Item);
			bool CanMountOnMe(class APrimalDinoCharacter* DinoCharacter);
			bool CanDragCharacter(class APrimalCharacter* Character);
			void CallDrawHUD(class AShooterHUD* HUD);
			void CallDrawFloatingHUD(class AShooterHUD* HUD);
			bool BuffsPreventInventoryAccess();
			void BPTriggerStasisEvent();
			void BPTimerServer();
			void BPTimerNonDedicated();
			bool BPShouldLimitRightDirection();
			bool BPShouldLimitForwardDirection();
			void BPSetCharacterMeshesMaterialScalarParamValue(const class FName& ParamName, float Value);
			void BPRemovedAttachmentsForItem(class UPrimalItem* anItem);
			void BPRemovedAsPassenger(class APrimalCharacter* Character);
			void BPRemoveCharacterSnapshot(class UPrimalItem* Item, class AActor* From);
			bool BPPreventStasis();
			bool BPPreventNotifySound(class USoundBase* SoundIn);
			bool BPPreventInputType(EPrimalCharacterInputType inputType);
			bool BPPreventFirstPerson();
			bool BPPreventFallDamage(const struct FHitResult& HitResult, float FallDamageAmount);
			void BPPreSerializeSaveGame();
			void BPPostLoadedFromSaveGame();
			void BPPlayDying(float KillingDamage, const struct FDamageEvent& DamageEvent, class APawn* InstigatingPawn, class AActor* DamageCauser);
			void BPOverrideUseItemSlot(int32_t ItemSlot);
			void BPOverrideReleaseItemSlot(int32_t ItemSlot);
			float BPOverrideJumpZModifier(float InJumpZModifier);
			bool BPOverrideInventoryAccessInput();
			class UAnimMontage* BPOverrideHurtAnim(float DamageTaken, const struct FDamageEvent& DamageEvent, class APawn* PawnInstigator, class AActor* DamageCauser, bool bIsLocalPath, bool bIsPointDamage, const struct FVector& PointDamageLocation, const struct FVector& PointDamageHitNormal);
			void BPOverrideHeldItemSlot(int32_t ItemSlot);
			bool BPOverrideFPVViewLocation(class APrimalCharacter* viewingCharacter);
			struct FVector BPOverrideFlyingVelocity(const struct FVector& InitialVelocity, const struct FVector& Gravity, float DeltaTime);
			struct FHitMarkerSettings BPOverrideDamageCauserHitMarker(class AShooterPlayerController* DamageCauserController, bool bHitFriendlyTarget, float PreDamageHealth, float DamageAmount, const struct FDamageEvent& DamageEvent, bool bIsPointDamage, const struct FHitResult& PointDamageHitResult);
			struct FVector BPOverrideCharacterNewFallVelocity(const struct FVector& InitialVelocity, const struct FVector& Gravity, float DeltaTime);
			void BPOnStaminaDrained();
			void BPOnMovementModeChangedNotify(EMovementMode PrevMovementMode, unsigned char PreviousCustomMode);
			void BPOnMassTeleportEvent(EMassTeleportState EventState, class APrimalCharacter* TeleportInitiatedByChar);
			void BPOnLethalDamage(float KillingDamage, const struct FDamageEvent& DamageEvent, class AController* Killer, class AActor* DamageCauser, bool* bPreventDeath);
			bool BPOnAttachmentReplication();
			void BPOnAnimPlayedNotify(class UAnimMontage* AnimMontage, float InPlayRate, const class FName& StartSectionName, bool bReplicate, bool bReplicateToOwner, bool bForceTickPoseAndServerUpdateMesh, bool bForceTickPoseOnServer);
			void BPNotifyToggleHUD(bool bHudHidden);
			void BPNotifyLevelUp(int32_t ExtraCharacterLevel);
			void BPNotifyInventoryItemChange(bool bIsItemAdd, class UPrimalItem* theItem, bool bEquipItem);
			void BPNotifyDroppedItemPickedUp(class ADroppedItem* itemPickedUp, class APrimalCharacter* PickedUpBy);
			void BPNotifyBumpedPawn(class APrimalCharacter* BumpedPawn);
			void BPNotifyBumpedByPawn(class APrimalCharacter* ByPawn);
			void BPNotifyBPNotifyIsDamageCauserOfAddedBuff(class APrimalBuff* Buff);
			void BPNewDoorInteractionDrawHUD(class AShooterHUD* HUD, const struct FVector2D& DoorDescriptionLoc);
			void BPNetSetMovementMode(EMovementMode NewMovementMode);
			void BPNetSetCharacterMovementVelocity(bool bSetNewVelocity, const struct FVector& NewVelocity, bool bSetNewMovementMode, EMovementMode NewMovementMode);
			void BPNetAddCharacterMovementImpulse(const struct FVector& Impulse, bool bVelChange, float ImpulseExponent, bool bSetNewMovementMode, EMovementMode NewMovementMode, bool bOverrideMaxImpulseZ, bool bApplyToBigPawns);
			float BPModifyViewHitDir(class APrimalCharacter* viewingCharacter, float InViewHitDir);
			struct FVector BPModifyRightDirectionInput(const struct FVector& directionInput);
			float BPModifyFOVInterpSpeed(float FOVInterpSpeedIn);
			float BPModifyFOV(float FOVIn);
			struct FVector BPModifyForwardDirectionInput(const struct FVector& directionInput);
			void BPLocalUnpossessed();
			void BPLocalPossessedBy(class APlayerController* ByController);
			struct FRotator BPLimitPlayerRotation(class APrimalCharacter* viewingCharacter, const struct FRotator& InViewRotation);
			bool BPIsConscious();
			bool BPIsBlockedByShield(const struct FHitResult& HitInfo, const struct FVector& ShotDirection, bool bBlockAllPointDamage);
			bool BPIsBasedOnDynamicActor();
			bool BPHasPlayerController();
			bool BPHandleRightShoulderButton();
			bool BPHandlePoop();
			bool BPHandleLeftShoulderButton();
			TArray<struct FBlueprintVisualLogEntry> BPGrabDebugSnapshot();
			class FString BPGetStatusNameString(EPrimalCharacterStatusValue ValueType);
			void BPGetOverrideCameraInterpSpeed(float DefaultTPVCameraSpeedInterpolationMultiplier, float DefaultTPVOffsetInterpSpeed, float* TPVCameraSpeedInterpolationMultiplier, float* TPVOffsetInterpSpeed);
			bool BPGetIsBuried();
			float BPGetHUDOverrideBuffProgressBarPercent();
			void BPGetHUDElements(class APlayerController* ForPC, TArray<struct FHUDElement>* OutElements);
			float BPGetGravityZScale();
			struct FVector BPGetFPVViewLocation(class APrimalCharacter* viewingCharacter);
			float BPGetExtraMeleeDamageModifier();
			class FString BPGetDebugInfoString();
			float BPGetArmorDurabilityDecreaseMultiplier();
			float BPGetApproachRadius();
			float BPGetAddForwardVelocityOnJump();
			ECameraStyle BPForceCameraStyle(class APrimalCharacter* ForViewTarget);
			void BPCheckJumpInput(bool* bUseCustomErrorMessage, class FString* ErrorMessageToDisplay);
			void BPCharacterUnsleeped();
			void BPCharacterSleeped();
			void BPCharacterDetach();
			bool BPCanNotifyTeamAggroAI(class APrimalDinoCharacter* Dino);
			bool BPCanBeBaseForCharacter(class APawn* Pawn);
			bool BPCanBaseOnCharacter(class APrimalCharacter* BaseCharacter);
			struct FRotator BPCameraRotationFinal(class APrimalCharacter* viewingCharacter, const struct FRotator& InCurrentFinalRot);
			struct FRotator BPCameraBaseOrientation(class APrimalCharacter* viewingCharacter);
			void BPApplyCharacterSnapshot(class UPrimalItem* Item, class AActor* To, const struct FVector& Offset, float MaxExtent, int32_t Pose, bool bCollisionOn);
			void BPAnimNotifyCustomState_End(const class FName& CustomEventName, class USkeletalMeshComponent* MeshComp, class UAnimSequenceBase* Animation, class UAnimNotifyState* AnimNotifyObject);
			void BPAnimNotifyCustomState_Begin(const class FName& CustomEventName, class USkeletalMeshComponent* MeshComp, class UAnimSequenceBase* Animation, float TotalDuration, class UAnimNotifyState* AnimNotifyObject);
			float BPAdjustTorpidityDamage(float DesiredTorpidityDamage, float HealthDamageAmount, class UClass* DamageType);
			struct FVector BPAdjustImpulseFromDamage(const struct FVector& DesiredImpulse, float DamageTaken, const struct FDamageEvent& TheDamageEvent, class APawn* PawnInstigator, class AActor* DamageCauser, bool bIsPointDamage, const struct FHitResult& PointHitInfo);
			float BPAdjustDamage(float IncomingDamage, const struct FDamageEvent& TheDamageEvent, class AController* EventInstigator, class AActor* DamageCauser, bool bIsPointDamage, const struct FHitResult& PointHitInfo);
			struct FVector BPAdjustCharacterMovementImpulse(const struct FVector& Impulse, bool bVelocityChange, float MassScaleImpulseExponent, bool bOverrideMaxImpulseZ);
			void BPAddedAttachmentsForItem(class UPrimalItem* anItem);
			bool BP_ShouldDisableCameraInterpolation();
			float BP_OverrideTerminalVelocity();
			void BP_OverrideCameraTargetOriginLocation(struct FVector* OutOverrideOrigin, const class FName& WithCameraStyle);
			void BP_OnZoomOut();
			void BP_OnZoomInOrbitCam();
			void BP_OnZoomIn();
			void BP_OnStartCarried(class APrimalDinoCharacter* aDino);
			void BP_OnSetRunning(bool bNewIsRunning);
			void BP_OnSetDeath();
			void BP_OnPaintingComponentInitialized(class UStructurePaintingComponent* PaintingComp);
			void BP_OnJumpReleased();
			void BP_OnJumpPressed();
			void BP_OnEndCarried(bool bFromDino, bool bCancelAnyCarryBuffs);
			void BP_OnCameraStyleChangedNotify(const class FName& NewCameraStyle, const class FName& OldCameraStyle);
			bool BP_ModifySavedMoveAcceleration_PreRep(struct FVector* ModifyClientAccel);
			bool BP_ModifySavedMoveAcceleration_PostRep(struct FVector* ModifyServerAccel);
			void BP_ModifyInputAcceleration(struct FVector* ModifyInputAccel);
			bool BP_IsCharacterHardAttached(bool bIgnoreRiding, bool bIgnoreCarried);
			float BP_GetMaxSpeedModifier();
			bool BP_ForceAllowAddBuff(class UClass* BuffClass);
			bool BP_AnimationPreventsInput();
			void BlueprintAnimNotifyCustomEvent(const class FName& CustomEventName, class USkeletalMeshComponent* MeshComp, class UAnimSequenceBase* Animation, class UAnimNotify* AnimNotifyObject);
			void AttachToOtherCharacter(class APrimalCharacter* characterToAttachTo, const class FName& InSocketName, bool enableMovementAndCollision, EAttachLocation AttachLocation);
			void AttachedToOtherCharacterUpdateWorldLocation(const struct FVector& WorldLocation);
			void ApplyCustomFallDamage(const struct FVector& Location, const struct FVector& Velocity, float FallDamageThreshold);
			bool AllowPlayMontage(class UAnimMontage* AnimMontage);
			static UClass* StaticClass();*/
		};



		class APrimalDinoCharacter : public APrimalCharacter
		{
		public:
			unsigned char                                              UnknownData_4K3V[0x34];                                  // 0x1150(0x0034) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
			TWeakObjectPtr<class AActor>                               ForcedMasterTarget;                                      // 0x1184(0x0008) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
			class FName                                                MountCharacterSocketName;                                // 0x118C(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
			TWeakObjectPtr<class APrimalCharacter>                     MountCharacter;                                          // 0x1194(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor
			unsigned char                                              UnknownData_X02Z[0x4];                                   // 0x119C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
			struct FVector                                             RidingAttackExtraVelocity;                               // 0x11A0(0x000C) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
			unsigned char                                              UnknownData_8VJD[0x4];                                   // 0x11AC(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
			class UAnimMontage* StartChargeAnimation;                                    // 0x11B0(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
			TArray<class UAnimMontage*>                                AttackAnimations;                                        // 0x11B8(0x0010) Edit, ZeroConstructor, DisableEditOnInstance
			TArray<float>                                              AttackAnimationWeights;                                  // 0x11C8(0x0010) Edit, ZeroConstructor, DisableEditOnInstance
			TArray<float>                                              AttackAnimationsTimeFromEndToConsiderFinished;           // 0x11D8(0x0010) Edit, ZeroConstructor, DisableEditOnInstance
			unsigned char                                              bAttackStopsMovement : 1;                                // 0x11E8(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
			unsigned char                                              bLocationBasedAttack : 1;                                // 0x11E8(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
			unsigned char                                              bTamedWanderHarvestAllowUsableHarvestingAsWell : 1;      // 0x11E8(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
			unsigned char                                              bUseBPKilledSomethingEvent : 1;                          // 0x11E8(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
			unsigned char                                              bPreventDinoResetAffinityOnUnsleep : 1;                  // 0x11E8(0x0001) BIT_FIELD Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor
			unsigned char                                              bKeepInventoryForWakingTame : 1;                         // 0x11E8(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
			unsigned char                                              UnknownData_GVQD : 1;                                    // 0x11E8(0x0001) BIT_FIELD (PADDING)
			unsigned char                                              bHadLinkedSupplyCrate : 1;                               // 0x11E8(0x0001) BIT_FIELD SaveGame, NoDestructor
			unsigned char                                              UnknownData_WQQP : 2;                                    // 0x11E9(0x0001) BIT_FIELD (PADDING)
			unsigned char                                              bHiddenForLocalPassenger : 1;                            // 0x11E9(0x0001) BIT_FIELD Transient, NoDestructor
			unsigned char                                              bRunCheckCarriedTrace : 1;                               // 0x11E9(0x0001) BIT_FIELD Transient, NoDestructor
			unsigned char                                              CanElevate : 1;                                          // 0x11E9(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
			unsigned char                                              UnknownData_2U3N : 3;                                    // 0x11E9(0x0001) BIT_FIELD (PADDING)
			unsigned char                                              bTamedWanderCorpseHarvesting : 1;                        // 0x11EA(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
			unsigned char                                              bUseBPNotifyStructurePlacedNearby : 1;                   // 0x11EA(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
			unsigned char                                              bUseBPCanTargetCorpse : 1;                               // 0x11EA(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
			unsigned char                                              bUseBPShouldForceFlee : 1;                               // 0x11EA(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
			unsigned char                                              UnknownData_RUBS : 1;                                    // 0x11EA(0x0001) BIT_FIELD (PADDING)
			unsigned char                                              bForceWanderOverrideNPCZoneManager : 1;                  // 0x11EA(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
			unsigned char                                              bDeprecateDino : 1;                                      // 0x11EA(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
			unsigned char                                              bForceFoodItemAutoConsume : 1;                           // 0x11EA(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
			unsigned char                                              bFlyerAllowFlyingWithExplosive : 1;                      // 0x11EB(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
			unsigned char                                              bForceUseDediAttackTiming : 1;                           // 0x11EB(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
			unsigned char                                              bForcePreventExitingWater : 1;                           // 0x11EB(0x0001) BIT_FIELD Transient, SaveGame, NoDestructor
			unsigned char                                              bWakingTameConsumeEntireStack : 1;                       // 0x11EB(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
			float                                                      ColorizationIntensity;                                   // 0x11EC(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
			unsigned char                                              bAllowCarryCharacterWithoutRider : 1;                    // 0x11F0(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
			unsigned char                                              bWildDinoPreventWeight : 1;                              // 0x11F0(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
			unsigned char                                              bDebugMeleeAttacks : 1;                                  // 0x11F0(0x0001) BIT_FIELD BlueprintVisible, NoDestructor
			unsigned char                                              bRetainCarriedCharacterOnDismount : 1;                   // 0x11F0(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
			unsigned char                                              bUseBPOnTamedProcessOrder : 1;                           // 0x11F0(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
			unsigned char                                              bUseBP_OnTamedOrderReceived : 1;                         // 0x11F0(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
			unsigned char                                              bAllowAttackWithCryoSickness : 1;                        // 0x11F0(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
			unsigned char                                              bUseBPCanCryo : 1;                                       // 0x11F0(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
			unsigned char                                              bWildPreventTeleporting : 1;                             // 0x11F1(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
			unsigned char                                              bUseBPClampMaxHarvestHealth : 1;                         // 0x11F1(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
			unsigned char                                              bForceUseAltAimSocketsForTurrets : 1;                    // 0x11F1(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
			unsigned char                                              bUseBPBecameNewBaby : 1;                                 // 0x11F1(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
			unsigned char                                              bTryAlwaysApplyCryoSickness : 1;                         // 0x11F1(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
			unsigned char                                              bUseBPSetSimulatedInterpRollOverride : 1;                // 0x11F1(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
			unsigned char                                              bUseBPSetInitialAimOffsetTargets : 1;                    // 0x11F1(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
			unsigned char                                              bConsoleIgnoreSafeZonesForCrosshair : 1;                 // 0x11F1(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
			unsigned char                                              bForceDrawCrosshairWhenHUDIsHidden : 1;                  // 0x11F2(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
			unsigned char                                              bUseBPCanLand : 1;                                       // 0x11F2(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
			unsigned char                                              UnknownData_XGX3[0x5];                                   // 0x11F3(0x0005) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
			TArray<class UMaterialInterface*>                          FemaleMaterialOverrides;                                 // 0x11F8(0x0010) Edit, ZeroConstructor, DisableEditOnInstance
			unsigned char                                              bUseBPCheckCanSpawnFromLocation : 1;                     // 0x1208(0x0001) BIT_FIELD Edit, NoDestructor
			unsigned char                                              UnknownData_XZBA[0x3];                                   // 0x1209(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
			float                                                      PaintConsumptionMultiplier;                              // 0x120C(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
			float                                                      ChargingBlockedStopTimeThreshold;                        // 0x1210(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
			unsigned char                                              UnknownData_3Q86[0x4];                                   // 0x1214(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
			TArray<class FName>                                        MeleeSwingSockets;                                       // 0x1218(0x0010) Edit, ZeroConstructor, DisableEditOnInstance
			int32_t                                                    MeleeDamageAmount;                                       // 0x1228(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
			float                                                      MeleeDamageImpulse;                                      // 0x122C(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
			float                                                      MeleeSwingRadius;                                        // 0x1230(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
			unsigned char                                              UnknownData_EV63[0x4];                                   // 0x1234(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
			TArray<struct FDinoAttackInfo>                             AttackInfos;                                             // 0x1238(0x0010) Edit, ZeroConstructor, DisableEditOnInstance
			unsigned char                                              CurrentAttackIndex;                                      // 0x1248(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor
			unsigned char                                              LastAttackIndex;                                         // 0x1249(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor
			unsigned char                                              UnknownData_QWP4[0x6];                                   // 0x124A(0x0006) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
			class UClass* MeleeDamageType;                                         // 0x1250(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
			class UClass* StepActorDamageTypeOverride;                             // 0x1258(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
			float                                                      AttackOffset;                                            // 0x1260(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
			float                                                      FleeHealthPercentage;                                    // 0x1264(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
			float                                                      BreakFleeHealthPercentage;                               // 0x1268(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
			unsigned char                                              UnknownData_LVVC[0x4];                                   // 0x126C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
			class FString                                              TamerString;                                             // 0x1270(0x0010) BlueprintVisible, Net, ZeroConstructor, Transient, SaveGame, NativeAccessSpecifierPublic
			class FString                                              TamedName;                                               // 0x1280(0x0010) BlueprintVisible, Net, ZeroConstructor, Transient, SaveGame, NativeAccessSpecifierPublic
			TArray<struct FHibernationZoneInfo>                        HibernatedZoneVolumes;                                   // 0x1290(0x0010) ZeroConstructor, Transient, SaveGame, NativeAccessSpecifierPublic
			struct FVector2D                                           OverlayTooltipPadding;                                   // 0x12A0(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
			struct FVector2D                                           OverlayTooltipScale;                                     // 0x12A8(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
			class UClass* HUDOverlayToolTipWidget;                                 // 0x12B0(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
			class UClass* MyDinoEntry;                                             // 0x12B8(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor
			struct FVector                                             RiderFPVCameraOffset;                                    // 0x12C0(0x000C) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
			unsigned char                                              UnknownData_UZ7K[0x24];                                  // 0x12CC(0x0024) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
			float                                                      FinalNPCLevelMultiplier;                                 // 0x12F0(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
			float                                                      LandingTraceMaxDistance;                                 // 0x12F4(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
			float                                                      FlyingWanderFixedDistanceAmount;                         // 0x12F8(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
			float                                                      FlyingWanderRandomDistanceAmount;                        // 0x12FC(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
			float                                                      AcceptableLandingRadius;                                 // 0x1300(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
			float                                                      MaxLandingTime;                                          // 0x1304(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
			float                                                      GenderSpeedMultipliers[0x2];                             // 0x1308(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
			float                                                      ChargeSpeedMultiplier;                                   // 0x1310(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
			unsigned char                                              UnknownData_WCN0[0x4];                                   // 0x1314(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
			class UAnimMontage* ChargingAnim;                                            // 0x1318(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
			float                                                      ChargingStaminaPerSecondDrain;                           // 0x1320(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
			float                                                      ChargingStopDotTreshold;                                 // 0x1324(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
			unsigned char                                              UnknownData_H8HO[0x18];                                  // 0x1328(0x0018) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
			TWeakObjectPtr<class AShooterCharacter>                    Rider;                                                   // 0x1340(0x0008) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor
			TWeakObjectPtr<class AShooterCharacter>                    PreviousRider;                                           // 0x1348(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor
			class UClass* SaddleItemClass;                                         // 0x1350(0x0008) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor
			class FString                                              SaddleSlotNameOverride;                                  // 0x1358(0x0010) Edit, ZeroConstructor, DisableEditOnInstance
			TArray<struct FSaddlePassengerSeatDefinition>              NoSaddlePassengerSeats;                                  // 0x1368(0x0010) Edit, ZeroConstructor, DisableEditOnInstance
			TWeakObjectPtr<class APrimalCharacter>                     CarriedCharacter;                                        // 0x1378(0x0008) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor
			unsigned char                                              UnknownData_0JHP[0x8];                                   // 0x1380(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
			class UAnimMontage* DinoWithPassengerAnim;                                   // 0x1388(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
			class UAnimMontage* DinoWithDinoPassengerAnim;                               // 0x1390(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
			TArray<TWeakObjectPtr<class APrimalCharacter>>             PassengerPerSeat;                                        // 0x1398(0x0010) Net, ZeroConstructor, Transient, RepNotify
			TArray<class APrimalCharacter*>                            SavedPassengerPerSeat;                                   // 0x13A8(0x0010) ZeroConstructor, Transient, SaveGame
			unsigned char                                              UnknownData_AVJL[0x10];                                  // 0x13B8(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
			double                                                     LastClientCameraRotationServerUpdate;                    // 0x13C8(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor
			TArray<class USceneComponent*>                             OverrideTargetComponents;                                // 0x13D0(0x0010) ExportObject, ZeroConstructor, Transient, ContainsInstancedReference
			float                                                      WhistleTraceOffset;                                      // 0x13E0(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
			unsigned char                                              UnknownData_UGY7[0x10];                                  // 0x13E4(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
			int32_t                                                    LastPlayedAttackAnimation;                               // 0x13F4(0x0004) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected
			unsigned char                                              AttackIndexOfPlayedAnimation;                            // 0x13F8(0x0001) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected
			unsigned char                                              UnknownData_339C[0x7];                                   // 0x13F9(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
			TArray<struct FDinoBaseLevelWeightEntry>                   DinoBaseLevelWeightEntries;                              // 0x1400(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, Protected
			unsigned char                                              UnknownData_WT3U[0x70];                                  // 0x1410(0x0070) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
			struct FVector                                             RidingFirstPersonViewLocationOffset;                     // 0x1480(0x000C) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
			unsigned char                                              bIsLanding : 1;                                          // 0x148C(0x0001) BIT_FIELD BlueprintVisible, NoDestructor
			unsigned char                                              bCanCharge : 1;                                          // 0x148C(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
			unsigned char                                              bCancelInterpolation : 1;                                // 0x148C(0x0001) BIT_FIELD BlueprintVisible, Transient, NoDestructor
			unsigned char                                              bIsCharging : 1;                                         // 0x148C(0x0001) BIT_FIELD BlueprintVisible, BlueprintReadOnly, Net, Transient, RepNotify, NoDestructor
			unsigned char                                              bChargeDamageStructures : 1;                             // 0x148C(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
			unsigned char                                              bReplicatePitchWhileSwimming : 1;                        // 0x148C(0x0001) BIT_FIELD Edit, NoDestructor
			unsigned char                                              bIsFlying : 1;                                           // 0x148C(0x0001) BIT_FIELD BlueprintVisible, BlueprintReadOnly, Net, Transient, SaveGame, RepNotify, NoDestructor
			unsigned char                                              bIsWakingTame : 1;                                       // 0x148C(0x0001) BIT_FIELD Net, Transient, SaveGame, NoDestructor
			unsigned char                                              bAllowRiding : 1;                                        // 0x148D(0x0001) BIT_FIELD Edit, NoDestructor
			unsigned char                                              bForceAutoTame : 1;                                      // 0x148D(0x0001) BIT_FIELD Edit, DisableEditOnTemplate, NoDestructor
			unsigned char                                              bRiderJumpTogglesFlight : 1;                             // 0x148D(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
			unsigned char                                              bHasRider : 1;                                           // 0x148D(0x0001) BIT_FIELD Transient, NoDestructor
			unsigned char                                              bAllowCarryFlyerDinos : 1;                               // 0x148D(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
			unsigned char                                              UnknownData_XLEC : 1;                                    // 0x148D(0x0001) BIT_FIELD (PADDING)
			unsigned char                                              bFlyerForceNoPitch : 1;                                  // 0x148D(0x0001) BIT_FIELD Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor
			unsigned char                                              bFlyerForceLimitPitch : 1;                               // 0x148D(0x0001) BIT_FIELD Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor
			unsigned char                                              bPreventStasis : 1;                                      // 0x148E(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
			unsigned char                                              bAutoTameable : 1;                                       // 0x148E(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
			unsigned char                                              bAlwaysSetTamingTeamOnItemAdd : 1;                       // 0x148E(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
			unsigned char                                              UnknownData_J9SW : 1;                                    // 0x148E(0x0001) BIT_FIELD (PADDING)
			unsigned char                                              bCheatForceTameRide : 1;                                 // 0x148E(0x0001) BIT_FIELD Net, Transient, SaveGame, NoDestructor, NativeAccessSpecifierPublic
			unsigned char                                              bIsFemale : 1;                                           // 0x148E(0x0001) BIT_FIELD Net, Transient, SaveGame, NoDestructor, NativeAccessSpecifierPublic
			unsigned char                                              bRiderUseDirectionalAttackIndex : 1;                     // 0x148E(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
			unsigned char                                              bCanBeTamed : 1;                                         // 0x148E(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
			unsigned char                                              bTargetingIgnoredByWildDinos : 1;                        // 0x148F(0x0001) BIT_FIELD Edit, DisableEditOnInstance, SaveGame, NoDestructor
			unsigned char                                              bTargetingIgnoreWildDinos : 1;                           // 0x148F(0x0001) BIT_FIELD Edit, DisableEditOnInstance, SaveGame, NoDestructor
			unsigned char                                              bCanMountOnHumans : 1;                                   // 0x148F(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
			unsigned char                                              bIKIgnoreSaddleStructures : 1;                           // 0x148F(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
			unsigned char                                              bAttackTargetWhenLaunched : 1;                           // 0x148F(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
			unsigned char                                              bCanOpenLockedDoors : 1;                                 // 0x148F(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
			unsigned char                                              bUseColorization : 1;                                    // 0x148F(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
			unsigned char                                              bMeleeSwingDamageBlockedByStrutures : 1;                 // 0x148F(0x0001) BIT_FIELD Edit, NoDestructor
			float                                                      BabyChanceOfTwins;                                       // 0x1490(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
			unsigned char                                              bAllowTargetingCorpses : 1;                              // 0x1494(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
			unsigned char                                              bRiderDontRequireSaddle : 1;                             // 0x1494(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
			unsigned char                                              bAllowsFishingOnSaddle : 1;                              // 0x1494(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
			unsigned char                                              bCanBeOrdered : 1;                                       // 0x1494(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
			unsigned char                                              bOverridePlatformStructureLimit : 1;                     // 0x1494(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
			unsigned char                                              bMeleeAttackHarvetUsableComponents : 1;                  // 0x1494(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
			unsigned char                                              bPlatformSaddleIgnoreRotDotCheck : 1;                    // 0x1494(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
			unsigned char                                              bUseInteprolatedVelocity : 1;                            // 0x1494(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
			unsigned char                                              bIsCarnivore : 1;                                        // 0x1495(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
			unsigned char                                              bAllowRidingInWater : 1;                                 // 0x1495(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
			unsigned char                                              bUsesGender : 1;                                         // 0x1495(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
			unsigned char                                              bTargetEverything : 1;                                   // 0x1495(0x0001) BIT_FIELD Edit, BlueprintVisible, NoDestructor
			unsigned char                                              bTamedWanderHarvestNonUsableHarvesting : 1;              // 0x1495(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
			unsigned char                                              bEnableTamedWandering : 1;                               // 0x1495(0x0001) BIT_FIELD BlueprintVisible, Net, Transient, SaveGame, NoDestructor
			unsigned char                                              bEnableTamedMating : 1;                                  // 0x1495(0x0001) BIT_FIELD BlueprintVisible, Net, Transient, SaveGame, NoDestructor
			unsigned char                                              bCollectVictimItems : 1;                                 // 0x1495(0x0001) BIT_FIELD Net, Transient, SaveGame, NoDestructor
			unsigned char                                              bServerInitializedDino : 1;                              // 0x1496(0x0001) BIT_FIELD SaveGame, NoDestructor, NativeAccessSpecifierPublic
			unsigned char                                              UnknownData_6RZU : 1;                                    // 0x1496(0x0001) BIT_FIELD (PADDING)
			unsigned char                                              bHasMateBoost : 1;                                       // 0x1496(0x0001) BIT_FIELD BlueprintVisible, BlueprintReadOnly, NoDestructor
			unsigned char                                              UnknownData_WI7X : 1;                                    // 0x1496(0x0001) BIT_FIELD (PADDING)
			unsigned char                                              bTamingHasFood : 1;                                      // 0x1496(0x0001) BIT_FIELD Net, Transient, NoDestructor
			unsigned char                                              bDontWander : 1;                                         // 0x1496(0x0001) BIT_FIELD Edit, Transient, DisableEditOnInstance, SaveGame, NoDestructor, NativeAccessSpecifierPublic
			unsigned char                                              bAnimIsMoving : 1;                                       // 0x1496(0x0001) BIT_FIELD BlueprintVisible, NoDestructor
			unsigned char                                              bDoStepDamage : 1;                                       // 0x1496(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
			unsigned char                                              bPreventBasingWhenUntamed : 1;                           // 0x1497(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
			unsigned char                                              bForceAlwaysAllowBasing : 1;                             // 0x1497(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
			unsigned char                                              bChargingRequiresWalking : 1;                            // 0x1497(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
			unsigned char                                              bUseRootLocSwimOffset : 1;                               // 0x1497(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
			unsigned char                                              UnknownData_ZUCQ : 1;                                    // 0x1497(0x0001) BIT_FIELD (PADDING)
			unsigned char                                              bDisplaySummonedNotification : 1;                        // 0x1497(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
			unsigned char                                              bDisplayKilledNotification : 1;                          // 0x1497(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
			unsigned char                                              bUseBPGetAttackWeight : 1;                               // 0x1497(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
			float                                                      BabyGestationSpeed;                                      // 0x1498(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
			unsigned char                                              bServerForceUpdateDinoGameplayMeshNearPlayer : 1;        // 0x149C(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
			unsigned char                                              bPreventAllRiderWeapons : 1;                             // 0x149C(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
			unsigned char                                              bPreventAllRiderWeaponsOnReequip : 1;                    // 0x149C(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
			unsigned char                                              bAllowDeathAutoGrab : 1;                                 // 0x149C(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
			unsigned char                                              bSupportWakingTame : 1;                                  // 0x149C(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
			unsigned char                                              bAllowAutoUnstasisDestroy : 1;                           // 0x149C(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
			unsigned char                                              bDebugBaby : 1;                                          // 0x149C(0x0001) BIT_FIELD Edit, NoDestructor
			unsigned char                                              bAlwaysUpdateAimOffsetInterpolation : 1;                 // 0x149C(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
			unsigned char                                              WildAmbientHarvestingAnimationServerTickPose : 1;        // 0x149D(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
			unsigned char                                              bPreventSleepingTame : 1;                                // 0x149D(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
			unsigned char                                              bTamedWanderHarvest : 1;                                 // 0x149D(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
			unsigned char                                              bSimulatedNetLandCheckFloor : 1;                         // 0x149D(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
			unsigned char                                              bRefreshedColorization : 1;                              // 0x149D(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
			unsigned char                                              UnknownData_B84K : 3;                                    // 0x149D(0x0001) BIT_FIELD (PADDING)
			unsigned char                                              UnknownData_S9UH : 3;                                    // 0x149E(0x0001) BIT_FIELD (PADDING)
			unsigned char                                              bFlyerPreventRiderAutoFly : 1;                           // 0x149E(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
			unsigned char                                              bAllowFlyerLandedRider : 1;                              // 0x149E(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
			unsigned char                                              bPreventFlyerFlyingRider : 1;                            // 0x149E(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
			unsigned char                                              bPreventFlyerCapsuleExpansion : 1;                       // 0x149E(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
			unsigned char                                              bIncludeCarryWeightOfBasedPawns : 1;                     // 0x149E(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
			unsigned char                                              bForceRiderNetworkParent : 1;                            // 0x149F(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
			unsigned char                                              bForcePerfectTame : 1;                                   // 0x149F(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
			unsigned char                                              bCanHaveBaby : 1;                                        // 0x149F(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
			unsigned char                                              bUseBabyGestation : 1;                                   // 0x149F(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
			unsigned char                                              bPreventUnalignedDinoBasing : 1;                         // 0x149F(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
			unsigned char                                              bOverrideLevelMusicIfTamed : 1;                          // 0x149F(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
			unsigned char                                              bReachedMaxStructures : 1;                               // 0x149F(0x0001) BIT_FIELD Net, NoDestructor
			float                                                      ExtraBabyGestationSpeedMultiplier;                       // 0x14A0(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
			unsigned char                                              bSupportsSaddleStructures : 1;                           // 0x14A4(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
			unsigned char                                              bBonesHidden : 1;                                        // 0x14A4(0x0001) BIT_FIELD Net, Transient, SaveGame, RepNotify, NoDestructor
			unsigned char                                              UnknownData_N2F2 : 1;                                    // 0x14A4(0x0001) BIT_FIELD (PADDING)
			unsigned char                                              bCanBeRepaired : 1;                                      // 0x14A4(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
			unsigned char                                              bFlyerDontAutoLandOnDismount : 1;                        // 0x14A4(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
			unsigned char                                              bIsRepairing : 1;                                        // 0x14A4(0x0001) BIT_FIELD Net, Transient, NoDestructor
			unsigned char                                              bIsBaby : 1;                                             // 0x14A4(0x0001) BIT_FIELD BlueprintVisible, Net, Transient, SaveGame, NoDestructor, NativeAccessSpecifierPublic
			unsigned char                                              UnknownData_ANDZ : 1;                                    // 0x14A4(0x0001) BIT_FIELD (PADDING)
			unsigned char                                              bCanUnclaimTame : 1;                                     // 0x14A5(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
			unsigned char                                              bAllowWildDinoEquipment : 1;                             // 0x14A5(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
			unsigned char                                              bUseTamedVisibleComponents : 1;                          // 0x14A5(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
			unsigned char                                              bAllowDemolish : 1;                                      // 0x14A5(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
			unsigned char                                              bUseGang : 1;                                            // 0x14A5(0x0001) BIT_FIELD Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor
			unsigned char                                              bBlueprintDrawFloatingHUD : 1;                           // 0x14A5(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
			unsigned char                                              bEggBoosted : 1;                                         // 0x14A5(0x0001) BIT_FIELD Net, Transient, NoDestructor
			unsigned char                                              bUseBPTamedTick : 1;                                     // 0x14A5(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
			unsigned char                                              bUseBPOverrideWantsToRun : 1;                            // 0x14A6(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
			unsigned char                                              bUseBPPlayDying : 1;                                     // 0x14A6(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
			unsigned char                                              bSupportsPassengerSeats : 1;                             // 0x14A6(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
			unsigned char                                              bAddPassengerSeatMultiUseEntries : 1;                    // 0x14A6(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
			unsigned char                                              bUseSaddlePassengerSeatsWhenAvailable : 1;               // 0x14A6(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
			unsigned char                                              bScaleInsulationByMeleeDamage : 1;                       // 0x14A6(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
			unsigned char                                              bInventoryOnlyAllowCraftingWhenWandering : 1;            // 0x14A6(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
			unsigned char                                              bUseWildRandomScale : 1;                                 // 0x14A6(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
			unsigned char                                              bHeldJumpSlowFalling : 1;                                // 0x14A7(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
			unsigned char                                              bIsHeldJumpSlowFalling : 1;                              // 0x14A7(0x0001) BIT_FIELD Net, Transient, NoDestructor
			unsigned char                                              UnknownData_WJUO : 1;                                    // 0x14A7(0x0001) BIT_FIELD (PADDING)
			unsigned char                                              bTriggerBPUnstasis : 1;                                  // 0x14A7(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
			unsigned char                                              bWildProduceEggDynamically : 1;                          // 0x14A7(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
			unsigned char                                              bPreventWakingTameFeeding : 1;                           // 0x14A7(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
			unsigned char                                              bForceDisablingTaming : 1;                               // 0x14A7(0x0001) BIT_FIELD Transient, SaveGame, NoDestructor
			float                                                      AutoFadeOutAfterTameTime;                                // 0x14A8(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
			unsigned char                                              bFlyerAllowRidingInCaves : 1;                            // 0x14AC(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
			unsigned char                                              bScaleExtraRunningSpeedModifier : 1;                     // 0x14AC(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
			unsigned char                                              bOverrideCrosshairAlpha : 1;                             // 0x14AC(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
			unsigned char                                              bOverrideCrosshairColor : 1;                             // 0x14AC(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
			unsigned char                                              bUseBPGetCrosshairLocation : 1;                          // 0x14AC(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
			unsigned char                                              bOverrideCrosshairSpread : 1;                            // 0x14AC(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
			unsigned char                                              bCenterOffscreenFloatingHUDWidgets : 1;                  // 0x14AC(0x0001) BIT_FIELD Edit, NoDestructor
			unsigned char                                              bClampOffscreenFloatingHUDWidgets : 1;                   // 0x14AC(0x0001) BIT_FIELD Edit, NoDestructor
			unsigned char                                              bUseFixedSpawnLevel : 1;                                 // 0x14AD(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
			unsigned char                                              bTreatCrouchInputAsAttack : 1;                           // 0x14AD(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
			unsigned char                                              bUseBPGetRiderUnboardLocation : 1;                       // 0x14AD(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
			unsigned char                                              bUseBPGetRiderUnboardDirection : 1;                      // 0x14AD(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
			unsigned char                                              bUniqueDino : 1;                                         // 0x14AD(0x0001) BIT_FIELD BlueprintVisible, NoDestructor
			unsigned char                                              bModifyBasedCamera : 1;                                  // 0x14AD(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
			unsigned char                                              bUseBPOnRefreshColorization : 1;                         // 0x14AD(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
			unsigned char                                              bHideAncestorsButton : 1;                                // 0x14AD(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
			unsigned char                                              bUseBP_OverrideDinoName : 1;                             // 0x14AE(0x0001) BIT_FIELD Edit, NoDestructor
			unsigned char                                              bUseBPDinoTooltipCustomProgressBar : 1;                  // 0x14AE(0x0001) BIT_FIELD Edit, NoDestructor
			unsigned char                                              bUseBPDisplayTamedMessage : 1;                           // 0x14AE(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
			unsigned char                                              bUseBPOverrideTamingDescriptionLabel : 1;                // 0x14AE(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
			unsigned char                                              bUseBPCanMountOnCharacter : 1;                           // 0x14AE(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
			unsigned char                                              bIsNursingDino : 1;                                      // 0x14AE(0x0001) BIT_FIELD Edit, NoDestructor
			unsigned char                                              bIsNursing : 1;                                          // 0x14AE(0x0001) BIT_FIELD Edit, Net, SaveGame, NoDestructor
			unsigned char                                              bUseBPGetRiderSocket : 1;                                // 0x14AE(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
			unsigned char                                              bUseBPShowTamingPanel : 1;                               // 0x14AF(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
			unsigned char                                              bFlyerPrioritizeAllyMountToCarry : 1;                    // 0x14AF(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
			unsigned char                                              bUseBPOverrideMutationLabels : 1;                        // 0x14AF(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
			unsigned char                                              bPreventMovementModeChangeForDinoPassengers : 1;         // 0x14AF(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
			unsigned char                                              bPreventRiderImmobilization : 1;                         // 0x14AF(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
			float                                                      BasedCameraSpeedMultiplier;                              // 0x14B0(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
			unsigned char                                              UnknownData_PF54[0x4];                                   // 0x14B4(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
			double                                                     LastEggBoostedTime;                                      // 0x14B8(0x0008) BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor
			float                                                      WildPercentageChanceOfBaby;                              // 0x14C0(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
			float                                                      WildBabyAgeWeight;                                       // 0x14C4(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
			float                                                      BabyGestationProgress;                                   // 0x14C8(0x0004) Net, ZeroConstructor, Transient, SaveGame, IsPlainOldData, NoDestructor
			float                                                      FlyerForceLimitPitchMin;                                 // 0x14CC(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
			float                                                      FlyerForceLimitPitchMax;                                 // 0x14D0(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
			unsigned char                                              UnknownData_PT0J[0x8];                                   // 0x14D4(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
			float                                                      BabyChanceOfTriplets;                                    // 0x14DC(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
			float                                                      BabyAge;                                                 // 0x14E0(0x0004) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, Transient, SaveGame, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
			float                                                      MaxPercentOfCapsulHeightAllowedForIK;                    // 0x14E4(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
			float                                                      SlopeBiasForMaxCapsulePercent;                           // 0x14E8(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
			float                                                      FlyingForceRotationRateModifier;                         // 0x14EC(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
			TArray<class FName>                                        HideBoneNames;                                           // 0x14F0(0x0010) Edit, ZeroConstructor, DisableEditOnInstance
			class FString                                              HideBonesString;                                         // 0x1500(0x0010) Edit, ZeroConstructor, DisableEditOnInstance
			struct FVector                                             WaterSurfaceExtraJumpVector;                             // 0x1510(0x000C) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
			struct FVector                                             FlyerTakeOffAdditionalVelocity;                          // 0x151C(0x000C) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
			float                                                      OpenDoorDelay;                                           // 0x1528(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
			float                                                      TamedWanderHarvestInterval;                              // 0x152C(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
			float                                                      TamedWanderHarvestSearchRange;                           // 0x1530(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
			float                                                      TamedWanderHarvestCollectRadius;                         // 0x1534(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
			struct FVector                                             TamedWanderHarvestCollectOffset;                         // 0x1538(0x000C) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
			float                                                      RootLocSwimOffset;                                       // 0x1544(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
			float                                                      PlayAnimBelowHealthPercent;                              // 0x1548(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
			float                                                      LeavePlayAnimBelowHealthPercent;                         // 0x154C(0x0004) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
			float                                                      PlatformSaddleMaxStructureBuildDistance2D;               // 0x1550(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
			unsigned char                                              UnknownData_3BED[0x4];                                   // 0x1554(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
			class UAnimMontage* PlayAnimBelowHealth;                                     // 0x1558(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
			class USoundBase* LowHealthExitSound;                                      // 0x1560(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
			class USoundBase* LowHealthEnterSound;                                     // 0x1568(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
			class UClass* LowHealthDinoSettings;                                   // 0x1570(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
			float                                                      SwimOffsetInterpSpeed;                                   // 0x1578(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
			unsigned char                                              UnknownData_N91I[0x4];                                   // 0x157C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
			float                                                      AIRangeMultiplier;                                       // 0x1580(0x0004) ZeroConstructor, Transient, SaveGame, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
			unsigned char                                              PreventColorizationRegions[0x6];                         // 0x1584(0x0006) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
			unsigned char                                              AllowPaintingColorRegions[0x6];                          // 0x158A(0x0006) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
			unsigned char                                              ColorSetIndices[0x6];                                    // 0x1590(0x0006) Net, ZeroConstructor, Transient, SaveGame, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
			unsigned char                                              UnknownData_KGCB[0x2];                                   // 0x1596(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
			class FName                                                ColorSetNames[0x6];                                      // 0x1598(0x0030) ZeroConstructor, Transient, SaveGame, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
			float                                                      ColorSetIntensityMultipliers[0x6];                       // 0x15C8(0x0018) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
			TWeakObjectPtr<class APrimalBuff>                          ColorOverrideBuff;                                       // 0x15E0(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor
			unsigned char                                              UnknownData_FTK3[0xC];                                   // 0x15E8(0x000C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
			float                                                      MeleeAttackStaminaCost;                                  // 0x15F4(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
			class UAnimMontage* WakingTameAnimation;                                     // 0x15F8(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
			TWeakObjectPtr<class AActor>                               Target;                                                  // 0x1600(0x0008) Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor
			TWeakObjectPtr<class AActor>                               TamedFollowTarget;                                       // 0x1608(0x0008) Net, ZeroConstructor, Transient, SaveGame, IsPlainOldData, NoDestructor
			TWeakObjectPtr<class AActor>                               TamedLandTarget;                                         // 0x1610(0x0008) Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor
			float                                                      PercentChanceFemale;                                     // 0x1618(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
			unsigned char                                              UnknownData_LYMR[0x4];                                   // 0x161C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
			TArray<class UClass*>                                      DeathGiveItemClasses;                                    // 0x1620(0x0010) Edit, ZeroConstructor, DisableEditOnInstance
			TArray<float>                                              DeathGiveItemChanceToBeBlueprint;                        // 0x1630(0x0010) Edit, ZeroConstructor, DisableEditOnInstance
			float                                                      DeathGiveItemQualityMin;                                 // 0x1640(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
			float                                                      DeathGiveItemQualityMax;                                 // 0x1644(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
			float                                                      DeathGiveItemRange;                                      // 0x1648(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
			unsigned char                                              UnknownData_VNL9[0x4];                                   // 0x164C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
			class FString                                              DeathGiveAchievement;                                    // 0x1650(0x0010) Edit, ZeroConstructor, DisableEditOnInstance
			class USoundBase* OverrideAreaMusic;                                       // 0x1660(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
			struct FVector                                             UnboardLocationOffset;                                   // 0x1668(0x000C) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
			unsigned char                                              UnknownData_0PNO[0x14];                                  // 0x1674(0x0014) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
			float                                                      RidingNetUpdateFequency;                                 // 0x1688(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
			float                                                      RiderMaxSpeedModifier;                                   // 0x168C(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
			float                                                      RiderExtraMaxSpeedModifier;                              // 0x1690(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
			float                                                      RiderMaxRunSpeedModifier;                                // 0x1694(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
			float                                                      RiderRotationRateModifier;                               // 0x1698(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
			float                                                      SwimmingRotationRateModifier;                            // 0x169C(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
			float                                                      chargingRotationRateModifier;                            // 0x16A0(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
			unsigned char                                              UnknownData_HN2C[0x4];                                   // 0x16A4(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
			class UAnimMontage* EnterFlightAnim;                                         // 0x16A8(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
			class UAnimMontage* ExitFlightAnim;                                          // 0x16B0(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
			class UAnimMontage* SleepConsumeFoodAnim;                                    // 0x16B8(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
			class UAnimMontage* WakingConsumeFoodAnim;                                   // 0x16C0(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
			class UAnimMontage* FallAsleepAnim;                                          // 0x16C8(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
			class UAnimMontage* TamedUnsleepAnim;                                        // 0x16D0(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
			class UAnimMontage* WildUnsleepAnim;                                         // 0x16D8(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
			class UAnimMontage* OpenDoorAnim;                                            // 0x16E0(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
			float                                                      ControlFacePitchInterpSpeed;                             // 0x16E8(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
			float                                                      TamedWalkableFloorZ;                                     // 0x16EC(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
			float                                                      CurrentMovementAnimRate;                                 // 0x16F0(0x0004) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
			int32_t                                                    MinPlayerLevelForWakingTame;                             // 0x16F4(0x0004) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
			unsigned char                                              UnknownData_72K2[0x8];                                   // 0x16F8(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
			class UClass* TamedInventoryComponentTemplate;                         // 0x1700(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
			PAD(0x20);// struct FWeightedObjectList                                 DeathInventoryTemplates;                                 // 0x1708(0x0020) Edit, DisableEditOnInstance
			float                                                      DeathInventoryChanceToUse;                               // 0x1728(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
			float                                                      WakingTameFeedInterval;                                  // 0x172C(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
			unsigned char                                              UnknownData_H052[0x8];                                   // 0x1730(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
			float                                                      DeathInventoryQualityPerLevelMultiplier;                 // 0x1738(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
			float                                                      RequiredTameAffinity;                                    // 0x173C(0x0004) Edit, Net, ZeroConstructor, DisableEditOnInstance, SaveGame, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
			float                                                      RequiredTameAffinityPerBaseLevel;                        // 0x1740(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
			unsigned char                                              TamedAITargetingRange;                                   // 0x1744(0x0001) Net, ZeroConstructor, Transient, SaveGame, IsPlainOldData, NoDestructor
			unsigned char                                              bMeleeSwingDamageBlockedByAllStationaryObjects : 1;      // 0x1745(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
			unsigned char                                              bUseBPChargingModifyInputAcceleration : 1;               // 0x1745(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
			unsigned char                                              bUseBPOnRepIsCharging : 1;                               // 0x1745(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
			unsigned char                                              bUseBPPreventOrderAllowed : 1;                           // 0x1745(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
			unsigned char                                              bPassengerDinosUsePassengerAnim : 1;                     // 0x1745(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
			unsigned char                                              bUsesPassengerAnimOnDinos : 1;                           // 0x1745(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
			unsigned char                                              bOverrideRotationOnCarriedCharacter : 1;                 // 0x1745(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
			unsigned char                                              bAdvancedCarryRelease : 1;                               // 0x1745(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
			unsigned char                                              bForceCarriedPlayerToCheckForWalls : 1;                  // 0x1746(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
			unsigned char                                              bClearRiderOnDinoImmobilized : 1;                        // 0x1746(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
			unsigned char                                              bUseBPIsBasedOnActor : 1;                                // 0x1746(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
			unsigned char                                              bUseBPModifyControlRotation : 1;                         // 0x1746(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
			unsigned char                                              bUseBPOnDinoFiredProjectile : 1;                         // 0x1746(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
			unsigned char                                              bUseBPGetRidingMultiUseEntries : 1;                      // 0x1746(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
			unsigned char                                              UnknownData_KXGJ[0x1];                                   // 0x1747(0x0001) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
			class FName                                                PassengerBoneNameOverride;                               // 0x1748(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
			float                                                      CurrentTameAffinity;                                     // 0x1750(0x0004) Net, ZeroConstructor, Transient, SaveGame, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
			float                                                      TameIneffectivenessModifier;                             // 0x1754(0x0004) Edit, BlueprintVisible, Net, ZeroConstructor, Transient, DisableEditOnInstance, SaveGame, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
			float                                                      TameIneffectivenessByAffinity;                           // 0x1758(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, SaveGame, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
			unsigned char                                              UnknownData_T7KI[0x4];                                   // 0x175C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
			bool                                                       bUseBPIsValidUnStasisCaster;                             // 0x1760(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
			unsigned char                                              UnknownData_FXR6[0x7];                                   // 0x1761(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
			TArray<struct FPrimalSaddleStructure>                      SaddleStructures;                                        // 0x1768(0x0010) ZeroConstructor, SaveGame
			int32_t                                                    MaxSaddleStructuresHeight;                               // 0x1778(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
			bool                                                       CalculateStructureHeightFromSaddle;                      // 0x177C(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
			bool                                                       CalculateStructureDistanceFromSaddle;                    // 0x177D(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
			unsigned char                                              UnknownData_2GCZ[0x2];                                   // 0x177E(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
			int32_t                                                    SaddlePivotOffset;                                       // 0x1780(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
			int32_t                                                    MaxSaddleStructuresNum;                                  // 0x1784(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
			class UClass* DinoSettingsClass;                                       // 0x1788(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
			float                                                      TamingFoodConsumeInterval;                               // 0x1790(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
			float                                                      DediForceAttackAnimTime;                                 // 0x1794(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
			float                                                      DediForceStartAttackAfterAnimTime;                       // 0x1798(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
			float                                                      WakingTameFoodIncreaseMultiplier;                        // 0x179C(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
			int32_t                                                    TamingTeamID;                                            // 0x17A0(0x0004) BlueprintVisible, Net, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
			int32_t                                                    OwningPlayerID;                                          // 0x17A4(0x0004) Net, ZeroConstructor, Transient, SaveGame, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
			class FString                                              OwningPlayerName;                                        // 0x17A8(0x0010) Net, ZeroConstructor, Transient, SaveGame, NativeAccessSpecifierPublic
			double                                                     TamingLastFoodConsumptionTime;                           // 0x17B8(0x0008) ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor
			uint32_t                                                   DinoID1;                                                 // 0x17C0(0x0004) Net, ZeroConstructor, Transient, SaveGame, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
			uint32_t                                                   DinoID2;                                                 // 0x17C4(0x0004) Net, ZeroConstructor, Transient, SaveGame, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
			unsigned char                                              UnknownData_1CUR[0xC];                                   // 0x17C8(0x000C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
			int32_t                                                    TamedAggressionLevel;                                    // 0x17D4(0x0004) BlueprintVisible, Net, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
			float                                                      TamingIneffectivenessModifierIncreaseByDamagePercent;    // 0x17D8(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
			unsigned char                                              UnknownData_DEK8[0x8];                                   // 0x17DC(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
			TWeakObjectPtr<class APrimalStructureItemContainer_SupplyCrate> LinkedSupplyCrate;                                       // 0x17E4(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor
			float                                                      UntamedPoopTimeMinInterval;                              // 0x17EC(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
			float                                                      UntamedPoopTimeMaxInterval;                              // 0x17F0(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
			float                                                      MeleeHarvestDamageMultiplier;                            // 0x17F4(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
			float                                                      AllowRidingMaxDistance;                                  // 0x17F8(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
			float                                                      UntamedPoopTimeCache;                                    // 0x17FC(0x0004) ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor
			class UClass* BaseEggClass;                                            // 0x1800(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
			TArray<class UClass*>                                      EggItemsToSpawn;                                         // 0x1808(0x0010) Edit, ZeroConstructor, DisableEditOnInstance
			TArray<float>                                              EggWeightsToSpawn;                                       // 0x1818(0x0010) Edit, ZeroConstructor, DisableEditOnInstance
			TArray<class UClass*>                                      FertilizedEggItemsToSpawn;                               // 0x1828(0x0010) Edit, ZeroConstructor, DisableEditOnInstance
			TArray<float>                                              FertilizedEggWeightsToSpawn;                             // 0x1838(0x0010) Edit, ZeroConstructor, DisableEditOnInstance
			float                                                      EggChanceToSpawnUnstasis;                                // 0x1848(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
			float                                                      EggIntervalBetweenUnstasisChances;                       // 0x184C(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
			float                                                      EggRangeMaximumNumberFromSameDinoType;                   // 0x1850(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
			int32_t                                                    EggMaximumNumberFromSameDinoType;                        // 0x1854(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
			float                                                      EggRangeMaximumNumber;                                   // 0x1858(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
			int32_t                                                    EggMaximumNumber;                                        // 0x185C(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
			class FName                                                EggSpawnSocketName;                                      // 0x1860(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
			class UAnimMontage* EggLayingAnimation;                                      // 0x1868(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
			float                                                      UntamedWalkingSpeedModifier;                             // 0x1870(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
			float                                                      TamedWalkingSpeedModifier;                               // 0x1874(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
			float                                                      UntamedRunningSpeedModifier;                             // 0x1878(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
			float                                                      TamedRunningSpeedModifier;                               // 0x187C(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
			class UClass* RandomColorSetsMale;                                     // 0x1880(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
			class UClass* RandomColorSetsFemale;                                   // 0x1888(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
			class UClass* SpawnerColorSets;                                        // 0x1890(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
			class UAnimSequence* RiderAnimOverride;                                       // 0x1898(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
			class UAnimSequence* TurningRightRiderAnimOverride;                           // 0x18A0(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
			class UAnimSequence* TurningLeftRiderAnimOverride;                            // 0x18A8(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
			class UAnimSequence* LatchedRiderAnimOverride;                                // 0x18B0(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
			class UAnimSequence* RiderMoveAnimOverride;                                   // 0x18B8(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
			float                                                      RidingAnimSpeedFactor;                                   // 0x18C0(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
			unsigned char                                              UnknownData_L0C0[0x4];                                   // 0x18C4(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
			class UAnimMontage* StartRidingAnimOverride;                                 // 0x18C8(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
			class UAnimMontage* StopRidingAnimOverride;                                  // 0x18D0(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
			class FName                                                TargetingTeamNameOverride;                               // 0x18D8(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
			float                                                      ExtraTamedSpeedMultiplier;                               // 0x18E0(0x0004) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
			float                                                      ExtraUnTamedSpeedMultiplier;                             // 0x18E4(0x0004) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
			double                                                     LastEggSpawnChanceTime;                                  // 0x18E8(0x0008) ZeroConstructor, Transient, SaveGame, IsPlainOldData, NoDestructor
			class FName                                                OriginalNPCVolumeName;                                   // 0x18F0(0x0008) ZeroConstructor, Transient, SaveGame, IsPlainOldData, NoDestructor
			float                                                      OutsideOriginalNPCVolumeStasisDestroyInterval;           // 0x18F8(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
			float                                                      StasisedDestroyInterval;                                 // 0x18FC(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
			float                                                      TamedAllowNamingTime;                                    // 0x1900(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
			float                                                      MovementSpeedScalingRotationRatePower;                   // 0x1904(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
			float                                                      AttackNoStaminaTorpidityMultiplier;                      // 0x1908(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
			float                                                      DecayDestructionPeriod;                                  // 0x190C(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
			double                                                     TamedAtTime;                                             // 0x1910(0x0008) ZeroConstructor, Transient, SaveGame, IsPlainOldData, NoDestructor
			double                                                     LastInAllyRangeTime;                                     // 0x1918(0x0008) Net, ZeroConstructor, Transient, SaveGame, IsPlainOldData, NoDestructor
			unsigned char                                              UnknownData_YSEO[0x10];                                  // 0x1920(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
			TArray<class APrimalStructure*>                            LatchedOnStructures;                                     // 0x1930(0x0010) ZeroConstructor, Transient
			class UPrimalDinoSettings* MyDinoSettingsCDO;                                       // 0x1940(0x0008) BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor
			unsigned char                                              UnknownData_IEBA[0x4];                                   // 0x1948(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
			float                                                      LocInterpolationSnapDistance;                            // 0x194C(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
			unsigned char                                              UnknownData_7M76[0x10];                                  // 0x1950(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
			float                                                      HUDScaleMultiplier;                                      // 0x1960(0x0004) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
			float                                                      HUDTextScaleMultiplier;                                  // 0x1964(0x0004) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
			float                                                      TamedCorpseLifespan;                                     // 0x1968(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
			float                                                      MateBoostDamageReceiveMultiplier;                        // 0x196C(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
			float                                                      MateBoostDamageGiveMultiplier;                           // 0x1970(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
			float                                                      MateBoostRange;                                          // 0x1974(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
			class FName                                                DinoNameTag;                                             // 0x1978(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
			class AShooterPlayerController* AttackMyTargetForPlayerController;                       // 0x1980(0x0008) Net, ZeroConstructor, IsPlainOldData, NoDestructor
			float                                                      RidingAttackExtraVelocityDelay;                          // 0x1988(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
			float                                                      StepDamageRadialDamageInterval;                          // 0x198C(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
			float                                                      StepDamageRadialDamageExtraRadius;                       // 0x1990(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
			float                                                      StepDamageRadialDamageAmountGeneral;                     // 0x1994(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
			float                                                      StepDamageRadialDamageAmountHarvestable;                 // 0x1998(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
			unsigned char                                              UnknownData_U3ER[0xC];                                   // 0x199C(0x000C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
			class UClass* StepHarvestableDamageType;                               // 0x19A8(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
			float                                                      StepDamageFootDamageInterval;                            // 0x19B0(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
			float                                                      StepDamageFootDamageRadius;                              // 0x19B4(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
			float                                                      StepDamageFootDamageAmount;                              // 0x19B8(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
			unsigned char                                              UnknownData_GNHF[0x4];                                   // 0x19BC(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
			TArray<class FName>                                        StepDamageFootDamageSockets;                             // 0x19C0(0x0010) Edit, ZeroConstructor, DisableEditOnInstance
			float                                                      DurationBeforeMovingStuckPawn;                           // 0x19D0(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
			unsigned char                                              UnknownData_ZYKE[0x14];                                  // 0x19D4(0x0014) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
			class UAnimMontage* StartledAnimationRightDefault;                           // 0x19E8(0x0008) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
			class UAnimMontage* StartledAnimationLeft;                                   // 0x19F0(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
			TArray<class UAnimMontage*>                                StartledAnimations;                                      // 0x19F8(0x0010) Edit, ZeroConstructor, DisableEditOnInstance
			class UAnimMontage* FlyingStartledAnimation;                                 // 0x1A08(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
			float                                                      RandomPlayStartledAnimIntervalMin;                       // 0x1A10(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
			float                                                      RandomPlayStartledAnimIntervalMax;                       // 0x1A14(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
			float                                                      StartledAnimationCooldown;                               // 0x1A18(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
			float                                                      DefaultActivateAttackRangeOffset;                        // 0x1A1C(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
			float                                                      CorpseTargetingMultiplier;                               // 0x1A20(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
			unsigned char                                              UnknownData_GT8Q[0x14];                                  // 0x1A24(0x0014) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
			float                                                      CorpseLifespanNonRelevant;                               // 0x1A38(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
			unsigned char                                              bUseBPUnstasisConsumeFood : 1;                           // 0x1A3C(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
			unsigned char                                              bUseBPOnDinoStartled : 1;                                // 0x1A3C(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
			unsigned char                                              bRemoteDinoConsumesStaminaWhileRunning : 1;              // 0x1A3C(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
			unsigned char                                              UnknownData_G32N[0x3];                                   // 0x1A3D(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
			float                                                      MinStaminaForRider;                                      // 0x1A40(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
			float                                                      LoseStaminaWithRiderRate;                                // 0x1A44(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
			float                                                      FollowingRunDistance;                                    // 0x1A48(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
			float                                                      MaxDinoKillerTransferWeightPercent;                      // 0x1A4C(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
			float                                                      NPCZoneVolumeCountWeight;                                // 0x1A50(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
			unsigned char                                              UnknownData_C54R[0x4];                                   // 0x1A54(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
			struct FVector                                             FloatingHUDTextWorldOffset;                              // 0x1A58(0x000C) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
			unsigned char                                              UnknownData_JMU1[0x6C];                                  // 0x1A64(0x006C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
			class UClass* RepairRequirementsItem;                                  // 0x1AD0(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
			unsigned char                                              UnknownData_RE64[0x4];                                   // 0x1AD8(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
			float                                                      RepairCheckInterval;                                     // 0x1ADC(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
			float                                                      RepairPercentPerInterval;                                // 0x1AE0(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
			struct FVector                                             RiderCheckTraceOffset;                                   // 0x1AE4(0x000C) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
			struct FVector                                             RiderEjectionImpulse;                                    // 0x1AF0(0x000C) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
			float                                                      WakingTameAffinityDecreaseFoodPercentage;                // 0x1AFC(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
			float                                                      WakingTameAllowFeedingFoodPercentage;                    // 0x1B00(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
			float                                                      WakingTameFoodAffinityMultiplier;                        // 0x1B04(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
			float                                                      CheckForWildAmbientHarvestingIntervalMin;                // 0x1B08(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
			float                                                      CheckForWildAmbientHarvestingIntervalMax;                // 0x1B0C(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
			unsigned char                                              UnknownData_9SQK[0x8];                                   // 0x1B10(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
			class UAnimMontage* WildAmbientHarvestingAnimation;                          // 0x1B18(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
			TArray<class UAnimMontage*>                                WildAmbientHarvestingAnimations;                         // 0x1B20(0x0010) Edit, ZeroConstructor, DisableEditOnInstance
			TArray<class UClass*>                                      WildAmbientHarvestingComponentClasses;                   // 0x1B30(0x0010) Edit, ZeroConstructor, DisableEditOnInstance
			float                                                      WildAmbientHarvestingRadius;                             // 0x1B40(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
			unsigned char                                              UnknownData_V6K5[0x4];                                   // 0x1B44(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
			int32_t                                                    AbsoluteBaseLevel;                                       // 0x1B48(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
			unsigned char                                              UnknownData_Q3TF[0x4];                                   // 0x1B4C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
			TArray<struct FStatValuePair>                              OverrideBaseStatLevelsOnSpawn;                           // 0x1B50(0x0010) Edit, ZeroConstructor, DisableEditOnInstance
			PAD(0x10);// TArray<EPrimalCharacterStatusValue>                        OverrideStatPriorityOnSpawn;                             // 0x1B60(0x0010) Edit, ZeroConstructor, DisableEditOnInstance
			class UClass* TamedHarvestDamageType;                                  // 0x1B70(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
			PAD(0x20);// struct FDinoSaddleStruct                                   SaddleStruct;                                            // 0x1B78(0x0020) Net, RepNotify, ContainsInstancedReference
			unsigned char                                              UnknownData_950S[0x20];                                  // 0x1B98(0x0020) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
			class UClass* StartChargingShake;                                      // 0x1BB8(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
			class UClass* LightEndChargingShake;                                   // 0x1BC0(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
			class UClass* HardEndChargingShake;                                    // 0x1BC8(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
			float                                                      ChargeBumpDamage;                                        // 0x1BD0(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
			unsigned char                                              UnknownData_8DNY[0x4];                                   // 0x1BD4(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
			class UClass* ChargeBumpDamageType;                                    // 0x1BD8(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
			float                                                      ChargeBumpImpulse;                                       // 0x1BE0(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
			float                                                      MinChargeInterval;                                       // 0x1BE4(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
			float                                                      PlayerMountedLaunchFowardSpeed;                          // 0x1BE8(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
			float                                                      PlayerMountedLaunchUpSpeed;                              // 0x1BEC(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
			float                                                      AttackOnLaunchMaximumTargetDistance;                     // 0x1BF0(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
			float                                                      KeepFlightRemainingTime;                                 // 0x1BF4(0x0004) ZeroConstructor, Transient, IsPlainOldData, NoDestructor
			class UAnimMontage* MountCharacterAnimation;                                 // 0x1BF8(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
			class UAnimMontage* UnmountCharacterAnimation;                               // 0x1C00(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
			class UAnimMontage* EndChargingAnimation;                                    // 0x1C08(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
			float                                                      FlyingRunSpeedModifier;                                  // 0x1C10(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
			float                                                      ChargingAnimDelay;                                       // 0x1C14(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
			class FName                                                RiderSocketName;                                         // 0x1C18(0x0008) Net, ZeroConstructor, IsPlainOldData, NoDestructor
			float                                                      ChargingActivationRequiresStamina;                       // 0x1C20(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
			float                                                      ChargingActivationConsumesStamina;                       // 0x1C24(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
			float                                                      FlyerHardBreakingOverride;                               // 0x1C28(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
			float                                                      BabyScale;                                               // 0x1C2C(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
			float                                                      BabySpeedMultiplier;                                     // 0x1C30(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
			float                                                      BabyPitchMultiplier;                                     // 0x1C34(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
			float                                                      BabyVolumeMultiplier;                                    // 0x1C38(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
			TWeakObjectPtr<class AActor>                               WanderAroundActor;                                       // 0x1C3C(0x0008) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
			float                                                      WanderAroundActorMaxDistance;                            // 0x1C44(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
			unsigned char                                              UnknownData_K5YK[0x20];                                  // 0x1C48(0x0020) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
			class UClass* BuffGivenToBasedCharacters;                              // 0x1C68(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
			unsigned char                                              UnknownData_VS45[0x8];                                   // 0x1C70(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
			double                                                     LastUpdatedBabyAgeAtTime;                                // 0x1C78(0x0008) BlueprintVisible, ZeroConstructor, Transient, SaveGame, IsPlainOldData, NoDestructor
			double                                                     LastUpdatedGestationAtTime;                              // 0x1C80(0x0008) BlueprintVisible, ZeroConstructor, Transient, SaveGame, IsPlainOldData, NoDestructor
			double                                                     LastUpdatedMatingAtTime;                                 // 0x1C88(0x0008) ZeroConstructor, Transient, SaveGame, IsPlainOldData, NoDestructor
			float                                                      BabyAgeSpeed;                                            // 0x1C90(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
			float                                                      ExtraBabyAgeSpeedMultiplier;                             // 0x1C94(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
			float                                                      FemaleMatingRangeAddition;                               // 0x1C98(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
			float                                                      FemaleMatingTime;                                        // 0x1C9C(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
			double                                                     NextAllowedMatingTime;                                   // 0x1CA0(0x0008) Net, ZeroConstructor, Transient, SaveGame, IsPlainOldData, NoDestructor
			float                                                      MatingProgress;                                          // 0x1CA8(0x0004) Net, ZeroConstructor, Transient, SaveGame, IsPlainOldData, NoDestructor
			unsigned char                                              UnknownData_GILE[0x4];                                   // 0x1CAC(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
			double                                                     LastMatingNotificationTime;                              // 0x1CB0(0x0008) Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor
			class APrimalDinoCharacter* MatingWithDino;                                          // 0x1CB8(0x0008) Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor
			class UAnimMontage* MatingAnimationMale;                                     // 0x1CC0(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
			unsigned char                                              GestationEggNumberOfLevelUpPointsApplied[0xC];           // 0x1CC8(0x000C) ZeroConstructor, Transient, SaveGame, IsPlainOldData, NoDestructor
			float                                                      GestationEggTamedIneffectivenessModifier;                // 0x1CD4(0x0004) ZeroConstructor, Transient, SaveGame, IsPlainOldData, NoDestructor
			unsigned char                                              GestationEggColorSetIndices[0x6];                        // 0x1CD8(0x0006) ZeroConstructor, Transient, SaveGame, IsPlainOldData, NoDestructor
			unsigned char                                              UnknownData_P42O[0x2];                                   // 0x1CDE(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
			float                                                      NewFemaleMinTimeBetweenMating;                           // 0x1CE0(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
			float                                                      NewFemaleMaxTimeBetweenMating;                           // 0x1CE4(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
			TArray<class UClass*>                                      DefaultTamedBuffs;                                       // 0x1CE8(0x0010) Edit, ZeroConstructor, DisableEditOnInstance
			unsigned char                                              UnknownData_D02Y[0x18];                                  // 0x1CF8(0x0018) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
			float                                                      HyperThermiaInsulation;                                  // 0x1D10(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
			float                                                      HypoThermiaInsulation;                                   // 0x1D14(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
			float                                                      InsulationRange;                                         // 0x1D18(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
			float                                                      GangOverlapRange;                                        // 0x1D1C(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
			float                                                      GangDamageResistance;                                    // 0x1D20(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
			float                                                      GangDamage;                                              // 0x1D24(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
			int32_t                                                    MaxGangCount;                                            // 0x1D28(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
			int32_t                                                    GangCount;                                               // 0x1D2C(0x0004) BlueprintVisible, Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor
			unsigned char                                              UnknownData_954X[0x1C];                                  // 0x1D30(0x001C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
			float                                                      WildRandomScale;                                         // 0x1D4C(0x0004) Net, ZeroConstructor, Transient, SaveGame, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
			float                                                      HeldJumpSlowFallingGravityZScale;                        // 0x1D50(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
			unsigned char                                              UnknownData_W4SD[0x4];                                   // 0x1D54(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
			class UAnimMontage* SlowFallingAnim;                                         // 0x1D58(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
			float                                                      SlowFallingStaminaCostPerSecond;                         // 0x1D60(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
			float                                                      NoRiderRotationModifier;                                 // 0x1D64(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
			class FName                                                RiderFPVCameraUseSocketName;                             // 0x1D68(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
			class FName                                                RiderLatchedFPVCameraUseSocketName;                      // 0x1D70(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
			class FName                                                PassengerFPVCameraRootSocket;                            // 0x1D78(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
			TArray<class FName>                                        FPVRiderBoneNamesToHide;                                 // 0x1D80(0x0010) Edit, ZeroConstructor, DisableEditOnInstance
			float                                                      ExtraRunningSpeedModifier;                               // 0x1D90(0x0004) BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor
			float                                                      ScaleExtraRunningSpeedModifierMin;                       // 0x1D94(0x0004) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
			float                                                      ScaleExtraRunningSpeedModifierMax;                       // 0x1D98(0x0004) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
			float                                                      ScaleExtraRunningSpeedModifierSpeed;                     // 0x1D9C(0x0004) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
			float                                                      LastHigherScaleExtraRunningSpeedValue;                   // 0x1DA0(0x0004) BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor
			unsigned char                                              UnknownData_RY9W[0x4];                                   // 0x1DA4(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
			double                                                     LastHigherScaleExtraRunningSpeedTime;                    // 0x1DA8(0x0008) BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor
			unsigned char                                              bSimulateRootMotion : 1;                                 // 0x1DB0(0x0001) BIT_FIELD BlueprintVisible, Transient, NoDestructor
			unsigned char                                              bUseBPOverrideStencilAllianceForTarget : 1;              // 0x1DB0(0x0001) BIT_FIELD Edit, BlueprintVisible, NoDestructor
			unsigned char                                              bDisableHighQualityAIVolumeLedgeChecking : 1;            // 0x1DB0(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
			unsigned char                                              bDoHighQualityLedgeChecking : 1;                         // 0x1DB0(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
			unsigned char                                              UnknownData_8Z8M[0x3];                                   // 0x1DB1(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
			float                                                      RiderMovementSpeedScalingRotationRatePowerMultiplier;    // 0x1DB4(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
			float                                                      HighQualityLedgeDetectionExtraTraceDistance;             // 0x1DB8(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
			unsigned char                                              bOnlyDoStepDamageWhenRunning : 1;                        // 0x1DBC(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
			unsigned char                                              UnknownData_VYCD : 1;                                    // 0x1DBC(0x0001) BIT_FIELD (PADDING)
			unsigned char                                              bPreventPlatformSaddleMultiFloors : 1;                   // 0x1DBC(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
			unsigned char                                              bPreventMountedDinoMeshHiding : 1;                       // 0x1DBC(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
			unsigned char                                              bUsePlayerMountedCarryingDinoAnimation : 1;              // 0x1DBC(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
			unsigned char                                              bPreventRotationRateModifier : 1;                        // 0x1DBC(0x0001) BIT_FIELD Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor
			unsigned char                                              bStepDamageFoliageOnly : 1;                              // 0x1DBC(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
			unsigned char                                              bPreventUntamedRun : 1;                                  // 0x1DBC(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
			unsigned char                                              bAllowTogglingPublicSeating : 1;                         // 0x1DBD(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
			unsigned char                                              bAllowPublicSeating : 1;                                 // 0x1DBD(0x0001) BIT_FIELD Edit, Net, DisableEditOnInstance, SaveGame, NoDestructor
			unsigned char                                              bAllowWaterSurfaceExtraJump : 1;                         // 0x1DBD(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
			unsigned char                                              bUseVelocityForRequestedMoveIfStuck : 1;                 // 0x1DBD(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
			unsigned char                                              bUseBPDoAttack : 1;                                      // 0x1DBD(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
			unsigned char                                              bStepDamageNonFoliageWithoutRunning : 1;                 // 0x1DBD(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
			unsigned char                                              bStepDamageAllTargetables : 1;                           // 0x1DBD(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
			unsigned char                                              bDamageNonFoliageFeetSocketsOnly : 1;                    // 0x1DBD(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
			unsigned char                                              bRiderDontBeBlockedByPawnMesh : 1;                       // 0x1DBE(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
			unsigned char                                              bUseExtendedUnstasisCheck : 1;                           // 0x1DBE(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
			unsigned char                                              UnknownData_1TY5 : 1;                                    // 0x1DBE(0x0001) BIT_FIELD (PADDING)
			unsigned char                                              bAllowDinoAutoConsumeInventoryFood : 1;                  // 0x1DBE(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
			unsigned char                                              bForceNoCharacterStatusComponentTick : 1;                // 0x1DBE(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
			unsigned char                                              bIsRaidDino : 1;                                         // 0x1DBE(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
			unsigned char                                              bWildIgnoredByAutoTurrets : 1;                           // 0x1DBE(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
			unsigned char                                              bWildAllowTargetingNeutralStructures : 1;                // 0x1DBE(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
			unsigned char                                              bDoStepDamageTamedOnly : 1;                              // 0x1DBF(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
			unsigned char                                              bStepDamageNonFoliageTamedOnly : 1;                      // 0x1DBF(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
			unsigned char                                              UnknownData_X1TP : 1;                                    // 0x1DBF(0x0001) BIT_FIELD (PADDING)
			unsigned char                                              bForceWildDeathInventoryDeposit : 1;                     // 0x1DBF(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
			unsigned char                                              bIsCarryingCharacter : 1;                                // 0x1DBF(0x0001) BIT_FIELD BlueprintVisible, BlueprintReadOnly, NoDestructor
			unsigned char                                              bIsCarryingPassenger : 1;                                // 0x1DBF(0x0001) BIT_FIELD BlueprintVisible, BlueprintReadOnly, NoDestructor
			unsigned char                                              bUseBPCanTakePassenger : 1;                              // 0x1DBF(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
			unsigned char                                              bForwardPlatformSaddleStructureDamageToDino : 1;         // 0x1DBF(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
			int32_t                                                    LoadDestroyWildDinosUnderVersion;                        // 0x1DC0(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
			int32_t                                                    SaveDestroyWildDinosUnderVersion;                        // 0x1DC4(0x0004) ZeroConstructor, Transient, SaveGame, IsPlainOldData, NoDestructor
			float                                                      AllowWaterSurfaceExtraJumpStaminaCost;                   // 0x1DC8(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
			unsigned char                                              UnknownData_Q3LS[0x4];                                   // 0x1DCC(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
			class USoundBase* PlayKillLocalSound;                                      // 0x1DD0(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
			unsigned char                                              UnknownData_EMJO[0x14];                                  // 0x1DD8(0x0014) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
			unsigned char                                              TribeGroupPetOrderingRank;                               // 0x1DEC(0x0001) Net, ZeroConstructor, Transient, SaveGame, IsPlainOldData, NoDestructor
			unsigned char                                              TribeGroupPetRidingRank;                                 // 0x1DED(0x0001) Net, ZeroConstructor, Transient, SaveGame, IsPlainOldData, NoDestructor
			unsigned char                                              FollowStoppingDistance;                                  // 0x1DEE(0x0001) Net, ZeroConstructor, Transient, SaveGame, IsPlainOldData, NoDestructor
			unsigned char                                              UnknownData_9F8F[0x1];                                   // 0x1DEF(0x0001) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
			class FString                                              ImprinterName;                                           // 0x1DF0(0x0010) Net, ZeroConstructor, Transient, SaveGame, NativeAccessSpecifierPublic
			uint64_t                                                   ImprinterPlayerDataID;                                   // 0x1E00(0x0008) Net, ZeroConstructor, Transient, SaveGame, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
			float                                                      BabyMinCuddleInterval;                                   // 0x1E08(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
			float                                                      BabyMaxCuddleInterval;                                   // 0x1E0C(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
			float                                                      BabyCuddleGracePeriod;                                   // 0x1E10(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
			float                                                      BabyCuddleLoseImpringQualityPerSecond;                   // 0x1E14(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
			float                                                      BabyCuddleWalkDistance;                                  // 0x1E18(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
			struct FVector                                             BabyCuddleWalkStartingLocation;                          // 0x1E1C(0x000C) ZeroConstructor, Transient, SaveGame, IsPlainOldData, NoDestructor
			double                                                     BabyNextCuddleTime;                                      // 0x1E28(0x0008) BlueprintVisible, Net, ZeroConstructor, Transient, SaveGame, IsPlainOldData, NoDestructor
			PAD(0x1);// EBabyCuddleType                                            BabyCuddleType;                                          // 0x1E30(0x0001) BlueprintVisible, Net, ZeroConstructor, Transient, SaveGame, IsPlainOldData, NoDestructor
			unsigned char                                              UnknownData_F4WO[0x7];                                   // 0x1E31(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
			class UClass* BabyCuddleFood;                                          // 0x1E38(0x0008) BlueprintVisible, Net, ZeroConstructor, Transient, SaveGame, IsPlainOldData, NoDestructor
			class UAnimMontage* BabyCuddledAnimation;                                    // 0x1E40(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
			TArray<class UClass*>                                      MyBabyCuddleFoodTypes;                                   // 0x1E48(0x0010) Edit, ZeroConstructor, DisableEditOnInstance
			float                                                      RiderMaxImprintingQualityDamageReduction;                // 0x1E58(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
			float                                                      RiderMaxImprintingQualityDamageMultiplier;               // 0x1E5C(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
			float                                                      BabyImprintingQualityTotalMaturationTime;                // 0x1E60(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
			float                                                      WakingTameMaxDistance;                                   // 0x1E64(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
			float                                                      TimeBetweenTamedWakingEatAnimations;                     // 0x1E68(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
			unsigned char                                              UnknownData_22FM[0xC];                                   // 0x1E6C(0x000C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
			unsigned char                                              UnknownData_63EW : 1;                                    // 0x1E78(0x0001) BIT_FIELD (PADDING)
			unsigned char                                              bDontPlayAttackingMusic : 1;                             // 0x1E78(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
			unsigned char                                              bForceIgnoreRagdollHarvesting : 1;                       // 0x1E78(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
			unsigned char                                              bBPModifyAimOffsetTargetLocation : 1;                    // 0x1E78(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
			unsigned char                                              bBPModifyAimOffsetNoTarget : 1;                          // 0x1E78(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
			unsigned char                                              bIsVehicle : 1;                                          // 0x1E78(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
			unsigned char                                              bDisallowPostNetReplication : 1;                         // 0x1E78(0x0001) BIT_FIELD BlueprintVisible, NoDestructor
			unsigned char                                              bTakingOff : 1;                                          // 0x1E78(0x0001) BIT_FIELD BlueprintVisible, BlueprintReadOnly, NoDestructor
			unsigned char                                              bPreventMating : 1;                                      // 0x1E79(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
			unsigned char                                              bAttackStopsRotation : 1;                                // 0x1E79(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
			unsigned char                                              bFlyerDinoAllowBackwardsFlight : 1;                      // 0x1E79(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
			unsigned char                                              bFlyerDinoAllowStrafing : 1;                             // 0x1E79(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
			unsigned char                                              bIgnoreTargetingLiveUnriddenDinos : 1;                   // 0x1E79(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
			unsigned char                                              bSleepedForceCreateInventory : 1;                        // 0x1E79(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
			unsigned char                                              bLocalForceNearbySkelMeshUpdate : 1;                     // 0x1E79(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
			unsigned char                                              bFlyerDisableEnemyTargetingMaxDeltaZ : 1;                // 0x1E79(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
			unsigned char                                              bIsBossDino : 1;                                         // 0x1E7A(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
			unsigned char                                              bTamedAIAllowSpecialAttacks : 1;                         // 0x1E7A(0x0001) BIT_FIELD Net, Transient, SaveGame, NoDestructor
			unsigned char                                              bTamedAIToggleSpecialAttacks : 1;                        // 0x1E7A(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
			unsigned char                                              UnknownData_7QPV : 1;                                    // 0x1E7A(0x0001) BIT_FIELD (PADDING)
			unsigned char                                              bRepeatPrimaryAttack : 1;                                // 0x1E7A(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
			unsigned char                                              bPreventUploading : 1;                                   // 0x1E7A(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
			unsigned char                                              bPreventHibernation : 1;                                 // 0x1E7A(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
			unsigned char                                              bRiderMovementLocked : 1;                                // 0x1E7A(0x0001) BIT_FIELD Transient, NoDestructor
			unsigned char                                              UnknownData_5K2D : 1;                                    // 0x1E7B(0x0001) BIT_FIELD (PADDING)
			unsigned char                                              bNeutered : 1;                                           // 0x1E7B(0x0001) BIT_FIELD Net, Transient, SaveGame, NoDestructor, NativeAccessSpecifierPublic
			unsigned char                                              bIgnoreAllWhistles : 1;                                  // 0x1E7B(0x0001) BIT_FIELD Net, Transient, SaveGame, NoDestructor
			unsigned char                                              bUseBPDoHarvestAttack : 1;                               // 0x1E7B(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
			unsigned char                                              bUseBPModifyHarvestingQuantity : 1;                      // 0x1E7B(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
			unsigned char                                              bUseBPModifyHarvestingWeightsArray : 1;                  // 0x1E7B(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
			float                                                      StepDamageFootDamageRunningMultiplier;                   // 0x1E7C(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
			unsigned char                                              bUseBPModifyHarvestDamage : 1;                           // 0x1E80(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
			unsigned char                                              bHideFloatingHUD : 1;                                    // 0x1E80(0x0001) BIT_FIELD BlueprintVisible, NoDestructor
			unsigned char                                              UnknownData_SIA3[0x3];                                   // 0x1E81(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
			float                                                      maxRangeForWeaponTriggeredTooltip;                       // 0x1E84(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
			unsigned char                                              bDisableHarvesting : 1;                                  // 0x1E88(0x0001) BIT_FIELD Edit, Net, DisableEditOnInstance, SaveGame, NoDestructor
			unsigned char                                              bUseBPDinoPostBeginPlay : 1;                             // 0x1E88(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
			unsigned char                                              UnknownData_QDWS : 1;                                    // 0x1E88(0x0001) BIT_FIELD (PADDING)
			unsigned char                                              bFlyerDontGainImpulseOnSubmerged : 1;                    // 0x1E88(0x0001) BIT_FIELD Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor
			unsigned char                                              bUseBPCanAutodrag : 1;                                   // 0x1E88(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
			unsigned char                                              bUseBPCanDragCharacter : 1;                              // 0x1E88(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
			unsigned char                                              bAllowDraggingWhileFalling : 1;                          // 0x1E88(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
			unsigned char                                              bSingleplayerFreezePhysicsWhenNoTarget : 1;              // 0x1E88(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
			unsigned char                                              UnknownData_9YBJ : 1;                                    // 0x1E89(0x0001) BIT_FIELD (PADDING)
			unsigned char                                              bIsCloneDino : 1;                                        // 0x1E89(0x0001) BIT_FIELD Net, Transient, SaveGame, NoDestructor, NativeAccessSpecifierPublic
			unsigned char                                              bUseAdvancedAnimLerp : 1;                                // 0x1E89(0x0001) BIT_FIELD Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor
			unsigned char                                              bPreventWanderingUnderWater : 1;                         // 0x1E89(0x0001) BIT_FIELD Edit, BlueprintVisible, NoDestructor
			unsigned char                                              bWildAllowFollowTamedTarget : 1;                         // 0x1E89(0x0001) BIT_FIELD Edit, NoDestructor
			unsigned char                                              bAllowDamageSameTeamAndClass : 1;                        // 0x1E89(0x0001) BIT_FIELD Edit, NoDestructor
			unsigned char                                              bAllowsTurretMode : 1;                                   // 0x1E89(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
			unsigned char                                              bAllowRidingInTurretMode : 1;                            // 0x1E89(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
			unsigned char                                              bIsInTurretMode : 1;                                     // 0x1E8A(0x0001) BIT_FIELD BlueprintVisible, Net, SaveGame, NoDestructor
			unsigned char                                              bUseBPShouldCancelDoAttack : 1;                          // 0x1E8A(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
			unsigned char                                              bUseBPModifyDesiredRotation : 1;                         // 0x1E8A(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
			unsigned char                                              bUseLocalSpaceDesiredRotationWithRider : 1;              // 0x1E8A(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
			unsigned char                                              bUseBPDesiredRotationIsLocalSpace : 1;                   // 0x1E8A(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
			unsigned char                                              UnknownData_Q17F : 1;                                    // 0x1E8A(0x0001) BIT_FIELD (PADDING)
			unsigned char                                              bUseBPOverrideCameraViewTarget : 1;                      // 0x1E8A(0x0001) BIT_FIELD Edit, BlueprintVisible, NoDestructor
			unsigned char                                              bIsRobot : 1;                                            // 0x1E8A(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
			unsigned char                                              UnknownData_9ZMU[0x1];                                   // 0x1E8B(0x0001) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
			float                                                      StepRadialDamageOffset;                                  // 0x1E8C(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
			unsigned char                                              bUseBP_CustomModifier_RotationRate : 1;                  // 0x1E90(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
			unsigned char                                              bUseBP_CustomModifier_MaxSpeed : 1;                      // 0x1E90(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
			unsigned char                                              bUseBP_OnStartLandingNotify : 1;                         // 0x1E90(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
			unsigned char                                              UnknownData_K891 : 1;                                    // 0x1E90(0x0001) BIT_FIELD (PADDING)
			unsigned char                                              bUseAttackForceWalkDistanceMultiplier : 1;               // 0x1E90(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
			unsigned char                                              bForcePerFrameTicking : 1;                               // 0x1E90(0x0001) BIT_FIELD BlueprintVisible, NoDestructor
			unsigned char                                              bHadStaticBase : 1;                                      // 0x1E90(0x0001) BIT_FIELD SaveGame, NoDestructor
			unsigned char                                              bNoKillXP : 1;                                           // 0x1E90(0x0001) BIT_FIELD SaveGame, NoDestructor
			unsigned char                                              bIgnoreAllyLook : 1;                                     // 0x1E91(0x0001) BIT_FIELD Net, Transient, SaveGame, NoDestructor, NativeAccessSpecifierPublic
			unsigned char                                              bBabyInitiallyUnclaimed : 1;                             // 0x1E91(0x0001) BIT_FIELD Transient, SaveGame, NoDestructor
			unsigned char                                              bUseBPForceTurretFastTargeting : 1;                      // 0x1E91(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
			unsigned char                                              UnknownData_JFNE : 1;                                    // 0x1E91(0x0001) BIT_FIELD (PADDING)
			unsigned char                                              bSuppressWakingTameMessage : 1;                          // 0x1E91(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
			unsigned char                                              bPreventFlyerLanding : 1;                                // 0x1E91(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
			unsigned char                                              UnknownData_883J : 2;                                    // 0x1E91(0x0001) BIT_FIELD (PADDING)
			unsigned char                                              bDisableCollisionWithDinosWhenFlying : 1;                // 0x1E92(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
			unsigned char                                              bAllowTrapping : 1;                                      // 0x1E92(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
			unsigned char                                              bPreventWildTrapping : 1;                                // 0x1E92(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
			unsigned char                                              bIsTrapTamed : 1;                                        // 0x1E92(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
			unsigned char                                              bIgnoreDestroyOnRapidDeath : 1;                          // 0x1E92(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
			unsigned char                                              bPreventFallingBumpCheck : 1;                            // 0x1E92(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
			unsigned char                                              bIsDestroyingDino : 1;                                   // 0x1E92(0x0001) BIT_FIELD Transient, NoDestructor
			unsigned char                                              bCheckBPAllowClaiming : 1;                               // 0x1E92(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
			unsigned char                                              bUseBlueprintExtraBabyScale : 1;                         // 0x1E93(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
			unsigned char                                              bPreventNeuter : 1;                                      // 0x1E93(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
			unsigned char                                              bUseBPGetDragSocketName : 1;                             // 0x1E93(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
			unsigned char                                              bUseBPGetDragSocketDinoName : 1;                         // 0x1E93(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
			unsigned char                                              bUseBPGetLookOffsetSocketName : 1;                       // 0x1E93(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
			unsigned char                                              bTargetEverythingIncludingSameTeamInPVE : 1;             // 0x1E93(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
			float                                                      ForcePawnBigPushingForTime;                              // 0x1E94(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
			unsigned char                                              bForceUsePhysicalFootSurfaceTrace : 1;                   // 0x1E98(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
			unsigned char                                              bUseBP_OnPostNetReplication : 1;                         // 0x1E98(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
			unsigned char                                              bPassiveFlee : 1;                                        // 0x1E98(0x0001) BIT_FIELD BlueprintVisible, Net, Transient, SaveGame, NoDestructor, NativeAccessSpecifierPublic
			unsigned char                                              UnknownData_2JB2 : 1;                                    // 0x1E98(0x0001) BIT_FIELD (PADDING)
			unsigned char                                              bOnlyTargetConscious : 1;                                // 0x1E98(0x0001) BIT_FIELD BlueprintVisible, Net, Transient, SaveGame, NoDestructor, NativeAccessSpecifierPublic
			unsigned char                                              bBPManagedFPVViewLocationNoRider : 1;                    // 0x1E98(0x0001) BIT_FIELD Edit, BlueprintVisible, NoDestructor
			unsigned char                                              bHideSaddleInFPV : 1;                                    // 0x1E98(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
			unsigned char                                              bPreventCloning : 1;                                     // 0x1E98(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
			unsigned char                                              bPreventStasisOnDedi : 1;                                // 0x1E99(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
			unsigned char                                              bAlwaysCheckForFloor : 1;                                // 0x1E99(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
			unsigned char                                              bAlwaysCheckForFalling : 1;                              // 0x1E99(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
			unsigned char                                              bForceAllowCarryWaterDinos : 1;                          // 0x1E99(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
			unsigned char                                              bUseBP_AllowWalkableSlopeOverride : 1;                   // 0x1E99(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
			unsigned char                                              bUseBP_CanFly : 1;                                       // 0x1E99(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
			unsigned char                                              bUseBP_OverrideBasedCharactersCameraInterpSpeed : 1;     // 0x1E99(0x0001) BIT_FIELD Edit, NoDestructor
			unsigned char                                              bUseBPOverrideFloatingHUDLocation : 1;                   // 0x1E99(0x0001) BIT_FIELD Edit, NoDestructor
			unsigned char                                              bInterceptPlayerEmotes : 1;                              // 0x1E9A(0x0001) BIT_FIELD Edit, NoDestructor
			unsigned char                                              bUseBP_ShouldPreventBasedCharactersCameraInterpolation : 1; // 0x1E9A(0x0001) BIT_FIELD Edit, NoDestructor
			unsigned char                                              bRidingIsSeperateUnstasisCaster : 1;                     // 0x1E9A(0x0001) BIT_FIELD Edit, NoDestructor
			unsigned char                                              bIsOceanManagerDino : 1;                                 // 0x1E9A(0x0001) BIT_FIELD Transient, NoDestructor
			unsigned char                                              UnknownData_SNIM[0x1];                                   // 0x1E9B(0x0001) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
			float                                                      WanderRadiusMultiplier;                                  // 0x1E9C(0x0004) ZeroConstructor, Transient, SaveGame, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
			unsigned char                                              DisableCameraShakes : 1;                                 // 0x1EA0(0x0001) BIT_FIELD Edit, NoDestructor
			unsigned char                                              bUseBP_OverrideCarriedCharacterTransform : 1;            // 0x1EA0(0x0001) BIT_FIELD Edit, NoDestructor
			unsigned char                                              bUseBP_OnBasedPawnNotifies : 1;                          // 0x1EA0(0x0001) BIT_FIELD Edit, NoDestructor
			unsigned char                                              bUsesWaterWalking : 1;                                   // 0x1EA0(0x0001) BIT_FIELD Edit, NoDestructor
			unsigned char                                              bHasInvisiableSaddle : 1;                                // 0x1EA0(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
			unsigned char                                              bUseWildDinoMapMultipliers : 1;                          // 0x1EA0(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
			unsigned char                                              bIgnoreFlierRidingRestrictions : 1;                      // 0x1EA0(0x0001) BIT_FIELD Edit, NoDestructor
			unsigned char                                              bRotatingUpdatesDinoIK : 1;                              // 0x1EA0(0x0001) BIT_FIELD Edit, NoDestructor
			unsigned char                                              bUseBP_OverrideRiderCameraCollisionSweep : 1;            // 0x1EA1(0x0001) BIT_FIELD Edit, NoDestructor
			unsigned char                                              bDrawHealthBar : 1;                                      // 0x1EA1(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
			unsigned char                                              bUseShoulderMountedLaunch : 1;                           // 0x1EA1(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
			unsigned char                                              bUsePreciseLaunching : 1;                                // 0x1EA1(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
			unsigned char                                              UnknownData_MQ6T : 2;                                    // 0x1EA1(0x0001) BIT_FIELD (PADDING)
			unsigned char                                              bAllowInvalidTameVersion : 1;                            // 0x1EA1(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
			unsigned char                                              bForceAllowPvECarry : 1;                                 // 0x1EA1(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
			unsigned char                                              bUnderwaterMating : 1;                                   // 0x1EA2(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
			unsigned char                                              bBabyPreventExitingWater : 1;                            // 0x1EA2(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
			unsigned char                                              bUseBPCheckSeven : 1;                                    // 0x1EA2(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
			unsigned char                                              bPreventExportDino : 1;                                  // 0x1EA2(0x0001) BIT_FIELD Edit, NoDestructor
			unsigned char                                              bPreventPassengerFPV : 1;                                // 0x1EA2(0x0001) BIT_FIELD Edit, NoDestructor
			unsigned char                                              UnknownData_IP9D[0x1];                                   // 0x1EA3(0x0001) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
			float                                                      AIDinoForceActiveUntasisingRange;                        // 0x1EA4(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
			float                                                      WildRunningRotationRateModifier;                         // 0x1EA8(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
			float                                                      TamedRunningRotationRateModifier;                        // 0x1EAC(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
			float                                                      TamedSwimmingRotationRateModifier;                       // 0x1EB0(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
			float                                                      WildSwimmingRotationRateModifier;                        // 0x1EB4(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
			TWeakObjectPtr<class ANPCZoneVolume>                       HardLimitWildDinoToVolume;                               // 0x1EB8(0x0008) ZeroConstructor, Transient, SaveGame, IsPlainOldData, NoDestructor
			TWeakObjectPtr<class AVolume>                              WildLimitTargetVolume;                                   // 0x1EC0(0x0008) ZeroConstructor, Transient, SaveGame, IsPlainOldData, NoDestructor
			float                                                      RiderFlyingRotationRateModifier;                         // 0x1EC8(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
			float                                                      NoRiderFlyingRotationRateModifier;                       // 0x1ECC(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
			float                                                      AICombatRotationRateModifier;                            // 0x1ED0(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
			float                                                      WalkingRotationRateModifier;                             // 0x1ED4(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
			float                                                      SetAttackTargetTraceDistance;                            // 0x1ED8(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
			float                                                      SetAttackTargetTraceWidth;                               // 0x1EDC(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
			unsigned char                                              UnknownData_SKG1[0x18];                                  // 0x1EE0(0x0018) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
			class UAnimMontage* PlayerMountedCarryAnimation;                             // 0x1EF8(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
			unsigned char                                              bUseBPOnMountStateChanged : 1;                           // 0x1F00(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
			unsigned char                                              bHandleUseButtonPressBP : 1;                             // 0x1F00(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
			unsigned char                                              bGlideWhenFalling : 1;                                   // 0x1F00(0x0001) BIT_FIELD Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor
			unsigned char                                              bGlideWhenMounted : 1;                                   // 0x1F00(0x0001) BIT_FIELD Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor
			unsigned char                                              bForceAllowBackwardsMovement : 1;                        // 0x1F00(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
			unsigned char                                              bPreventBackwardsWalking : 1;                            // 0x1F00(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
			unsigned char                                              bSupplyPlayerMountedCarryAnimation : 1;                  // 0x1F00(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
			unsigned char                                              bForceAllowMountedCarryRunning : 1;                      // 0x1F00(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
			unsigned char                                              bCanLatch : 1;                                           // 0x1F01(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
			unsigned char                                              bIsLatched : 1;                                          // 0x1F01(0x0001) BIT_FIELD BlueprintVisible, Net, Transient, SaveGame, NoDestructor
			unsigned char                                              bIsLatchedDownward : 1;                                  // 0x1F01(0x0001) BIT_FIELD BlueprintVisible, Net, Transient, SaveGame, NoDestructor
			unsigned char                                              bIsLatching : 1;                                         // 0x1F01(0x0001) BIT_FIELD BlueprintVisible, Net, Transient, NoDestructor
			unsigned char                                              bRotateToFaceLatchingObject : 1;                         // 0x1F01(0x0001) BIT_FIELD BlueprintVisible, Net, Transient, NoDestructor
			unsigned char                                              bLimitRiderYawOnLatched : 1;                             // 0x1F01(0x0001) BIT_FIELD Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor
			unsigned char                                              bCanRideLatched : 1;                                     // 0x1F01(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
			unsigned char                                              bAllowMountedWeaponry : 1;                               // 0x1F01(0x0001) BIT_FIELD Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor
			unsigned char                                              bKeepAffinityOnDamageRecievedWakingTame : 1;             // 0x1F02(0x0001) BIT_FIELD Edit, BlueprintVisible, NoDestructor
			unsigned char                                              bUseBPFedWakingTameEvent : 1;                            // 0x1F02(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
			unsigned char                                              bForceRiderDrawCrosshair : 1;                            // 0x1F02(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
			unsigned char                                              bForceDrawHUD : 1;                                       // 0x1F02(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
			unsigned char                                              bForceDrawHUDWithoutRecentlyRendered : 1;                // 0x1F02(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
			unsigned char                                              bHideFloatingName : 1;                                   // 0x1F02(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
			unsigned char                                              bCanTargetVehicles : 1;                                  // 0x1F02(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
			unsigned char                                              bRidingRequiresTamed : 1;                                // 0x1F02(0x0001) BIT_FIELD Edit, NoDestructor
			unsigned char                                              bSuppressDeathNotification : 1;                          // 0x1F03(0x0001) BIT_FIELD Edit, NoDestructor
			unsigned char                                              bUseCustomHealthBarColor : 1;                            // 0x1F03(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
			unsigned char                                              bUseOnUpdateMountedDinoMeshHiding : 1;                   // 0x1F03(0x0001) BIT_FIELD Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor
			unsigned char                                              bUseBPInterceptTurnInputEvents : 1;                      // 0x1F03(0x0001) BIT_FIELD Edit, BlueprintVisible, NoDestructor
			unsigned char                                              bUseBPInterceptMoveInputEvents : 1;                      // 0x1F03(0x0001) BIT_FIELD Edit, BlueprintVisible, NoDestructor
			unsigned char                                              bUseBPInterceptMoveInputEventsEvenIfZero : 1;            // 0x1F03(0x0001) BIT_FIELD Edit, BlueprintVisible, NoDestructor
			unsigned char                                              bUseBPAdjustAttackIndex : 1;                             // 0x1F03(0x0001) BIT_FIELD Edit, BlueprintVisible, NoDestructor
			unsigned char                                              bCheckBPAllowCarryCharacter : 1;                         // 0x1F03(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
			unsigned char                                              bUseBPOnEndCharging : 1;                                 // 0x1F04(0x0001) BIT_FIELD Edit, BlueprintVisible, NoDestructor
			unsigned char                                              bUseBPNotifyMateBoostChanged : 1;                        // 0x1F04(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
			unsigned char                                              bUseBPCarriedDinoBabyRescaled : 1;                       // 0x1F04(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
			unsigned char                                              UnknownData_5HPA[0x3];                                   // 0x1F05(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
			float                                                      HealthBarOffsetY;                                        // 0x1F08(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
			unsigned char                                              UnknownData_AI1Q[0x4];                                   // 0x1F0C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
			class AMissionType* OwnerMission;                                            // 0x1F10(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor
			unsigned char                                              bForceAllowBackwardsMovementWithNoRider : 1;             // 0x1F18(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
			unsigned char                                              bIsCorrupted : 1;                                        // 0x1F18(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
			unsigned char                                              bIsHordeDino : 1;                                        // 0x1F18(0x0001) BIT_FIELD Edit, BlueprintVisible, Net, NoDestructor
			unsigned char                                              bBPOverrideHealthBarOffset : 1;                          // 0x1F18(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
			unsigned char                                              bDropWildEggsWithoutMateBoost : 1;                       // 0x1F18(0x0001) BIT_FIELD Edit, NoDestructor
			unsigned char                                              bIsTemporaryMissionDino : 1;                             // 0x1F18(0x0001) BIT_FIELD Edit, BlueprintVisible, Net, NoDestructor
			unsigned char                                              bForcePreventInventoryAccess : 1;                        // 0x1F18(0x0001) BIT_FIELD Edit, BlueprintVisible, Net, NoDestructor
			unsigned char                                              bAllowWildRunningWithoutTarget : 1;                      // 0x1F18(0x0001) BIT_FIELD Edit, BlueprintVisible, NoDestructor
			unsigned char                                              bIsBed : 1;                                              // 0x1F19(0x0001) BIT_FIELD Edit, BlueprintVisible, NoDestructor
			unsigned char                                              bUseBPGetTargetingDesirability : 1;                      // 0x1F19(0x0001) BIT_FIELD Edit, BlueprintVisible, NoDestructor
			unsigned char                                              bAlwaysAllowStrafing : 1;                                // 0x1F19(0x0001) BIT_FIELD Edit, BlueprintVisible, NoDestructor
			unsigned char                                              bForceAllowTamedTickEggLay : 1;                          // 0x1F19(0x0001) BIT_FIELD Edit, BlueprintVisible, NoDestructor
			unsigned char                                              bHasBuffPreventingUploading : 1;                         // 0x1F19(0x0001) BIT_FIELD Edit, BlueprintVisible, NoDestructor
			unsigned char                                              bDisableHarvestHealthGain : 1;                           // 0x1F19(0x0001) BIT_FIELD Edit, NoDestructor
			unsigned char                                              bRemainLatchedOnClearRider : 1;                          // 0x1F19(0x0001) BIT_FIELD Edit, NoDestructor
			unsigned char                                              UnknownData_22CZ[0x2];                                   // 0x1F1A(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
			float                                                      LimitRiderYawOnLatchedRange;                             // 0x1F1C(0x0004) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
			float                                                      LatchingDistanceLimit;                                   // 0x1F20(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
			float                                                      LatchingInitialYaw;                                      // 0x1F24(0x0004) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
			float                                                      LatchingInitialPitch;                                    // 0x1F28(0x0004) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
			float                                                      LatchingInterpolatedPitch;                               // 0x1F2C(0x0004) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
			float                                                      LatchedFirstPersonViewAngle;                             // 0x1F30(0x0004) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
			float                                                      LatchingCameraInterpolationSpeed;                        // 0x1F34(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
			float                                                      TargetLatchingInitialYaw;                                // 0x1F38(0x0004) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
			float                                                      CurrentStrafeMagnitude;                                  // 0x1F3C(0x0004) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
			float                                                      GainStaminaWhenLatchedRate;                              // 0x1F40(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
			float                                                      AIAggroNotifyNeighborsClassesRangeScale;                 // 0x1F44(0x0004) ZeroConstructor, Transient, SaveGame, IsPlainOldData, NoDestructor
			int32_t                                                    LastFrameMoveRight;                                      // 0x1F48(0x0004) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
			int32_t                                                    LastFrameMoveLeft;                                       // 0x1F4C(0x0004) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
			struct FRotator                                            LastRiderMountedWeaponRotation;                          // 0x1F50(0x000C) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
			unsigned char                                              UnknownData_97Z8[0xC];                                   // 0x1F5C(0x000C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
			int32_t                                                    DeathGivesDossierIndex;                                  // 0x1F68(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
			float                                                      DeathGivesDossierDelay;                                  // 0x1F6C(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
			struct FRotator_NetQuantizeSmartPitch                      LastMovementDesiredRotation_MountedWeaponry;             // 0x1F70(0x000C) Net, Transient
			class FName                                                SaddleRiderMovementTraceThruSocketName;                  // 0x1F7C(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
			float                                                      SwimmingRunSpeedModifier;                                // 0x1F84(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
			float                                                      RidingSwimmingRunSpeedModifier;                          // 0x1F88(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
			unsigned char                                              UnknownData_5ET4[0x4];                                   // 0x1F8C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
			double                                                     DinoDownloadedAtTime;                                    // 0x1F90(0x0008) Net, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
			class FString                                              UploadedFromServerName;                                  // 0x1F98(0x0010) Net, ZeroConstructor, SaveGame, NativeAccessSpecifierPublic
			class FString                                              LatestUploadedFromServerName;                            // 0x1FA8(0x0010) ZeroConstructor, SaveGame, NativeAccessSpecifierPublic
			class FString                                              PreviousUploadedFromServerName;                          // 0x1FB8(0x0010) ZeroConstructor, SaveGame, NativeAccessSpecifierPublic
			class FString                                              TamedOnServerName;                                       // 0x1FC8(0x0010) ZeroConstructor, SaveGame, NativeAccessSpecifierPublic
			TArray<struct FDinoAncestorsEntry>                         DinoAncestors;                                           // 0x1FD8(0x0010) ZeroConstructor, SaveGame, NativeAccessSpecifierPublic
			TArray<struct FDinoAncestorsEntry>                         DinoAncestorsMale;                                       // 0x1FE8(0x0010) ZeroConstructor, SaveGame, NativeAccessSpecifierPublic
			TArray<struct FDinoAncestorsEntry>                         NextBabyDinoAncestors;                                   // 0x1FF8(0x0010) ZeroConstructor, Transient, SaveGame
			TArray<struct FDinoAncestorsEntry>                         NextBabyDinoAncestorsMale;                               // 0x2008(0x0010) ZeroConstructor, Transient, SaveGame
			int32_t                                                    MaxAllowedRandomMutations;                               // 0x2018(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
			int32_t                                                    RandomMutationRolls;                                     // 0x201C(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
			float                                                      RandomMutationChance;                                    // 0x2020(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
			float                                                      RandomMutationGivePoints;                                // 0x2024(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
			int32_t                                                    RandomMutationsMale;                                     // 0x2028(0x0004) BlueprintVisible, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
			int32_t                                                    RandomMutationsFemale;                                   // 0x202C(0x0004) BlueprintVisible, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
			int32_t                                                    GestationEggRandomMutationsFemale;                       // 0x2030(0x0004) ZeroConstructor, Transient, SaveGame, IsPlainOldData, NoDestructor
			int32_t                                                    GestationEggRandomMutationsMale;                         // 0x2034(0x0004) ZeroConstructor, Transient, SaveGame, IsPlainOldData, NoDestructor
			class FName                                                WakingTameDistanceSocketName;                            // 0x2038(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
			int32_t                                                    WakingTameConsumeEntireStackMaxQuantity;                 // 0x2040(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
			float                                                      AttackPlayerDesirabilityMultiplier;                      // 0x2044(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
			unsigned char                                              UnknownData_E0RK[0x10];                                  // 0x2048(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
			float                                                      FlyerAttachedExplosiveSpeedMultiplier;                   // 0x2058(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
			unsigned char                                              UnknownData_SQVX[0x4];                                   // 0x205C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
			TArray<struct FDinoExtraDefaultItemList>                   DinoExtraDefaultInventoryItems;                          // 0x2060(0x0010) Edit, ZeroConstructor, DisableEditOnInstance
			TArray<class UClass*>                                      DeathGiveEngramClasses;                                  // 0x2070(0x0010) Edit, ZeroConstructor, DisableEditOnInstance
			float                                                      SinglePlayerOutgoingDamageModifier;                      // 0x2080(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
			float                                                      SinglePlayerIncomingDamageModifier;                      // 0x2084(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
			unsigned char                                              UnknownData_B5DY[0x28];                                  // 0x2088(0x0028) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
			class UAnimMontage* DinoLevelUpAnimationOverride;                            // 0x20B0(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
			TArray<class UClass*>                                      DamageVictimClassesIgnoreBlockingGeomtryTrace;           // 0x20B8(0x0010) Edit, ZeroConstructor, DisableEditOnInstance
			unsigned char                                              UnknownData_KIDK[0x10];                                  // 0x20C8(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
			float                                                      CloneBaseElementCost;                                    // 0x20D8(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
			float                                                      CloneElementCostPerLevel;                                // 0x20DC(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
			int32_t                                                    LastValidTameVersion;                                    // 0x20E0(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
			int32_t                                                    SavedLastValidTameVersion;                               // 0x20E4(0x0004) ZeroConstructor, Transient, SaveGame, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
			class FName                                                NonDedicatedFreezeDinoPhysicsIfLevelUnloaded;            // 0x20E8(0x0008) ZeroConstructor, Transient, SaveGame, IsPlainOldData, NoDestructor
			TArray<class FName>                                        NonDedicatedFreezeWildDinoPhysicsIfLevelsUnloaded;       // 0x20F0(0x0010) ZeroConstructor, Transient, SaveGame
			struct FVector                                             UnboardLocationTraceOffset;                              // 0x2100(0x000C) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
			class FName                                                AttackLineOfSightMeshSocketName;                         // 0x210C(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
			float                                                      AttackForceWalkDistanceMultiplier;                       // 0x2114(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
			float                                                      AttackForceWalkRotationRateMultiplier;                   // 0x2118(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
			int32_t                                                    OverrideDinoTameSoundIndex;                              // 0x211C(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
			class USoundBase* SwimSound;                                               // 0x2120(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
			float                                                      SwimSoundIntervalPerHundredSpeed;                        // 0x2128(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
			unsigned char                                              UnknownData_6HV9[0x4];                                   // 0x212C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
			class UClass* TamedAIControllerOverride;                               // 0x2130(0x0008) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
			int32_t                                                    PersonalTamedDinoCost;                                   // 0x2138(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
			unsigned char                                              UnknownData_0K0L[0x4];                                   // 0x213C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
			double                                                     UploadEarliestValidTime;                                 // 0x2140(0x0008) Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor
			float                                                      StasisAutoDestroyInterval;                               // 0x2148(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
			float                                                      CarryCameraYawOffset;                                    // 0x214C(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
			float                                                      ExtraDamageMultiplier;                                   // 0x2150(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
			float                                                      ExtraTamedBaseHealthMultiplier;                          // 0x2154(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
			float                                                      attackRangeOffset;                                       // 0x2158(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
			float                                                      DinoExtraIncreasePlayerCollisionActivationDistanceSquared; // 0x215C(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
			unsigned char                                              UnknownData_3GJM[0x4];                                   // 0x2160(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
			float                                                      OverrideApproachRadius;                                  // 0x2164(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
			float                                                      TamedOverrideStasisComponentRadius;                      // 0x2168(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
			unsigned char                                              UnknownData_RFU8[0x4];                                   // 0x216C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
			class UStaticMesh* UniqueDino_MapMarkerMesh;                                // 0x2170(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
			struct FColor                                              UniqueDino_MapMarkerColor;                               // 0x2178(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
			float                                                      OverrideDinoMaxExperiencePoints;                         // 0x217C(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
			int32_t                                                    MaxDinoTameLevels;                                       // 0x2180(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
			int32_t                                                    DestroyTamesOverLevelClampOffset;                        // 0x2184(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
			float                                                      NursingTroughFoodEffectivenessMultiplier;                // 0x2188(0x0004) Edit, BlueprintVisible, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor
			unsigned char                                              UnknownData_UBR4[0x4];                                   // 0x218C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
			TArray<class UClass*>                                      ForceAllowFoodAsConsumableList;                          // 0x2190(0x0010) Edit, ZeroConstructor, DisableEditOnInstance
			int32_t                                                    CustomReplicatedData;                                    // 0x21A0(0x0004) Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor
			unsigned char                                              UnknownData_WADK[0x4];                                   // 0x21A4(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
			class FScriptMulticastDelegate                             OnNotifySetRider;                                        // 0x21A8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable
			class FScriptMulticastDelegate                             OnNotifyClearRider;                                      // 0x21B8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable
			class FScriptMulticastDelegate                             OnSetMountedDino;                                        // 0x21C8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable
			class FScriptMulticastDelegate                             OnClearMountedDino;                                      // 0x21D8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable
			class FScriptMulticastDelegate                             OnNotifyAddPassenger;                                    // 0x21E8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable
			class FScriptMulticastDelegate                             OnNotifyClearPassenger;                                  // 0x21F8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable
			double                                                     NextAllowedBedUseTime;                                   // 0x2208(0x0008) Net, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor
			float                                                      UseBedCooldownTime;                                      // 0x2210(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
			unsigned char                                              bUseBPGetOtherActorToIgnore : 1;                         // 0x2214(0x0001) BIT_FIELD Edit, BlueprintVisible, NoDestructor
			unsigned char                                              UnknownData_1AGV : 1;                                    // 0x2214(0x0001) BIT_FIELD (PADDING)
			unsigned char                                              MutagenApplied : 1;                                      // 0x2214(0x0001) BIT_FIELD Net, SaveGame, NoDestructor, NativeAccessSpecifierPublic
			unsigned char                                              bAllowWhistleThroughRemoteDino : 1;                      // 0x2214(0x0001) BIT_FIELD Edit, BlueprintVisible, NoDestructor
			unsigned char                                              bForceValidUnstasisCaster : 1;                           // 0x2214(0x0001) BIT_FIELD Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor
			unsigned char                                              bControlledDinoPreventsPlayerInventory : 1;              // 0x2214(0x0001) BIT_FIELD Edit, BlueprintVisible, NoDestructor
			unsigned char                                              bDinoFPVDisableMotionBlur : 1;                           // 0x2214(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
			unsigned char                                              bPaintingUseSaddle : 1;                                  // 0x2214(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
			unsigned char                                              bPaintingSupportSkins : 1;                               // 0x2215(0x0001) BIT_FIELD Edit, NoDestructor
			unsigned char                                              bDinoDontOverrideControllerPitch : 1;                    // 0x2215(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
			unsigned char                                              bUseBPOverridePassengerAdditiveAnim : 1;                 // 0x2215(0x0001) BIT_FIELD Edit, NoDestructor
			unsigned char                                              bReplicatePassengerTPVAim : 1;                           // 0x2215(0x0001) BIT_FIELD Edit, NoDestructor
			unsigned char                                              bForceDisableClientGravitySim : 1;                       // 0x2215(0x0001) BIT_FIELD BlueprintVisible, BlueprintReadOnly, Net, Transient, NoDestructor
			unsigned char                                              bUseBPGetTargetingDesirabilityForTurrets : 1;            // 0x2215(0x0001) BIT_FIELD Edit, BlueprintVisible, NoDestructor
			unsigned char                                              UnknownData_Q80U[0x2];                                   // 0x2216(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
			float                                                      CarriedAsBabyPassengerSizeLimitOverride;                 // 0x2218(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
			float                                                      MutagenBaseCost;                                         // 0x221C(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
			int32_t                                                    PaintTextureResolution;                                  // 0x2220(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
			unsigned char                                              UnknownData_UG5L[0x4];                                   // 0x2224(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
			class FScriptMulticastDelegate                             OnFlyerStartLanding;                                     // 0x2228(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable
			class FScriptMulticastDelegate                             OnFlyerLanded;                                           // 0x2238(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable
			class FScriptMulticastDelegate                             OnFlyerLandingInterrupted;                               // 0x2248(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable
			bool                                                       bOnlyDrawFloatingHUDAsLocalPlayerController;             // 0x2258(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
			bool                                                       bHasPlayerController;                                    // 0x2259(0x0001) Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor
			unsigned char                                              UnknownData_I6EQ[0x6];                                   // 0x225A(0x0006) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
			class UStaticMeshComponent* CopyDinoSettingsRangeMesh;                               // 0x2260(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor
			unsigned char                                              GestationGenderOverride;                                 // 0x2268(0x0001) ZeroConstructor, Transient, SaveGame, IsPlainOldData, NoDestructor
			unsigned char                                              bUseBPOverrideIsSubmergedForWaterTargeting : 1;          // 0x2269(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
			unsigned char                                              UnknownData_FBIB[0x6];                                   // 0x226A(0x0006) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
			class UPrimalInventoryComponent* SecondaryInventoryComponent;                             // 0x2270(0x0008) BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, SaveGame, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic

		



		/*AShooterWeapon* GetWeapon()
		{
			static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterCharacter.GetWeapon");
			struct {
				AShooterWeapon* ReturnValue;
			} Params;
			ProcessEvent(this, fn, &Params);
			return Params.ReturnValue;
		}
		void NetSetOverrideHeadHairColor(const struct FLinearColor& HairColor)
		{
			static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterCharacter.NetSetOverrideHeadHairColor");
			struct {
				FLinearColor HairColor;
			} Params;
			Params.HairColor = HairColor;
			ProcessEvent(this, fn, &Params);
		}*/
		//void TryCutEnemyGrapplingCable();
		//void RenamePlayer(const struct FString& NewName);
		//class APrimalDinoCharacter* GetRidingDino();
	};



	class UPrimalCharacterStatusComponent : public UActorComponent
	{
	public:
		float                                                      MaxStatusValues[0xC];                                    // 0x00D8(0x0030) Edit, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		float                                                      BaseLevelMaxStatusValues[0xC];                           // 0x0108(0x0030) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		unsigned char                                              NumberOfLevelUpPointsApplied[0xC];                       // 0x0138(0x000C) ZeroConstructor, Transient, SaveGame, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		unsigned char                                              NumberOfLevelUpPointsAppliedTamed[0xC];                  // 0x0144(0x000C) ZeroConstructor, Transient, SaveGame, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		float                                                      TamedIneffectivenessModifier;                            // 0x0150(0x0004) ZeroConstructor, Transient, SaveGame, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		float                                                      MovingStaminaRecoveryRateMultiplier;                     // 0x0154(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      RecoveryRateStatusValue[0xC];                            // 0x0158(0x0030) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      TimeToRecoverAfterDepletionStatusValue[0xC];             // 0x0188(0x0030) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      TimeToRecoverAfterDecreaseStatusValue[0xC];              // 0x01B8(0x0030) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      AmountMaxGainedPerLevelUpValue[0xC];                     // 0x01E8(0x0030) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      AmountMaxGainedPerLevelUpValueTamed[0xC];                // 0x0218(0x0030) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              MaxGainedPerLevelUpValueIsPercent[0xC];                  // 0x0248(0x000C) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              RecoveryRateIsPercent[0xC];                              // 0x0254(0x000C) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      TamingMaxStatMultipliers[0xC];                           // 0x0260(0x0030) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      TamingMaxStatAdditions[0xC];                             // 0x0290(0x0030) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      MaxLevelUpMultiplier[0xC];                               // 0x02C0(0x0030) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      TamedLandDinoSwimSpeedLevelUpEffectiveness;              // 0x02F0(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      TamingIneffectivenessMultiplier;                         // 0x02F4(0x0004) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      DinoRiderWeightMultiplier;                               // 0x02F8(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              CanLevelUpValue[0xC];                                    // 0x02FC(0x000C) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              DontUseValue[0xC];                                       // 0x0308(0x000C) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_NDNU[0x4];                                   // 0x0314(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		PAD(0x4);// struct FPrimalCharacterStatusStateThresholds               StatusStateThresholds[0xC];                              // 0x0318(0x0360) Edit, DisableEditOnInstance
		float                                                      ExperienceAutomaticConsciousIncreaseSpeed;               // 0x0678(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      CheatMaxWeight;                                          // 0x067C(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		int32_t                                                    CharacterStatusComponentPriority;                        // 0x0680(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      SuffocationHealthPercentDecreaseSpeed;                   // 0x0684(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      UnsubmergedOxygenIncreaseSpeed;                          // 0x0688(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      SubmergedOxygenDecreaseSpeed;                            // 0x068C(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      RunningStaminaConsumptionRate;                           // 0x0690(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      WalkingStaminaConsumptionRate;                           // 0x0694(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      SwimmingOrFlyingStaminaConsumptionRate;                  // 0x0698(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      JumpStaminaConsumption;                                  // 0x069C(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      WindedSpeedModifier;                                     // 0x06A0(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      WindedSpeedModifierSwimmingOrFlying;                     // 0x06A4(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      InjuredSpeedModifier;                                    // 0x06A8(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      HypothermicHealthDecreaseRateBase;                       // 0x06AC(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      HypothermicHealthDecreaseRatePerDegree;                  // 0x06B0(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      HyperthermicHealthDecreaseRateBase;                      // 0x06B4(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      HyperthermicHealthDecreaseRatePerDegree;                 // 0x06B8(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      XPEarnedPerStaminaConsumed;                              // 0x06BC(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      KillXPMultiplierPerCharacterLevel;                       // 0x06C0(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              bCanSuffocate : 1;                                       // 0x06C4(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		unsigned char                                              bCanSuffocateIfTamed : 1;                                // 0x06C4(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		unsigned char                                              bCanGetHungry : 1;                                       // 0x06C4(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		unsigned char                                              bUseStamina : 1;                                         // 0x06C4(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		unsigned char                                              bWalkingConsumesStamina : 1;                             // 0x06C4(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		unsigned char                                              bRunningConsumesStamina : 1;                             // 0x06C4(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		unsigned char                                              bConsumeFoodAutomatically : 1;                           // 0x06C4(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		unsigned char                                              bInfiniteFood : 1;                                       // 0x06C4(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		unsigned char                                              bAddExperienceAutomatically : 1;                         // 0x06C5(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		unsigned char                                              bConsumeWaterAutomatically : 1;                          // 0x06C5(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		unsigned char                                              bAutomaticallyUpdateTemperature : 1;                     // 0x06C5(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		unsigned char                                              bReplicateGlobalStatusValues : 1;                        // 0x06C5(0x0001) BIT_FIELD Edit, DisableEditOnInstance, SaveGame, NoDestructor, NativeAccessSpecifierPublic
		unsigned char                                              bAllowLevelUps : 1;                                      // 0x06C5(0x0001) BIT_FIELD Edit, Net, DisableEditOnInstance, SaveGame, NoDestructor, NativeAccessSpecifierPublic
		unsigned char                                              bInfiniteStats : 1;                                      // 0x06C5(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		unsigned char                                              bAllowSharingXPWithTribe : 1;                            // 0x06C5(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		unsigned char                                              bUseStatusSpeedModifiers : 1;                            // 0x06C5(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		unsigned char                                              bStatusSpeedModifierOnlyFullOrNone : 1;                  // 0x06C6(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		unsigned char                                              bIgnoreStatusSpeedModifierIfSwimming : 1;                // 0x06C6(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		unsigned char                                              bPreventJump : 1;                                        // 0x06C6(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		unsigned char                                              bInitializedBaseLevelMaxStatusValues : 1;                // 0x06C6(0x0001) BIT_FIELD SaveGame, NoDestructor, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_VESO : 1;                                    // 0x06C6(0x0001) BIT_FIELD (PADDING)
		unsigned char                                              bServerFirstInitialized : 1;                             // 0x06C6(0x0001) BIT_FIELD SaveGame, NoDestructor, NativeAccessSpecifierPublic
		unsigned char                                              bRunningUseDefaultSpeed : 1;                             // 0x06C6(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		unsigned char                                              bNeverAllowXP : 1;                                       // 0x06C6(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		unsigned char                                              bPreventTamedStatReplication : 1;                        // 0x06C7(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		unsigned char                                              bUseBPAdjustStatusValueModification : 1;                 // 0x06C7(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		unsigned char                                              bForceDefaultSpeed : 1;                                  // 0x06C7(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		unsigned char                                              UnknownData_TOTB : 1;                                    // 0x06C7(0x0001) BIT_FIELD (PADDING)
		unsigned char                                              bHideFoodStatusFromHUD : 1;                              // 0x06C7(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		unsigned char                                              bUseBPGetStatusNameString : 1;                           // 0x06C7(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		unsigned char                                              bHideStaminaStatusFromHUD : 1;                           // 0x06C7(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		unsigned char                                              bDontUseSpeedMultipleAsSpeed : 1;                        // 0x06C7(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		float                                                      ShareXPWithTribeRange;                                   // 0x06C8(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		int32_t                                                    BaseCharacterLevel;                                      // 0x06CC(0x0004) Edit, Net, ZeroConstructor, DisableEditOnInstance, SaveGame, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		uint16_t                                                   ExtraCharacterLevel;                                     // 0x06D0(0x0002) Net, ZeroConstructor, Transient, SaveGame, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_XK1P[0x2];                                   // 0x06D2(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      ExperiencePoints;                                        // 0x06D4(0x0004) BlueprintVisible, ZeroConstructor, Transient, SaveGame, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		float                                                      ReplicatedExperiencePoints;                              // 0x06D8(0x0004) Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor
		PAD(0x1);// ELevelExperienceRampType                                   LevelExperienceRampType;                                 // 0x06DC(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_5YOS[0x3];                                   // 0x06DD(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      MaxExperiencePoints;                                     // 0x06E0(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      BaseFoodConsumptionRate;                                 // 0x06E4(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      BaseWaterConsumptionRate;                                // 0x06E8(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      FortitudeTorpidityDecreaseMultiplier;                    // 0x06EC(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      FortitudeTorpidityIncreaseResistance;                    // 0x06F0(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      SubmergedWaterIncreaseRate;                              // 0x06F4(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      CrouchedWaterFoodConsumptionMultiplier;                  // 0x06F8(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      ProneWaterFoodConsumptionMultiplier;                     // 0x06FC(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      StaminaRecoveryDecreaseFoodMultiplier;                   // 0x0700(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      StaminaRecoveryDecreaseWaterMultiplier;                  // 0x0704(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      HealthRecoveryDecreaseFoodMultiplier;                    // 0x0708(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      BabyDinoConsumingFoodRateMultiplier;                     // 0x070C(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      DinoTamedAdultConsumingFoodRateMultiplier;               // 0x0710(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      BabyGestationConsumingFoodRateMultiplier;                // 0x0714(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      BabyDinoStarvationHealthDecreaseRateMultiplier;          // 0x0718(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      BabyMaxHealthPercent;                                    // 0x071C(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      CrouchedStaminaConsumptionMultiplier;                    // 0x0720(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      ProneStaminaConsumptionMultiplier;                       // 0x0724(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      StarvationHealthConsumptionRate;                         // 0x0728(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      DehyrdationHealthConsumptionRate;                        // 0x072C(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      StaminaConsumptionDecreaseWaterMultiplier;               // 0x0730(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      StaminaConsumptionDecreaseFoodMultiplier;                // 0x0734(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      HypothermiaDecreaseFoodMultiplierBase;                   // 0x0738(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      HypothermiaDecreaseFoodMultiplierPerDegree;              // 0x073C(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      HyperthermiaDecreaseWaterMultiplierBase;                 // 0x0740(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      HyperthermiaDecreaseWaterMultiplierPerDegree;            // 0x0744(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      HyperthermiaTemperatureThreshold;                        // 0x0748(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      HypothermiaTemperatureThreshold;                         // 0x074C(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      TorporExitPercentThreshold;                              // 0x0750(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      KnockedOutTorpidityRecoveryRateMultiplier;               // 0x0754(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      DehydrationTorpidityMultiplier;                          // 0x0758(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      StarvationTorpidityMultuplier;                           // 0x075C(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      StarvationTorpidityIncreaseRate;                         // 0x0760(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      DehyrdationTorpidityIncreaseRate;                        // 0x0764(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      InjuredTorpidityIncreaseMultiplier;                      // 0x0768(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      WeightSpeedDecreasePower;                                // 0x076C(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      WeightJumpDecreasePower;                                 // 0x0770(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      PoopItemMinFoodConsumptionInterval;                      // 0x0774(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      PoopItemMaxFoodConsumptionInterval;                      // 0x0778(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      TheMaxTorporIncreasePerBaseLevel;                        // 0x077C(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      CurrentStatusValuesReplicationInterval;                  // 0x0780(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      InsulationHyperthermiaOffsetExponent;                    // 0x0784(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      InsulationHyperthermiaOffsetScaler;                      // 0x0788(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      InsulationHypothermiaOffsetExponent;                     // 0x078C(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      InsulationHypothermiaOffsetScaler;                       // 0x0790(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      HypoCharacterInsulationValue;                            // 0x0794(0x0004) Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		float                                                      HyperCharacterInsulationValue;                           // 0x0798(0x0004) Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		float                                                      PoopItemFoodConsumptionCache;                            // 0x079C(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      LastHypothermalCharacterInsulationValue;                 // 0x07A0(0x0004) ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		float                                                      LastHyperthermalCharacterInsulationValue;                // 0x07A4(0x0004) ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		PAD(0x1);// EPrimalCharacterStatusValue                                MaxStatusValueToAutoUpdate;                              // 0x07A8(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_PWJD[0x3];                                   // 0x07A9(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      GenericXPMultiplier;                                     // 0x07AC(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      CraftEarnXPMultiplier;                                   // 0x07B0(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      MinInventoryWeight;                                      // 0x07B4(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      KillEarnXPMultiplier;                                    // 0x07B8(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      GenericEarnXPMultiplier;                                 // 0x07BC(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      SpecialEarnXPMultiplier;                                 // 0x07C0(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      HarvestEarnXPMultiplier;                                 // 0x07C4(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      DefaultHyperthermicInsulation;                           // 0x07C8(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      DefaultHypothermicInsulation;                            // 0x07CC(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      MaxTamingEffectivenessBaseLevelMultiplier;               // 0x07D0(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_Z0BS[0x4];                                   // 0x07D4(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FString                                              FoodStatusNameOverride;                                  // 0x07D8(0x0010) Edit, ZeroConstructor, DisableEditOnInstance
		class UTexture2D* FoodStatusIconBackgroundOverride;                        // 0x07E8(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class UTexture2D* FoodStatusIconForegroundOverride;                        // 0x07F0(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_4BQG[0x10];                                  // 0x07F8(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<unsigned char>                                      StatusValueModifierDescriptionIndices;                   // 0x0808(0x0010) Net, ZeroConstructor, Transient
		float                                                      CurrentStatusValues[0xC];                                // 0x0818(0x0030) ZeroConstructor, Transient, SaveGame, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		float                                                      AdditionalStatusValues[0xC];                             // 0x0848(0x0030) Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		float                                                      ReplicatedCurrentStatusValues[0xC];                      // 0x0878(0x0030) Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor
		float                                                      ReplicatedGlobalMaxStatusValues[0xC];                    // 0x08A8(0x0030) Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor
		float                                                      ReplicatedBaseLevelMaxStatusValues[0xC];                 // 0x08D8(0x0030) Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor
		float                                                      ReplicatedGlobalCurrentStatusValues[0xC];                // 0x0908(0x0030) Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor
		int8_t                                                     CurrentStatusStates[0xC];                                // 0x0938(0x000C) Net, ZeroConstructor, Transient, SaveGame, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_4DNP[0x184];                                 // 0x0944(0x0184) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      StaminaRecoveryExtraResourceDecreaseMultiplier;          // 0x0AC8(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      DehydrationStaminaRecoveryRate;                          // 0x0ACC(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      WaterConsumptionMultiplier;                              // 0x0AD0(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      FoodConsumptionMultiplier;                               // 0x0AD4(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		TArray<class USoundBase*>                                  EnteredStatusStateSounds;                                // 0x0AD8(0x0010) Edit, ZeroConstructor, DisableEditOnInstance
		TArray<class USoundBase*>                                  ExitStatusStateSounds;                                   // 0x0AE8(0x0010) Edit, ZeroConstructor, DisableEditOnInstance
		float                                                      ExtraOxygenSpeedStatMultiplier;                          // 0x0AF8(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      ExtraTamedHealthMultiplier;                              // 0x0AFC(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      WakingTameFoodConsumptionRateMultiplier;                 // 0x0B00(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      SwimmingStaminaRecoveryRateMultiplier;                   // 0x0B04(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_KMVT[0x1C];                                  // 0x0B08(0x001C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      MountedDinoDinoWeightMultiplier;                         // 0x0B24(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      ExtraWildDinoDamageMultiplier;                           // 0x0B28(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      ExtraTamedDinoDamageMultiplier;                          // 0x0B2C(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      WeightMultiplierWhenCarriedOrBased;                      // 0x0B30(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      WeightMultiplierForCarriedPassengers;                    // 0x0B34(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      WeightMultiplierForPlatformPassengersInventory;          // 0x0B38(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      DinoMaxStatAddMultiplierImprinting[0xC];                 // 0x0B3C(0x0030) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      DinoImprintingQuality;                                   // 0x0B6C(0x0004) Net, ZeroConstructor, Transient, SaveGame, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		unsigned char                                              bForceGainOxygen : 1;                                    // 0x0B70(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		unsigned char                                              bFreezeStatusValues : 1;                                 // 0x0B70(0x0001) BIT_FIELD BlueprintVisible, BlueprintReadOnly, NoDestructor
		unsigned char                                              UnknownData_VX55 : 1;                                    // 0x0B70(0x0001) BIT_FIELD (PADDING)
		unsigned char                                              bUseBPModifyMaxLevel : 1;                                // 0x0B70(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		unsigned char                                              bNoStaminaRecoveryWhenStarving : 1;                      // 0x0B70(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		unsigned char                                              bApplyingStatusValueModifiers : 1;                       // 0x0B70(0x0001) BIT_FIELD BlueprintVisible, BlueprintReadOnly, NoDestructor
		unsigned char                                              bDontScaleMeleeDamage : 1;                               // 0x0B70(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		unsigned char                                              UnknownData_7EB2[0x3];                                   // 0x0B71(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      TamedBaseHealthMultiplier;                               // 0x0B74(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      ExtraBabyDinoConsumingFoodRateMultiplier;                // 0x0B78(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_IV1C[0x4];                                   // 0x0B7C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class FString>                                      StatusValueNameOverrides;                                // 0x0B80(0x0010) Edit, ZeroConstructor, DisableEditOnInstance
		class UClass* RegainOxygenDamageType;                                  // 0x0B90(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		bool                                                       bForceAllowStatusModifierSortingWhenTamed;               // 0x0B98(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_YXRI[0x4F7];                                 // 0x0B99(0x04F7) MISSED OFFSET (PADDING)

	public:
		/*void UpdateWeightStat(bool bForceSetValue);
		void UpdatedCurrentStatusValue(EPrimalCharacterStatusValue ValueType, float amount, bool bManualModification, class UClass* DamageTypeClass, bool bDamageDontKill, bool bDontAdjustOtherStats);
		void TickStatus(float DeltaTime, bool bForceStatusUpdate);
		void SetTamed(float TameIneffectivenessModifier, bool bSkipAddingTamedLevels);
		void SetMaxStatusValue(EPrimalCharacterStatusValue statType, float NewValue);
		void SetLevelUpPoints(EPrimalCharacterStatusValue ValueType, bool bTamedPoints, int32_t newPoints);
		void SetExtraCharacterLevel(int32_t NewExtraCharacterLevel);
		void SetBaseLevelNoStatChange(int32_t Level);
		void SetBaseLevelCustomized(int32_t Level, TArray<struct FStatValuePair> CustomBaseStats, TArray<EPrimalCharacterStatusValue> PrioritizeStats, bool bDontCurrentSetToMax);
		void SetBaseLevel(int32_t Level, bool bDontCurrentSetToMax);
		void SetAllStatsToMaximumExcluding(EPrimalCharacterStatusValue exclude);
		void SetAllStatsToMaximum();
		void ServerSyncReplicatedValues();
		void RescaleMaxStat(EPrimalCharacterStatusValue LevelUpValueType, float TargetValue, bool bIsPercentOfTrueValue);
		void RescaleAllStats();
		void RemoveStatusValueModifierByInstigator(class AActor* Instigator);
		void RemoveStatusValueModifierByIndex(int32_t index);
		void OnRep_ReplicatedExperiencePoints();
		void OnRep_GlobalMaxStatusValues();
		void OnRep_GlobalCurrentStatusValues();
		void OnRep_GlobalBaseLevelMaxStatusValues();
		void OnRep_CurrentStatusValues();
		void NetSyncMaxStatusValues(TArray<float> NetMaxStatusValues, TArray<float> NetBaseMaxStatusValues);
		float ModifyCurrentStatusValue(EPrimalCharacterStatusValue ValueType, float amount, bool bPercentOfMax, bool bPercentOfCurrent, bool bManualModification, bool bSetValue, class UClass* DamageTypeClass, bool bDamageDontKill, bool bForceSetValue);
		bool IsInStatusState(EPrimalCharacterStatusState StateType);
		bool IsAtMaxLevel();
		bool IsAtMaxExperience();
		bool HasExperienceForLevelUp();
		class FString GetStatusValueString(EPrimalCharacterStatusValue ValueType, bool bValueOnly);
		float GetStatusValueRecoveryRate(EPrimalCharacterStatusValue ValueType);
		class FString GetStatusNameString(EPrimalCharacterStatusValue ValueType);
		class FString GetStatusMaxValueString(EPrimalCharacterStatusValue ValueType, bool bValueOnly);
		float GetRawStatusValueRecoveryRate(EPrimalCharacterStatusValue ValueType);
		float GetMovementSpeedModifier();
		float GetMeleeDamageModifier();
		int32_t GetLevelUpPoints(EPrimalCharacterStatusValue ValueType, bool bTamedPoints);
		int32_t GetExtraCharacterLevel();
		float GetExperienceRequiredForPreviousLevelUp();
		float GetExperienceRequiredForNextLevelUp();
		void GetDinoFoodConsumptionRateMultiplier(float* amount);
		class FString GetDebugString();
		float GetCraftingSpeedModifier();
		int32_t GetCharacterLevel();
		int32_t GetBaseLevelFromLevelUpPoints(bool bIncludePlayerAddedLevels);
		void CopyPrimalStatusComponentValues(class UPrimalCharacterStatusComponent* src);
		EPrimalCharacterStatusValue STATIC_ConvertIntToCharacterStatusEnum(int32_t InInteger);
		void ClientSyncMaxStatusValues(TArray<float> NetMaxStatusValues, TArray<float> NetBaseMaxStatusValues);
		void ClearAllLevelUpPoints(bool bTamedPoints);
		bool CanLevelUp(EPrimalCharacterStatusValue LevelUpValueType, bool bCheckExperience);
		bool CanGainLevel();
		void BPSetRecoveryRateStatusValue(EPrimalCharacterStatusValue ValueType, float NewValue);
		int32_t BPModifyMaxLevel(int32_t InMaxLevel);
		float BPModifyMaxExperiencePoints(float InMaxExperiencePoints);
		float BPGetPercentStatusValue(EPrimalCharacterStatusValue ValueType);
		float BPGetMaxStatusValue(EPrimalCharacterStatusValue ValueType);
		float BPGetCurrentStatusValue(EPrimalCharacterStatusValue ValueType);
		void BPDirectSetMaxStatusValue(EPrimalCharacterStatusValue ValueType, float NewValue);
		void BPDirectSetCurrentStatusValue(EPrimalCharacterStatusValue ValueType, float NewValue);
		float BPAdjustStatusValueModification(EPrimalCharacterStatusValue ValueType, float amount, class UClass* DamageTypeClass, bool bManualModification);
		void AddStatusValueModifier(EPrimalCharacterStatusValue ValueType, float amount, float Speed, bool bContinueOnUnchangedValue, bool bSetValue, int32_t StatusValueModifierDescriptionIndex, bool bResetExistingModifierDescriptionIndex, float LimitExistingModifierDescriptionToMaxAmount, bool bSetAdditionalValue, EPrimalCharacterStatusValue StopAtValueNearMax, bool bMakeUntameable, class UClass* ScaleValueByCharacterDamageType, class AActor* Instigator);
		void AddExperience(float HowMuch, bool bShareWithTribe, EXPType XPType);*/
		//static UClass* StaticClass();
	};





	/**
	 * Class Engine.PlayerController
	 * Size -> 0x0398 (FullSize[0x0858] - InheritedSize[0x04C0])
	 */
	class APlayerController : public AController
	{
	public:
		class UPlayer*                                             Player;                                                  // 0x04C0(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_RLL2 : 1;                                    // 0x04C8(0x0001) BIT_FIELD (PADDING)
		unsigned char                                              bShowExtendedInfoKey : 1;                                // 0x04C8(0x0001) BIT_FIELD BlueprintVisible, BlueprintReadOnly, Transient, NoDestructor
		unsigned char                                              UnknownData_3EPX[0x7];                                   // 0x04C9(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class APawn*                                               AcknowledgedPawn;                                        // 0x04D0(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor
		class UInterpTrackInstDirector*                            ControllingDirTrackInst;                                 // 0x04D8(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_2TKV[0x8];                                   // 0x04E0(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class AHUD*                                                MyHUD;                                                   // 0x04E8(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor
		class APlayerCameraManager*                                PlayerCameraManager;                                     // 0x04F0(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor
		class UClass*                                              PlayerCameraManagerClass;                                // 0x04F8(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor
		bool                                                       bAutoManageActiveCameraTarget;                           // 0x0500(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_2W09[0x3];                                   // 0x0501(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FRotator                                            TargetViewRotation;                                      // 0x0504(0x000C) Net, ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_N6CO[0x10];                                  // 0x0510(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class AActor*>                                      HiddenActors;                                            // 0x0520(0x0010) ZeroConstructor
		float                                                      LastSpectatorStateSynchTime;                             // 0x0530(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor
		int32_t                                                    ClientCap;                                               // 0x0534(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_WXVZ[0x8];                                   // 0x0538(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UCheatManager*                                       CheatManager;                                            // 0x0540(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		class UClass*                                              CheatClass;                                              // 0x0548(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor
		class UPlayerInput*                                        PlayerInput;                                             // 0x0550(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		TArray<struct FActiveForceFeedbackEffect>                  ActiveForceFeedbackEffects;                              // 0x0558(0x0010) ZeroConstructor, Transient
		unsigned char                                              UnknownData_4T64[0x60];                                  // 0x0568(0x0060) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		unsigned char                                              UnknownData_WK9M : 3;                                    // 0x05C8(0x0001) BIT_FIELD (PADDING)
		unsigned char                                              bCheatPlayer : 1;                                        // 0x05C8(0x0001) BIT_FIELD BlueprintVisible, BlueprintReadOnly, NoDestructor
		unsigned char                                              bIsAdmin : 1;                                            // 0x05C8(0x0001) BIT_FIELD BlueprintVisible, NoDestructor
		unsigned char                                              UnknownData_JFMK[0x3];                                   // 0x05C9(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		unsigned char                                              NetPlayerIndex;                                          // 0x05CC(0x0001) ZeroConstructor, DuplicateTransient, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_95QY[0x8B];                                  // 0x05CD(0x008B) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UNetConnection*                                      PendingSwapConnection;                                   // 0x0658(0x0008) ZeroConstructor, DuplicateTransient, IsPlainOldData, NoDestructor
		class UNetConnection*                                      NetConnection;                                           // 0x0660(0x0008) ZeroConstructor, DuplicateTransient, IsPlainOldData, NoDestructor
		struct FRotator                                            RotationInput;                                           // 0x0668(0x000C) BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		struct FRotator                                            PreviousRotationInput;                                   // 0x0674(0x000C) BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		float                                                      InputYawScale;                                           // 0x0680(0x0004) Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor
		float                                                      InputPitchScale;                                         // 0x0684(0x0004) Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor
		float                                                      InputRollScale;                                          // 0x0688(0x0004) Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor
		unsigned char                                              bShowMouseCursor : 1;                                    // 0x068C(0x0001) BIT_FIELD Edit, BlueprintVisible, NoDestructor
		unsigned char                                              bForceShowMouseCursor : 1;                               // 0x068C(0x0001) BIT_FIELD Edit, BlueprintVisible, NoDestructor
		unsigned char                                              bEnableClickEvents : 1;                                  // 0x068C(0x0001) BIT_FIELD Edit, BlueprintVisible, NoDestructor
		unsigned char                                              bEnableTouchEvents : 1;                                  // 0x068C(0x0001) BIT_FIELD Edit, BlueprintVisible, NoDestructor
		unsigned char                                              bEnableMouseOverEvents : 1;                              // 0x068C(0x0001) BIT_FIELD Edit, BlueprintVisible, NoDestructor
		unsigned char                                              bEnableTouchOverEvents : 1;                              // 0x068C(0x0001) BIT_FIELD Edit, BlueprintVisible, NoDestructor
		unsigned char                                              bForceFeedbackEnabled : 1;                               // 0x068C(0x0001) BIT_FIELD Edit, BlueprintVisible, NoDestructor
		unsigned char                                              UnknownData_4ROP[0x3];                                   // 0x068D(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		EMouseCursor                                               DefaultMouseCursor;                                      // 0x0690(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor
		EMouseCursor                                               CurrentMouseCursor;                                      // 0x0691(0x0001) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		ECollisionChannel                                          DefaultClickTraceChannel;                                // 0x0692(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor
		ECollisionChannel                                          CurrentClickTraceChannel;                                // 0x0693(0x0001) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_P40N[0x10];                                  // 0x0694(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       bLockedInputUI;                                          // 0x06A4(0x0001) ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_KDE9[0x3];                                   // 0x06A5(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class USceneComponent*                                     TransformComponent;                                      // 0x06A8(0x0008) ExportObject, ZeroConstructor, InstancedReference, SubobjectReference, IsPlainOldData, NoDestructor, Protected
		unsigned char                                              UnknownData_C6ME[0x70];                                  // 0x06B0(0x0070) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UInputComponent*                                     InactiveStateInputComponent;                             // 0x0720(0x0008) ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected
		unsigned char                                              UnknownData_C42O[0x18];                                  // 0x0728(0x0018) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UTouchInterface*                                     CurrentTouchInterface;                                   // 0x0740(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, Protected
		unsigned char                                              UnknownData_HGUM[0x28];                                  // 0x0748(0x0028) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class ASpectatorPawn*                                      SpectatorPawn;                                           // 0x0770(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor
		struct FVector                                             SpawnLocation;                                           // 0x0778(0x000C) ZeroConstructor, IsPlainOldData, NoDestructor, Protected
		unsigned char                                              UnknownData_3NOI[0x4];                                   // 0x0784(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		uint16_t                                                   SeamlessTravelCount;                                     // 0x0788(0x0002) ZeroConstructor, IsPlainOldData, NoDestructor
		uint16_t                                                   LastCompletedSeamlessTravelCount;                        // 0x078A(0x0002) ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_XI8X[0xCC];                                  // 0x078C(0x00CC) MISSED OFFSET (PADDING)

	public:
		bool WasInputKeyJustReleased(const struct FKey& Key);
		bool WasInputKeyJustPressed(const struct FKey& Key);
		void ToggleSpeaking(bool bSpeaking, bool UseSuperRange);
		void SwitchLevel(const class FString& URL);
		void StartFire(unsigned char FireModeNum);
		void SetVirtualJoystickVisibility(bool bVisible);
		void SetViewTargetWithBlend(class AActor* NewViewTarget, float BlendTime, EViewTargetBlendFunction BlendFunc, float BlendExp, bool bLockOutgoing);
		void SetName(const class FString& S);
		void SetIgnoreMoveInput(bool bNewMoveInput);
		void SetIgnoreLookInput(bool bNewLookInput);
		void SetAudioListenerOverride(class USceneComponent* attachToComponent, const struct FVector& Location, const struct FRotator& Rotation);
		void ServerViewSelf(const struct FViewTargetTransitionParams& TransitionParams);
		void ServerViewPrevPlayer();
		void ServerViewNextPlayer();
		void ServerVerifyViewTarget();
		void ServerUpdateLevelVisibility(const class FName& PackageName, bool bIsVisible);
		void ServerUpdateCamera(const struct FVector_NetQuantize& CamLoc, int32_t CamPitchAndYaw);
		void ServerUnmutePlayer(const struct FUniqueNetIdRepl& PlayerId);
		void ServerToggleAILogging();
		void ServerShortTimeout();
		void ServerSetSpectatorLocation(const struct FVector& NewLoc);
		void ServerRestartPlayer();
		void ServerReceivedPlayerControllerAck();
		void ServerProcessNetExecCommandUnreliable(class AActor* forActor, const class FName& CommandName, const struct FBPNetExecParams& ExecParams);
		void ServerProcessNetExecCommand(class AActor* forActor, const class FName& CommandName, const struct FBPNetExecParams& ExecParams);
		void ServerPause();
		void ServerNotifyLoadedWorld(const class FName& WorldPackageName);
		void ServerMutePlayer(const struct FUniqueNetIdRepl& PlayerId);
		void ServerCheckClientPossession();
		void ServerChangeName(const class FString& S);
		void ServerCamera(const class FName& NewMode);
		void ServerAcknowledgePossession(class APawn* P);
		void SendToConsole(const class FString& Command);
		void RestartLevel();
		void ResetIgnoreInputFlags();
		bool ProjectWorldLocationToScreen(const struct FVector& WorldLocation, struct FVector2D* ScreenLocation);
		void PlayDynamicForceFeedback(float Intensity, float Duration, bool bAffectsLeftLarge, bool bAffectsLeftSmall, bool bAffectsRightLarge, bool bAffectsRightSmall, EDynamicForceFeedbackAction Action, const struct FLatentActionInfo& LatentInfo);
		void Pause();
		void NetSpawnActorAtLocation(class UClass* anActorClass, const struct FVector_NetQuantize& AtLocation, const struct FRotator_NetQuantize& AtRotation, class USceneComponent* attachToComponent, int32_t dataIndex, const class FName& attachSocketName);
		bool NetConnectionHasActiveActor(class AActor* anActor);
		void LocalTravel(const class FString& URL);
		bool IsMoveInputIgnored();
		bool IsLookInputIgnored();
		bool IsInputKeyDown(const struct FKey& Key);
		void HandleRespawned(class APawn* NewPawn, bool IsFirstSpawn);
		void GetViewportSize(int32_t* SizeX, int32_t* SizeY);
		bool GetMousePosition(float* LocationX, float* LocationY, bool bEvenWhenMouseNotAttached);
		struct FVector GetInputVectorKeyState(const struct FKey& Key);
		void GetInputTouchState(ETouchIndex FingerIndex, float* LocationX, float* LocationY, bool* bIsCurrentlyPressed);
		void GetInputMouseDelta(float* DeltaX, float* DeltaY);
		void GetInputMotionState(struct FVector* Tilt, struct FVector* RotationRate, struct FVector* Gravity, struct FVector* Acceleration);
		float GetInputKeyTimeDown(const struct FKey& Key);
		void GetInputAnalogStickState(EControllerAnalogStick WhichStick, float* StickX, float* StickY);
		float GetInputAnalogKeyState(const struct FKey& Key);
		class AHUD* GetHUD();
		bool GetHitResultUnderFingerForObjects(ETouchIndex FingerIndex, TArray<EObjectTypeQuery> ObjectTypes, bool bTraceComplex, struct FHitResult* HitResult);
		bool GetHitResultUnderFingerByChannel(ETouchIndex FingerIndex, ETraceTypeQuery TraceChannel, bool bTraceComplex, struct FHitResult* HitResult);
		bool GetHitResultUnderFinger(ETouchIndex FingerIndex, ECollisionChannel TraceChannel, bool bTraceComplex, struct FHitResult* HitResult);
		bool GetHitResultUnderCursorForObjects(TArray<EObjectTypeQuery> ObjectTypes, bool bTraceComplex, struct FHitResult* HitResult);
		bool GetHitResultUnderCursorByChannel(ETraceTypeQuery TraceChannel, bool bTraceComplex, struct FHitResult* HitResult);
		bool GetHitResultUnderCursor(ECollisionChannel TraceChannel, bool bTraceComplex, struct FHitResult* HitResult);
		void FOV(float NewFOV);
		void EnableCheats(const class FString& pass);
		bool DeprojectScreenPositionToWorld(float ScreenX, float ScreenY, struct FVector* WorldLocation, struct FVector* WorldDirection);
		bool DeprojectMousePositionToWorld(struct FVector* WorldLocation, struct FVector* WorldDirection);
		void CopyStringToClipboard(const class FString& S);
		void ConsoleKey(const struct FKey& Key);
		void ClientWasKicked(const class FText& KickReason);
		void ClientVoiceHandshakeComplete();
		void ClientUpdateLevelStreamingStatus(const class FName& PackageName, bool bNewShouldBeLoaded, bool bNewShouldBeVisible, bool bNewShouldBlockOnLoad, int32_t LODIndex);
		void ClientUnmutePlayer(const struct FUniqueNetIdRepl& PlayerId);
		void ClientTravelInternal(const class FString& URL, ETravelType TravelType, bool bSeamless, const struct FGuid& MapPackageGuid);
		void ClientTravel(const class FString& URL, ETravelType TravelType, bool bSeamless, const struct FGuid& MapPackageGuid);
		void ClientTeleportSucceeded(const struct FVector& TeleportLoc, const struct FRotator& TeleportRot, bool bSimpleTeleport);
		void ClientTeamMessage(class APlayerState* SenderPlayerState, const class FString& S, const class FName& Type, float MsgLifeTime);
		void ClientStopForceFeedback(class UForceFeedbackEffect* ForceFeedbackEffect, const class FName& Tag);
		void ClientStopCameraShake(class UClass* Shake);
		void ClientStopCameraAnim(class UCameraAnim* AnimToStop);
		void ClientSpawnCameraLensEffect(class UClass* LensEffectEmitterClass);
		void ClientSetViewTarget(class AActor* A, const struct FViewTargetTransitionParams& TransitionParams);
		void ClientSetHUD(class UClass* NewHUDClass);
		void ClientSetForceMipLevelsToBeResident(class UMaterialInterface* Material, float ForceDuration, int32_t CinematicTextureGroups);
		void ClientSetCinematicMode(bool bInCinematicMode, bool bAffectsMovement, bool bAffectsTurning, bool bAffectsHUD);
		void ClientSetCameraMode(const class FName& NewCamMode);
		void ClientSetCameraFade(bool bEnableFading, const struct FColor& FadeColor, const struct FVector2D& FadeAlpha, float FadeTime, bool bFadeAudio);
		void ClientSetBlockOnAsyncLoading();
		void ClientSendNetExecCommandToServer(class AActor* forActor, const class FName& CommandName, const struct FBPNetExecParams& ExecParams, bool bIsReliable);
		void ClientReturnToMainMenu(const class FString& ReturnReason);
		void ClientRetryClientRestart(class APawn* NewPawn);
		void ClientRestart(class APawn* NewPawn);
		void ClientReset();
		void ClientRepObjRef(class UObject* Object);
		void ClientReceiveLocalizedMessage(class UClass* Message, int32_t Switch, class APlayerState* RelatedPlayerState_2, class APlayerState* RelatedPlayerState_3, class UObject* OptionalObject);
		void ClientProcessSimpleNetExecCommandUnreliableBP(class AActor* forActor, const class FName& CommandName);
		void ClientProcessSimpleNetExecCommandBP(class AActor* forActor, const class FName& CommandName);
		void ClientProcessNetExecCommandUnreliableBP(class AActor* forActor, const class FName& CommandName, const struct FBPNetExecParams& ExecParams);
		void ClientProcessNetExecCommandUnreliable(class AActor* forActor, const class FName& CommandName, const struct FNetExecParams& ExecParams);
		void ClientProcessNetExecCommandBP(class AActor* forActor, const class FName& CommandName, const struct FBPNetExecParams& ExecParams);
		void ClientProcessNetExecCommand(class AActor* forActor, const class FName& CommandName, const struct FNetExecParams& ExecParams);
		void ClientPrestreamTextures(class AActor* ForcedActor, float ForceDuration, bool bEnableStreaming, int32_t CinematicTextureGroups);
		void ClientPrepareMapChange(const class FName& LevelName, bool bFirst, bool bLast);
		void ClientPlaySoundAtLocation(class USoundBase* Sound, const struct FVector& Location, float VolumeMultiplier, float PitchMultiplier);
		void ClientPlaySound(class USoundBase* Sound, float VolumeMultiplier, float PitchMultiplier);
		void ClientPlayForceFeedback(class UForceFeedbackEffect* ForceFeedbackEffect, bool bLooping, const class FName& Tag);
		void ClientPlayCameraShake(class UClass* Shake, float Scale, ECameraAnimPlaySpace PlaySpace, const struct FRotator& UserPlaySpaceRot, float Speed, bool bForceUseWorldCameraShakeScale);
		void ClientPlayCameraAnim(class UCameraAnim* AnimToPlay, float Scale, float Rate, float BlendInTime, float BlendOutTime, bool bLoop, bool bRandomStartTime, ECameraAnimPlaySpace Space, const struct FRotator& CustomPlaySpace);
		void ClientNotifyRespawned(class APawn* NewPawn, bool IsFirstSpawn);
		void ClientNotifyReconnected(class APawn* NewPawn);
		void ClientNetGUIDActorDeletion(const struct FNetworkGUID& TheNetGUID);
		void ClientMutePlayer(const struct FUniqueNetIdRepl& PlayerId);
		void ClientMessage(const class FString& S, const class FName& Type, float MsgLifeTime);
		void ClientIgnoreMoveInput(bool bIgnore);
		void ClientIgnoreLookInput(bool bIgnore);
		void ClientGotoState(const class FName& NewState);
		void ClientGameEnded(class AActor* EndGameFocus, bool bIsWinner);
		void ClientForceGarbageCollection();
		void ClientFlushLevelStreaming();
		void ClientEnableNetworkVoice(bool bEnable);
		void ClientCommitMapChange();
		void ClientClearCameraLensEffects();
		void ClientCapBandwidth(int32_t Cap);
		void ClientCancelPendingMapChange();
		void ClientAddTextureStreamingLoc(const struct FVector& InLoc, float Duration, bool bOverrideLocation);
		void ClearAudioListenerOverride();
		void Camera(const class FName& NewMode);
		class AActor* BPGetAimedUseActor();
		void AddYawInput(float val);
		void AddRollInput(float val);
		void AddPitchInput(float val);
		void ActivateTouchInterface(class UTouchInterface* NewTouchInterface);
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.HUD
	 * Size -> 0x00E8 (FullSize[0x0550] - InheritedSize[0x0468])
	 */
	class AHUD : public AActor
	{
	public:
		struct FColor                                              WhiteColor;                                              // 0x0468(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor
		struct FColor                                              GreenColor;                                              // 0x046C(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor
		struct FColor                                              RedColor;                                                // 0x0470(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_5961[0x4];                                   // 0x0474(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class APlayerController*                                   PlayerOwner;                                             // 0x0478(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              bLostFocusPaused : 1;                                    // 0x0480(0x0001) BIT_FIELD Transient, NoDestructor
		unsigned char                                              bShowHUD : 1;                                            // 0x0480(0x0001) BIT_FIELD Config, NoDestructor
		unsigned char                                              bShowDebugInfo : 1;                                      // 0x0480(0x0001) BIT_FIELD NoDestructor
		unsigned char                                              bShowHitBoxDebugInfo : 1;                                // 0x0480(0x0001) BIT_FIELD NoDestructor
		unsigned char                                              bShowOverlays : 1;                                       // 0x0480(0x0001) BIT_FIELD NoDestructor
		unsigned char                                              bEnableDebugTextShadow : 1;                              // 0x0480(0x0001) BIT_FIELD NoDestructor
		unsigned char                                              UnknownData_IF2F[0x7];                                   // 0x0481(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class AActor*>                                      PostRenderedActors;                                      // 0x0488(0x0010) ZeroConstructor
		float                                                      LastHUDRenderTime;                                       // 0x0498(0x0004) ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		float                                                      RenderDelta;                                             // 0x049C(0x0004) ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		TArray<class FName>                                        DebugDisplay;                                            // 0x04A0(0x0010) ZeroConstructor, Config, GlobalConfig
		TArray<class FName>                                        ToggledDebugCategories;                                  // 0x04B0(0x0010) ZeroConstructor, Config, GlobalConfig
		class UCanvas*                                             Canvas;                                                  // 0x04C0(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected
		class UCanvas*                                             DebugCanvas;                                             // 0x04C8(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, Protected
		TArray<struct FDebugTextInfo>                              DebugTextList;                                           // 0x04D0(0x0010) ZeroConstructor, Protected
		unsigned char                                              UnknownData_UFMQ[0x70];                                  // 0x04E0(0x0070) MISSED OFFSET (PADDING)

	public:
		void ShowHUD();
		void ShowDebugToggleSubCategory(const class FName& Category);
		void ShowDebug(const class FName& DebugType);
		void RemoveDebugText(class AActor* SrcActor, bool bLeaveDurationText);
		void RemoveAllDebugStrings();
		void ReceiveHitBoxRelease(const class FName& BoxName);
		void ReceiveHitBoxEndCursorOver(const class FName& BoxName);
		void ReceiveHitBoxClick(const class FName& BoxName);
		void ReceiveHitBoxBeginCursorOver(const class FName& BoxName);
		void ReceiveDrawHUD(int32_t SizeX, int32_t SizeY);
		struct FVector Project(const struct FVector& Location);
		void GetTextSize(const class FString& Text, float* OutWidth, float* OutHeight, class UFont* Font, float Scale);
		class APlayerController* GetOwningPlayerController();
		class APawn* GetOwningPawn();
		void GetActorsInSelectionRectangle(class UClass* ClassFilter, const struct FVector2D& FirstPoint, const struct FVector2D& SecondPoint, TArray<class AActor*>* OutActors, bool bIncludeNonCollidingComponents, bool bActorMustBeFullyEnclosed);
		void DrawTextureSimple(class UTexture* Texture, float ScreenX, float ScreenY, float Scale, bool bScalePosition);
		void DrawTexture(class UTexture* Texture, float ScreenX, float ScreenY, float ScreenW, float ScreenH, float TextureU, float TextureV, float TextureUWidth, float TextureVHeight, const struct FLinearColor& TintColor, EBlendMode BlendMode, float Scale, bool bScalePosition, float Rotation, const struct FVector2D& RotPivot);
		void DrawText(const class FString& Text, const struct FLinearColor& TextColor, float ScreenX, float ScreenY, class UFont* Font, float Scale, bool bScalePosition);
		void DrawRect(const struct FLinearColor& RectColor, float ScreenX, float ScreenY, float ScreenW, float ScreenH);
		void DrawMaterialSimple(class UMaterialInterface* Material, float ScreenX, float ScreenY, float ScreenW, float ScreenH, float Scale, bool bScalePosition);
		void DrawMaterial(class UMaterialInterface* Material, float ScreenX, float ScreenY, float ScreenW, float ScreenH, float MaterialU, float MaterialV, float MaterialUWidth, float MaterialVHeight, float Scale, bool bScalePosition, float Rotation, const struct FVector2D& RotPivot);
		void DrawLine(float StartScreenX, float StartScreenY, float EndScreenX, float EndScreenY, const struct FLinearColor& LineColor);
		void Deproject(float ScreenX, float ScreenY, struct FVector* WorldPosition, struct FVector* WorldDirection);
		void AddHitBox(const struct FVector2D& Position, const struct FVector2D& Size, const class FName& Name, bool bConsumesInput, int32_t Priority);
		void AddDebugText(const class FString& DebugText, class AActor* SrcActor, float Duration, const struct FVector& Offset, const struct FVector& DesiredOffset, const struct FColor& TextColor, bool bSkipOverwriteCheck, bool bAbsoluteLocation, bool bKeepAttachedToActor, class UFont* InFont, float FontScale);
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.Info
	 * Size -> 0x0000 (FullSize[0x0468] - InheritedSize[0x0468])
	 */
	class AInfo : public AActor
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.PlayerState
	 * Size -> 0x0088 (FullSize[0x04F0] - InheritedSize[0x0468])
	 */
	class APlayerState : public AInfo
	{
	public:
		float                                                      Score;                                                   // 0x0468(0x0004) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor
		unsigned char                                              Ping;                                                    // 0x046C(0x0001) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_7YLE[0x3];                                   // 0x046D(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FString                                              PlayerName;                                              // 0x0470(0x0010) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, RepNotify
		unsigned char                                              UnknownData_5DEV[0x10];                                  // 0x0480(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int32_t                                                    PlayerId;                                                // 0x0490(0x0004) Net, ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              bIsSpectator : 1;                                        // 0x0494(0x0001) BIT_FIELD BlueprintVisible, BlueprintReadOnly, Net, NoDestructor
		unsigned char                                              bOnlySpectator : 1;                                      // 0x0494(0x0001) BIT_FIELD Net, NoDestructor
		unsigned char                                              bIsABot : 1;                                             // 0x0494(0x0001) BIT_FIELD BlueprintVisible, BlueprintReadOnly, Net, NoDestructor
		unsigned char                                              UnknownData_70K4 : 1;                                    // 0x0494(0x0001) BIT_FIELD (PADDING)
		unsigned char                                              bIsInactive : 1;                                         // 0x0494(0x0001) BIT_FIELD Net, RepNotify, NoDestructor
		unsigned char                                              bFromPreviousLevel : 1;                                  // 0x0494(0x0001) BIT_FIELD Net, NoDestructor
		unsigned char                                              UnknownData_J5O2[0x3];                                   // 0x0495(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int32_t                                                    StartTime;                                               // 0x0498(0x0004) Net, ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_OKIZ[0x4];                                   // 0x049C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UClass*                                              EngineMessageClass;                                      // 0x04A0(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_5XBI[0x18];                                  // 0x04A8(0x0018) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FUniqueNetIdRepl                                    UniqueID;                                                // 0x04C0(0x0010) Net, RepNotify
		unsigned char                                              UnknownData_RSGT[0x20];                                  // 0x04D0(0x0020) MISSED OFFSET (PADDING)

	public:
		void OnRep_UniqueId();
		void OnRep_Score();
		void OnRep_PlayerName();
		void OnRep_bIsInactive();
		float GetExactPing();
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.Brush
	 * Size -> 0x0038 (FullSize[0x04A0] - InheritedSize[0x0468])
	 */
	class ABrush : public AActor
	{
	public:
		ECsgOper                                                   CsgOper;                                                 // 0x0468(0x0001) ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor
		EBrushType                                                 BrushType;                                               // 0x0469(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_GP3J[0x2];                                   // 0x046A(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FColor                                              BrushColor;                                              // 0x046C(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		int32_t                                                    PolyFlags;                                               // 0x0470(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              bColored : 1;                                            // 0x0474(0x0001) BIT_FIELD Edit, NoDestructor
		unsigned char                                              bSolidWhenSelected : 1;                                  // 0x0474(0x0001) BIT_FIELD Edit, NoDestructor
		unsigned char                                              bPlaceableFromClassBrowser : 1;                          // 0x0474(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		unsigned char                                              bNotForClientOrServer : 1;                               // 0x0474(0x0001) BIT_FIELD NoDestructor
		unsigned char                                              UnknownData_DLF7[0x3];                                   // 0x0475(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UModel*                                              Brush;                                                   // 0x0478(0x0008) ExportObject, ZeroConstructor, IsPlainOldData, NoDestructor
		class UBrushComponent*                                     BrushComponent;                                          // 0x0480(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, SubobjectReference, IsPlainOldData, NoDestructor
		unsigned char                                              bInManipulation : 1;                                     // 0x0488(0x0001) BIT_FIELD NoDestructor
		unsigned char                                              UnknownData_24NN[0x7];                                   // 0x0489(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<struct FGeomSelection>                              SavedSelections;                                         // 0x0490(0x0010) ZeroConstructor

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.Volume
	 * Size -> 0x0000 (FullSize[0x04A0] - InheritedSize[0x04A0])
	 */
	class AVolume : public ABrush
	{
	public:
		bool BPEncompassesPoint(const struct FVector& Point, float* OutDistanceToPoint, float SphereRadius);
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.CameraModifier
	 * Size -> 0x0030 (FullSize[0x0058] - InheritedSize[0x0028])
	 */
	class UCameraModifier : public UObject
	{
	public:
		unsigned char                                              bDisabled : 1;                                           // 0x0028(0x0001) BIT_FIELD NoDestructor, Protected
		unsigned char                                              bPendingDisable : 1;                                     // 0x0028(0x0001) BIT_FIELD NoDestructor
		unsigned char                                              UnknownData_XDPM[0x7];                                   // 0x0029(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class APlayerCameraManager*                                CameraOwner;                                             // 0x0030(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              Priority;                                                // 0x0038(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, Protected
		unsigned char                                              UnknownData_4130[0x3];                                   // 0x0039(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		unsigned char                                              bExclusive : 1;                                          // 0x003C(0x0001) BIT_FIELD NoDestructor, Protected
		unsigned char                                              UnknownData_EVWF[0x3];                                   // 0x003D(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      AlphaInTime;                                             // 0x0040(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, Protected
		float                                                      AlphaOutTime;                                            // 0x0044(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, Protected
		float                                                      Alpha;                                                   // 0x0048(0x0004) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected
		float                                                      TargetAlpha;                                             // 0x004C(0x0004) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected
		unsigned char                                              bDebug : 1;                                              // 0x0050(0x0001) BIT_FIELD Edit, NoDestructor
		unsigned char                                              UnknownData_KTU8[0x7];                                   // 0x0051(0x0007) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.DestructibleActor
	 * Size -> 0x0020 (FullSize[0x0488] - InheritedSize[0x0468])
	 */
	class ADestructibleActor : public AActor
	{
	public:
		class UDestructibleComponent*                              DestructibleComponent;                                   // 0x0468(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, SubobjectReference, IsPlainOldData, NoDestructor
		unsigned char                                              bAffectNavigation : 1;                                   // 0x0470(0x0001) BIT_FIELD Edit, BlueprintVisible, Config, NoDestructor
		unsigned char                                              UnknownData_NHFI[0x7];                                   // 0x0471(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FScriptMulticastDelegate                             OnActorFracture;                                         // 0x0478(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable

	public:
		void SetFadingStaticMesh(class UStaticMesh* TheMesh);
		void SetFadingSkeletalMesh(class USkeletalMesh* TheMesh);
		class UMeshComponent* GetFadingMeshComponent();
		void ActorFractureSignature__DelegateSignature(const struct FVector& HitPoint, const struct FVector& HitDirection);
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.DataAsset
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class UDataAsset : public UObject
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.Light
	 * Size -> 0x0010 (FullSize[0x0478] - InheritedSize[0x0468])
	 */
	class ALight : public AActor
	{
	public:
		class ULightComponent*                                     LightComponent;                                          // 0x0468(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, SubobjectReference, IsPlainOldData, NoDestructor
		unsigned char                                              bEnabled : 1;                                            // 0x0470(0x0001) BIT_FIELD Net, RepNotify, NoDestructor
		unsigned char                                              UnknownData_NZY8[0x7];                                   // 0x0471(0x0007) MISSED OFFSET (PADDING)

	public:
		void ToggleEnabled();
		void SetLightFunctionScale(const struct FVector& NewLightFunctionScale);
		void SetLightFunctionMaterial(class UMaterialInterface* NewLightFunctionMaterial);
		void SetLightFunctionFadeDistance(float NewLightFunctionFadeDistance);
		void SetLightColor(const struct FLinearColor& NewLightColor);
		void SetEnabled(bool bSetEnabled);
		void SetCastShadows(bool bNewValue);
		void SetBrightness(float NewBrightness);
		void SetAffectTranslucentLighting(bool bNewValue);
		void OnRep_bEnabled();
		bool IsEnabled();
		struct FLinearColor GetLightColor();
		float GetBrightness();
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.DamageType
	 * Size -> 0x0028 (FullSize[0x0050] - InheritedSize[0x0028])
	 */
	class UDamageType : public UObject
	{
	public:
		unsigned char                                              bIsPhysicalDamage : 1;                                   // 0x0028(0x0001) BIT_FIELD Edit, BlueprintVisible, NoDestructor
		unsigned char                                              bAllowPerBoneDamageAdjustment : 1;                       // 0x0028(0x0001) BIT_FIELD Edit, BlueprintVisible, NoDestructor
		unsigned char                                              bCausedByWorld : 1;                                      // 0x0028(0x0001) BIT_FIELD Edit, BlueprintVisible, NoDestructor
		unsigned char                                              bScaleMomentumByMass : 1;                                // 0x0028(0x0001) BIT_FIELD Edit, BlueprintVisible, NoDestructor
		unsigned char                                              bIsPassiveDamage : 1;                                    // 0x0028(0x0001) BIT_FIELD Edit, BlueprintVisible, NoDestructor
		unsigned char                                              bRadialDamageVelChange : 1;                              // 0x0028(0x0001) BIT_FIELD Edit, BlueprintVisible, NoDestructor
		unsigned char                                              bImpulseAffectsLivePawns : 1;                            // 0x0028(0x0001) BIT_FIELD Edit, BlueprintVisible, NoDestructor
		unsigned char                                              UnknownData_ID7F[0x3];                                   // 0x0029(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      ImpulseMinimumZPercent;                                  // 0x002C(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      DestructibleImpulseScale;                                // 0x0030(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      ImpulseRagdollScale;                                     // 0x0034(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      DefaultImpulse;                                          // 0x0038(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      PointDamageArmorEffectiveness;                           // 0x003C(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      GeneralDamageArmorEffectiveness;                         // 0x0040(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      ArmorDurabilityDegradationMultiplier;                    // 0x0044(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      RadialPartiallyObstructedDamagePercent;                  // 0x0048(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_X1VX[0x4];                                   // 0x004C(0x0004) MISSED OFFSET (PADDING)

	public:
		float HandleDamage(class AActor* Victim, float DamageAmount, const struct FDamageEvent& DamageEvent, class AController* EventInstigator, class AActor* DamageCauser);
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.BlueprintFunctionLibrary
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class UBlueprintFunctionLibrary : public UObject
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.Note
	 * Size -> 0x0000 (FullSize[0x0468] - InheritedSize[0x0468])
	 */
	class ANote : public AActor
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.SplineActor
	 * Size -> 0x0008 (FullSize[0x0470] - InheritedSize[0x0468])
	 */
	class ASplineActor : public AActor
	{
	public:
		class USplineComponent*                                    SplineComponent;                                         // 0x0468(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, SubobjectReference, IsPlainOldData, NoDestructor

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.Emitter
	 * Size -> 0x0050 (FullSize[0x04B8] - InheritedSize[0x0468])
	 */
	class AEmitter : public AActor
	{
	public:
		class UParticleSystemComponent*                            ParticleSystemComponent;                                 // 0x0468(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, SubobjectReference, IsPlainOldData, NoDestructor
		unsigned char                                              bIsHighQualityEmitter : 1;                               // 0x0470(0x0001) BIT_FIELD Edit, NoDestructor
		unsigned char                                              bDestroyOnSystemFinish : 1;                              // 0x0470(0x0001) BIT_FIELD Edit, NoDestructor
		unsigned char                                              bPostUpdateTickGroup : 1;                                // 0x0470(0x0001) BIT_FIELD Edit, BlueprintVisible, NoDestructor
		unsigned char                                              bForceOnDediServer : 1;                                  // 0x0470(0x0001) BIT_FIELD Edit, BlueprintVisible, NoDestructor
		unsigned char                                              bCurrentlyActive : 1;                                    // 0x0470(0x0001) BIT_FIELD Net, RepNotify, NoDestructor
		unsigned char                                              UnknownData_YGQ6[0x7];                                   // 0x0471(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FScriptMulticastDelegate                             OnParticleSpawn;                                         // 0x0478(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable
		class FScriptMulticastDelegate                             OnParticleBurst;                                         // 0x0488(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable
		class FScriptMulticastDelegate                             OnParticleDeath;                                         // 0x0498(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable
		class FScriptMulticastDelegate                             OnParticleCollide;                                       // 0x04A8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable

	public:
		void ToggleActive();
		void SetVectorParameter(const class FName& ParameterName, const struct FVector& Param);
		void SetTemplate(class UParticleSystem* NewTemplate);
		void SetMaterialParameter(const class FName& ParameterName, class UMaterialInterface* Param);
		void SetFloatParameter(const class FName& ParameterName, float Param);
		void SetColorParameter(const class FName& ParameterName, const struct FLinearColor& Param);
		void SetActorParameter(const class FName& ParameterName, class AActor* Param);
		void ParticleSpawnSignature__DelegateSignature(const class FName& EventName, float EmitterTime, const struct FVector& Location, const struct FVector& Velocity);
		void ParticleDeathSignature__DelegateSignature(const class FName& EventName, float EmitterTime, int32_t ParticleTime, const struct FVector& Location, const struct FVector& Velocity, const struct FVector& Direction);
		void ParticleCollisionSignature__DelegateSignature(const class FName& EventName, float EmitterTime, int32_t ParticleTime, const struct FVector& Location, const struct FVector& Velocity, const struct FVector& Direction, const struct FVector& Normal, const class FName& BoneName);
		void ParticleBurstSignature__DelegateSignature(const class FName& EventName, float EmitterTime, int32_t ParticleCount);
		void OnRep_bCurrentlyActive();
		void OnParticleSystemFinished(class UParticleSystemComponent* FinishedComponent);
		bool IsActive();
		void Deactivate();
		void Activate();
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.Pawn
	 * Size -> 0x0090 (FullSize[0x04F8] - InheritedSize[0x0468])
	 */
	//class APawn : public AActor
	//{
	//public:
	//	unsigned char                                              UnknownData_JAEB[0x8];                                   // 0x0468(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	//	unsigned char                                              bUseControllerRotationPitch : 1;                         // 0x0470(0x0001) BIT_FIELD Edit, BlueprintVisible, NoDestructor
	//	unsigned char                                              bUseControllerRotationYaw : 1;                           // 0x0470(0x0001) BIT_FIELD Edit, BlueprintVisible, NoDestructor
	//	unsigned char                                              bUseControllerRotationRoll : 1;                          // 0x0470(0x0001) BIT_FIELD Edit, BlueprintVisible, NoDestructor
	//	unsigned char                                              bCanAffectNavigationGeneration : 1;                      // 0x0470(0x0001) BIT_FIELD Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor
	//	unsigned char                                              bPreventMovementStoppingOnPossess : 1;                   // 0x0470(0x0001) BIT_FIELD Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor
	//	unsigned char                                              UnknownData_K2YN[0x3];                                   // 0x0471(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	//	float                                                      BaseEyeHeight;                                           // 0x0474(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
	//	EAutoReceiveInput                                          AutoPossess;                                             // 0x0478(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
	//	unsigned char                                              UnknownData_KM79[0x7];                                   // 0x0479(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	//	class UClass*                                              AIControllerClass;                                       // 0x0480(0x0008) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
	//	class APlayerState*                                        PlayerState;                                             // 0x0488(0x0008) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor
	//	unsigned char                                              RemoteViewPitch;                                         // 0x0490(0x0001) Net, ZeroConstructor, IsPlainOldData, NoDestructor
	//	unsigned char                                              UnknownData_X0S0[0x7];                                   // 0x0491(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	//	class AController*                                         LastHitBy;                                               // 0x0498(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor
	//	class AController*                                         Controller;                                              // 0x04A0(0x0008) Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor
	//	unsigned char                                              UnknownData_RP04[0x8];                                   // 0x04A8(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	//	bool                                                       bClearOnConsume;                                         // 0x04B0(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
	//	unsigned char                                              UnknownData_RJAL[0x3];                                   // 0x04B1(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	//	TWeakObjectPtr<class AActor>                               TetherActor;                                             // 0x04B4(0x0008) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor
	//	float                                                      TetherRadius;                                            // 0x04BC(0x0004) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor
	//	float                                                      TetherHeight;                                            // 0x04C0(0x0004) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor
	//	unsigned char                                              UnknownData_R5LA[0x4];                                   // 0x04C4(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	//	class FScriptMulticastDelegate                             OnMovementTetherSet;                                     // 0x04C8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable
	//	struct FVector                                             ControlInputVector;                                      // 0x04D8(0x000C) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected
	//	struct FVector                                             LastControlInputVector;                                  // 0x04E4(0x000C) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected
	//	TWeakObjectPtr<class AController>                          SpawnedForController;                                    // 0x04F0(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor

	//public:
	//	void SpawnDefaultController();
	//	void SetMovementTether(class AActor* InTetherActor, float Radius, float Height);
	//	void SetCanAffectNavigationGeneration(bool bNewValue);
	//	void ReceiveUnpossessed(class AController* OldController);
	//	void ReceivePossessed(class AController* NewController);
	//	void PawnMakeNoise(float Loudness, const struct FVector& NoiseLocation, bool bUseNoiseMakerLocation, class AActor* NoiseMaker);
	//	void OnRep_PlayerState();
	//	void OnRep_Controller();
	//	void MovementTetherEvent__DelegateSignature(class APawn* Pawn, class AActor* TetherObject);
	//	void LaunchPawn(const struct FVector& LaunchVelocity, bool bXYOverride, bool bZOverride);
	//	struct FVector K2_GetMovementInputVector();
	//	bool IsWithinTether();
	//	bool IsWalking();
	//	bool IsTargetWithinTether(const struct FVector& Destination, float AdditionalRadius);
	//	bool IsMovementTethered();
	//	bool IsMoveInputIgnored();
	//	bool IsLocallyControlled();
	//	bool IsFalling();
	//	bool IsCrouched();
	//	bool IsControlled();
	//	void InterceptInputEvent(const class FString& InputName);
	//	class AActor* GetTetherObject();
	//	struct FVector GetTetheredVelocity(const struct FVector& RequestedVelocity, float DeltaSeconds);
	//	struct FVector GetTetheredDestination(const struct FVector& Destination, float AdditionalRadius);
	//	struct FVector GetPendingMovementInputVector();
	//	struct FVector GetNavAgentLocation();
	//	class UPawnMovementComponent* GetMovementComponent();
	//	class AActor* STATIC_GetMovementBaseActor(class APawn* Pawn);
	//	struct FVector GetLastMovementInputVector();
	//	struct FRotator GetControlRotation();
	//	class AController* GetController();
	//	struct FRotator GetBaseAimRotation();
	//	void DetachFromControllerPendingDestroy();
	//	struct FVector ConsumeMovementInputVector();
	//	void ClearMovementTether();
	//	void AddMovementInput(const struct FVector& WorldDirection, float ScaleValue, bool bForce);
	//	void AddControllerYawInput(float val);
	//	void AddControllerRollInput(float val);
	//	void AddControllerPitchInput(float val);
	//	static UClass* StaticClass();
	//};

	/**
	 * Class Engine.Character
	 * Size -> 0x01C8 (FullSize[0x06C0] - InheritedSize[0x04F8])
	// */
	//class ACharacter : public APawn
	//{
	//public:
	//	class USkeletalMeshComponent*                              Mesh;                                                    // 0x04F8(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, SubobjectReference, IsPlainOldData, NoDestructor
	//	class UCharacterMovementComponent*                         CharacterMovement;                                       // 0x0500(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, SubobjectReference, IsPlainOldData, NoDestructor
	//	class UCapsuleComponent*                                   CapsuleComponent;                                        // 0x0508(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, SubobjectReference, IsPlainOldData, NoDestructor
	//	struct FBasedMovementInfo                                  BasedMovement;                                           // 0x0510(0x0030) ContainsInstancedReference, Protected
	//	struct FBasedMovementInfo                                  ReplicatedBasedMovement;                                 // 0x0540(0x0030) Net, RepNotify, ContainsInstancedReference, Protected
	//	struct FVector                                             BaseTranslationOffset;                                   // 0x0570(0x000C) ZeroConstructor, IsPlainOldData, NoDestructor, Protected
	//	unsigned char                                              ReplicatedMovementMode;                                  // 0x057C(0x0001) Net, ZeroConstructor, IsPlainOldData, NoDestructor, Protected
	//	unsigned char                                              UnknownData_M3XN[0x7];                                   // 0x057D(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	//	float                                                      CrouchedEyeHeight;                                       // 0x0584(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
	//	float                                                      ProneEyeHeight;                                          // 0x0588(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
	//	unsigned char                                              bIsCrouched : 1;                                         // 0x058C(0x0001) BIT_FIELD BlueprintVisible, BlueprintReadOnly, Net, SaveGame, RepNotify, NoDestructor
	//	unsigned char                                              bIsProne : 1;                                            // 0x058C(0x0001) BIT_FIELD BlueprintVisible, BlueprintReadOnly, Net, SaveGame, RepNotify, NoDestructor
	//	unsigned char                                              bCanEverProne : 1;                                       // 0x058C(0x0001) BIT_FIELD Edit, BlueprintVisible, NoDestructor
	//	unsigned char                                              bCanEverCrouch : 1;                                      // 0x058C(0x0001) BIT_FIELD Edit, BlueprintVisible, NoDestructor
	//	unsigned char                                              bReplicateDesiredRotation : 1;                           // 0x058C(0x0001) BIT_FIELD Edit, BlueprintVisible, NoDestructor
	//	unsigned char                                              bUseBPOverrideCharacterSound : 1;                        // 0x058C(0x0001) BIT_FIELD Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor
	//	unsigned char                                              bUseBPOverrideCharacterParticle : 1;                     // 0x058C(0x0001) BIT_FIELD Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor
	//	unsigned char                                              bPressedJump : 1;                                        // 0x058C(0x0001) BIT_FIELD BlueprintVisible, BlueprintReadOnly, NoDestructor
	//	unsigned char                                              bClientUpdating : 1;                                     // 0x058D(0x0001) BIT_FIELD BlueprintVisible, BlueprintReadOnly, Transient, NoDestructor
	//	unsigned char                                              bIsPlayingTurningAnim : 1;                               // 0x058D(0x0001) BIT_FIELD BlueprintVisible, Transient, NoDestructor
	//	unsigned char                                              bClientWasFalling : 1;                                   // 0x058D(0x0001) BIT_FIELD Transient, NoDestructor
	//	unsigned char                                              bClientResimulateRootMotion : 1;                         // 0x058D(0x0001) BIT_FIELD Transient, NoDestructor
	//	unsigned char                                              bSimGravityDisabled : 1;                                 // 0x058D(0x0001) BIT_FIELD NoDestructor
	//	unsigned char                                              bIsBigPusher : 1;                                        // 0x058D(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
	//	unsigned char                                              bCanBePushed : 1;                                        // 0x058D(0x0001) BIT_FIELD Edit, BlueprintVisible, NoDestructor
	//	unsigned char                                              bCanPushOthers : 1;                                      // 0x058D(0x0001) BIT_FIELD Edit, BlueprintVisible, NoDestructor
	//	unsigned char                                              UnknownData_UCUL : 1;                                    // 0x058E(0x0001) BIT_FIELD (PADDING)
	//	unsigned char                                              bOverrideWalkingVelocity : 1;                            // 0x058E(0x0001) BIT_FIELD BlueprintVisible, Transient, NoDestructor
	//	unsigned char                                              bOverrideSwimmingVelocity : 1;                           // 0x058E(0x0001) BIT_FIELD BlueprintVisible, Transient, NoDestructor
	//	unsigned char                                              bOverrideSwimmingAcceleration : 1;                       // 0x058E(0x0001) BIT_FIELD BlueprintVisible, Transient, NoDestructor
	//	unsigned char                                              bOverrideNewFallVelocity : 1;                            // 0x058E(0x0001) BIT_FIELD BlueprintVisible, Transient, NoDestructor
	//	unsigned char                                              bOverrideFlyingVelocity : 1;                             // 0x058E(0x0001) BIT_FIELD BlueprintVisible, Transient, NoDestructor
	//	unsigned char                                              bPreventWaterHopCorrectionVelChange : 1;                 // 0x058E(0x0001) BIT_FIELD Edit, BlueprintVisible, NoDestructor
	//	unsigned char                                              bUsesRootMotion : 1;                                     // 0x058E(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
	//	unsigned char                                              bBasedUsesFastPathSMCTick : 1;                           // 0x058F(0x0001) BIT_FIELD Transient, NoDestructor
	//	unsigned char                                              bBasedUsesFastPathMoveTick : 1;                          // 0x058F(0x0001) BIT_FIELD Transient, NoDestructor
	//	unsigned char                                              bForceUnfreezeIkNextFrame : 1;                           // 0x058F(0x0001) BIT_FIELD Edit, BlueprintVisible, Transient, NoDestructor
	//	unsigned char                                              bForceReplicationWithoutController : 1;                  // 0x058F(0x0001) BIT_FIELD Edit, BlueprintVisible, NoDestructor
	//	unsigned char                                              bUse_ModifySavedMoveAcceleration_PreRep : 1;             // 0x058F(0x0001) BIT_FIELD Edit, BlueprintVisible, NoDestructor
	//	unsigned char                                              bUse_ModifySavedMoveAcceleration_PostRep : 1;            // 0x058F(0x0001) BIT_FIELD Edit, BlueprintVisible, NoDestructor
	//	unsigned char                                              bUseBPValidateStoredClientMovementInputs : 1;            // 0x058F(0x0001) BIT_FIELD Edit, BlueprintVisible, NoDestructor
	//	float                                                      HarvestingDestructionMeshRangeMultipler;                 // 0x0590(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
	//	unsigned char                                              UnknownData_Q8X4[0x4];                                   // 0x0594(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	//	TArray<class USoundBase*>                                  CharacterOverrideSoundFrom;                              // 0x0598(0x0010) Edit, ZeroConstructor, DisableEditOnInstance
	//	TArray<class USoundBase*>                                  CharacterOverrideSoundTo;                                // 0x05A8(0x0010) Edit, ZeroConstructor, DisableEditOnInstance
	//	TArray<class UParticleSystem*>                             CharacterOverrideParticleFrom;                           // 0x05B8(0x0010) Edit, ZeroConstructor, DisableEditOnInstance
	//	TArray<class UParticleSystem*>                             CharacterOverrideParticleTo;                             // 0x05C8(0x0010) Edit, ZeroConstructor, DisableEditOnInstance
	//	bool                                                       bInBaseReplication;                                      // 0x05D8(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor
	//	unsigned char                                              UnknownData_IB28[0x3];                                   // 0x05D9(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	//	float                                                      JumpKeyHoldTime;                                         // 0x05DC(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst, IsPlainOldData, NoDestructor
	//	float                                                      JumpMaxHoldTime;                                         // 0x05E0(0x0004) Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor
	//	struct FRotator_NetQuantizeSmartPitch                      LastMovementDesiredRotation;                             // 0x05E4(0x000C) Net
	//	unsigned char                                              UnknownData_AIT7[0x10];                                  // 0x05F0(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	//	class FScriptMulticastDelegate                             OnCharacterMovementUpdated;                              // 0x0600(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable
	//	struct FRootMotionMovementParams                           ClientRootMotionParams;                                  // 0x0610(0x0040) Transient
	//	TArray<struct FSimulatedRootMotionReplicatedMove>          RootMotionRepMoves;                                      // 0x0650(0x0010) ZeroConstructor, Transient, ContainsInstancedReference
	//	struct FRepRootMotionMontage                               RepRootMotion;                                           // 0x0660(0x0040) Net, RepNotify, ContainsInstancedReference
	//	float                                                      ExtraMaxAccelerationModifier;                            // 0x06A0(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
	//	float                                                      ExtraFrictionModifier;                                   // 0x06A4(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
	//	unsigned char                                              UnknownData_MWGS[0x8];                                   // 0x06A8(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	//	double                                                     ForceUnfreezeSkeletalDynamicsUntilTime;                  // 0x06B0(0x0008) BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor
	//	unsigned char                                              UnknownData_G26Q[0x8];                                   // 0x06B8(0x0008) MISSED OFFSET (PADDING)

	//public:
	//	void UnProne(bool bClientSimulation);
	//	void UnCrouch(bool bClientSimulation);
	//	void StopJumping();
	//	void StopAnimMontage(class UAnimMontage* AnimMontage);
	//	bool ShouldForceDedicatedMovementTickEveryFrame();
	//	bool ReplicateMovementToSimulatedClients();
	//	void Prone(bool bClientSimulation);
	//	float PlayAnimMontage(class UAnimMontage* AnimMontage, float InPlayRate, const class FName& StartSectionName, bool bForceTickPoseAndServerUpdateMesh, bool bForceTickPoseOnServer, float BlendInTime, float BlendOutTime);
	//	float OverrideTerminalVelocity();
	//	void OnWalkingOffLedge();
	//	void OnRep_RootMotion();
	//	void OnRep_ReplicatedBasedMovement();
	//	void OnRep_IsProne();
	//	void OnRep_IsCrouched();
	//	void OnLaunched(const struct FVector& LaunchVelocity, bool bXYOverride, bool bZOverride);
	//	void OnLanded(const struct FHitResult& Hit);
	//	void OnJumped();
	//	void NetTeleportSucceeded(const struct FVector& ToLoc, const struct FRotator& ToRot);
	//	void MovementModeChangedSignature__DelegateSignature(class ACharacter* Character, EMovementMode PrevMovementMode, unsigned char PreviousCustomMode);
	//	void LaunchCharacter(const struct FVector& LaunchVelocity, bool bXYOverride, bool bZOverride);
	//	void K2_UpdateCustomMovement(float DeltaTime);
	//	void K2_OnStartCrouch(float HalfHeightAdjust, float ScaledHalfHeightAdjust);
	//	void K2_OnMovementModeChanged(EMovementMode PrevMovementMode, EMovementMode NewMovementMode, unsigned char PrevCustomMode, unsigned char NewCustomMode);
	//	void K2_OnEndCrouch(float HalfHeightAdjust, float ScaledHalfHeightAdjust);
	//	void Jump();
	//	bool IsRagdolled();
	//	bool IsPlayingRootMotion();
	//	bool IsJumpProvidingForce();
	//	struct FRotator GetLastMovementDesiredRotation();
	//	class UAnimMontage* GetCurrentMontage();
	//	void Crouch(bool bClientSimulation);
	//	void ClientCheatWalk();
	//	void ClientCheatGhost();
	//	void ClientCheatFly();
	//	void CharacterMovementUpdatedSignature__DelegateSignature(float DeltaSeconds, const struct FVector& OldLocation, const struct FVector& OldVelocity);
	//	bool CanJumpInternal();
	//	bool CanJump();
	//	struct FRotator BPValidateStoredClientRotationInput(float TimeSinceLastMove, const struct FRotator& ClientRotation);
	//	class USoundBase* BPOverrideCharacterSound(class USoundBase* SoundIn);
	//	class UParticleSystem* BPOverrideCharacterParticle(class UParticleSystem* ParticleIn);
	//	struct FRotator BPModifyRootMotionDeltaRotation(const struct FRotator& Delta);
	//	bool BPAcknowledgeServerCorrection(float TimeStamp, const struct FVector& NewLoc, const struct FVector& NewVel, class UPrimitiveComponent* NewBase, const class FName& NewBaseBoneName, bool bHasBase, bool bBaseRelativePosition, unsigned char ServerMovementMode);
	//	bool BP_PreventMovementMode(EMovementMode NewMovementMode, unsigned char NewCustomMode);
	//	static UClass* StaticClass();
	//};

	/**
	 * Class Engine.ReverbVolume
	 * Size -> 0x0050 (FullSize[0x04F0] - InheritedSize[0x04A0])
	 */
	class AReverbVolume : public AVolume
	{
	public:
		float                                                      Priority;                                                // 0x04A0(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              bEnabled : 1;                                            // 0x04A4(0x0001) BIT_FIELD Edit, BlueprintVisible, Net, NoDestructor
		unsigned char                                              UnknownData_1B4N[0x3];                                   // 0x04A5(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FReverbSettings                                     Settings;                                                // 0x04A8(0x0018) Edit, BlueprintVisible
		struct FInteriorSettings                                   AmbientZoneSettings;                                     // 0x04C0(0x0024) Edit, BlueprintVisible
		unsigned char                                              UnknownData_6371[0x4];                                   // 0x04E4(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class AReverbVolume*                                       NextLowerPriorityVolume;                                 // 0x04E8(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.WorldSettings
	 * Size -> 0x0860 (FullSize[0x0CC8] - InheritedSize[0x0468])
	 */
	class AWorldSettings : public AInfo
	{
	public:
		unsigned char                                              UnknownData_LBTR[0x8];                                   // 0x0468(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      GroundColorMultiplier;                                   // 0x0470(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      SkyColorMultiplier;                                      // 0x0474(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		struct FVector                                             AtmosphericFogMultiplier;                                // 0x0478(0x000C) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      TrueSkyIntensityMultiplier;                              // 0x0484(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		int32_t                                                    MaxGroundClutterLayers;                                  // 0x0488(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      SM4DirectionalLightMultiplier;                           // 0x048C(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      SM4SKyLightMultiplier;                                   // 0x0490(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      SM5DirectionalLightMultiplier;                           // 0x0494(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      SM5SKyLightMultiplier;                                   // 0x0498(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      NoTrueSkySM5DirectionalLightMultiplier;                  // 0x049C(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      NoTrueSkySM5SKyLightMultiplier;                          // 0x04A0(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      ConsoleSM5DirectionalLightMultiplier;                    // 0x04A4(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      ConsoleSM5SKyLightMultiplier;                            // 0x04A8(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      IBLFadeDistanceMultiplier;                               // 0x04AC(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		int32_t                                                    TexturePoolSizeOverride;                                 // 0x04B0(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		int32_t                                                    ConsoleOnlyTexturePoolSizeOverride;                      // 0x04B4(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      GlobalViewDistanceMultiplier;                            // 0x04B8(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      GlobalProxyDistanceMultiplier;                           // 0x04BC(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		bool                                                       bWorldUseStasis;                                         // 0x04C0(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_RYOZ[0x7];                                   // 0x04C1(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class ASkyLight*                                           SkyLightReference;                                       // 0x04C8(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		class ADirectionalLight*                                   DirectionalLightReference;                               // 0x04D0(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		float                                                      GlobalIBLCaptureBrightness;                              // 0x04D8(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      GlobalBakeAndStreamIBLMultiplier;                        // 0x04DC(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		struct FVector                                             TrueSkyColorMultiplier;                                  // 0x04E0(0x000C) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      SkyIBLIntensityMultiplier;                               // 0x04EC(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      KillZIntervalMin;                                        // 0x04F0(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      KillZIntervalMax;                                        // 0x04F4(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		bool                                                       bDisableDFAO;                                            // 0x04F8(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		bool                                                       bForceAtmosphericFogWithTrueSky;                         // 0x04F9(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_YW25[0x2];                                   // 0x04FA(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      DistanceFieldShadowRaytraceDistanceOverride;             // 0x04FC(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		bool                                                       bInteriorLightingKeepDistanceFieldsOnLowEnd;             // 0x0500(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_FI9K[0x7];                                   // 0x0501(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class UParticleSystemComponent*>                    PooledParticles;                                         // 0x0508(0x0010) ExportObject, ZeroConstructor, Transient, ContainsInstancedReference
		unsigned char                                              UnknownData_WZKQ[0x4A8];                                 // 0x0518(0x04A8) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		unsigned char                                              bEnableWorldBoundsChecks : 1;                            // 0x09C0(0x0001) BIT_FIELD Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay
		unsigned char                                              bEnableNavigationSystem : 1;                             // 0x09C0(0x0001) BIT_FIELD Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay
		unsigned char                                              bEnableWorldComposition : 1;                             // 0x09C0(0x0001) BIT_FIELD Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor
		unsigned char                                              bEnableWorldOriginRebasing : 1;                          // 0x09C0(0x0001) BIT_FIELD Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay
		unsigned char                                              bWorldGravitySet : 1;                                    // 0x09C0(0x0001) BIT_FIELD Transient, NoDestructor
		unsigned char                                              bCheckedForCachesLights : 1;                             // 0x09C0(0x0001) BIT_FIELD Transient, NoDestructor
		unsigned char                                              bUse3DWorldCompStreaming : 1;                            // 0x09C0(0x0001) BIT_FIELD Edit, NoDestructor
		unsigned char                                              bSetIBLDFAOToMatch : 1;                                  // 0x09C0(0x0001) BIT_FIELD Edit, NoDestructor
		unsigned char                                              bRunMeshOptimizer : 1;                                   // 0x09C1(0x0001) BIT_FIELD Edit, NoDestructor
		unsigned char                                              bForceLoadAllLevelsOnDediServer : 1;                     // 0x09C1(0x0001) BIT_FIELD Edit, NoDestructor
		unsigned char                                              UnknownData_NGHE[0x6];                                   // 0x09C2(0x0006) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class FName>                                        LevelsToAbsolutelyNotLoadOnDediServer;                   // 0x09C8(0x0010) Edit, ZeroConstructor
		class ADynamicCaptureManager*                              MasterSkyLightOverride;                                  // 0x09D8(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		unsigned char                                              bBakeOutAllProceduralAssetsToActors : 1;                 // 0x09E0(0x0001) BIT_FIELD Edit, NoDestructor
		unsigned char                                              bEnableInteriorLightingMode : 1;                         // 0x09E0(0x0001) BIT_FIELD Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor
		unsigned char                                              bEnableShadowCache : 1;                                  // 0x09E0(0x0001) BIT_FIELD Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor
		unsigned char                                              bEnableGlobalDistanceField : 1;                          // 0x09E0(0x0001) BIT_FIELD Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor
		unsigned char                                              bGlobalGravitySet : 1;                                   // 0x09E0(0x0001) BIT_FIELD Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor
		unsigned char                                              UnknownData_S95Q[0x3];                                   // 0x09E1(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      DefaultAmbientShadowNear;                                // 0x09E4(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      DefaultAmbientShadowFar;                                 // 0x09E8(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_XNZ9[0x4];                                   // 0x09EC(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FString                                              Title;                                                   // 0x09F0(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor
		float                                                      KillZ;                                                   // 0x0A00(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_AAS1[0x4];                                   // 0x0A04(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UClass*                                              KillZDamageType;                                         // 0x0A08(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay
		float                                                      WorldGravityZ;                                           // 0x0A10(0x0004) Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		float                                                      GlobalGravityZ;                                          // 0x0A14(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor
		class UClass*                                              PhysicsCollisionHandlerClass;                            // 0x0A18(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay
		class UClass*                                              DefaultGameMode;                                         // 0x0A20(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor
		TArray<struct FGameModePrefix>                             DefaultMapPrefixes;                                      // 0x0A28(0x0010) ZeroConstructor, Config
		class UClass*                                              GameNetworkManagerClass;                                 // 0x0A38(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor
		int32_t                                                    PackedLightAndShadowMapTextureSize;                      // 0x0A40(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay
		unsigned char                                              bMinimizeBSPSections : 1;                                // 0x0A44(0x0001) BIT_FIELD Edit, NoDestructor, AdvancedDisplay
		unsigned char                                              UnknownData_XWPH[0x3];                                   // 0x0A45(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FVector                                             DefaultColorScale;                                       // 0x0A48(0x000C) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay
		float                                                      DefaultMaxDistanceFieldOcclusionDistance;                // 0x0A54(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      GlobalDistanceFieldViewDistance;                         // 0x0A58(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              bPrecomputeVisibility : 1;                               // 0x0A5C(0x0001) BIT_FIELD Edit, NoDestructor
		unsigned char                                              bPlaceCellsOnlyAlongCameraTracks : 1;                    // 0x0A5C(0x0001) BIT_FIELD Edit, NoDestructor, AdvancedDisplay
		unsigned char                                              UnknownData_VZQ3[0x3];                                   // 0x0A5D(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int32_t                                                    VisibilityCellSize;                                      // 0x0A60(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay
		EVisibilityAggressiveness                                  VisibilityAggressiveness;                                // 0x0A64(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay
		unsigned char                                              UnknownData_XRUB[0x3];                                   // 0x0A65(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		unsigned char                                              bForceNoPrecomputedLighting : 1;                         // 0x0A68(0x0001) BIT_FIELD Edit, NoDestructor, AdvancedDisplay
		unsigned char                                              UnknownData_66JZ[0x3];                                   // 0x0A69(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FLightmassWorldInfoSettings                         LightmassSettings;                                       // 0x0A6C(0x0044) Edit
		ELightingBuildQuality                                      LevelLightingQuality;                                    // 0x0AB0(0x0001) Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_FUGG[0x7];                                   // 0x0AB1(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FReverbSettings                                     DefaultReverbSettings;                                   // 0x0AB8(0x0018) Edit, Config
		struct FInteriorSettings                                   DefaultAmbientZoneSettings;                              // 0x0AD0(0x0024) Edit, Config
		unsigned char                                              UnknownData_CPUL[0x4];                                   // 0x0AF4(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class USoundMix*                                           DefaultBaseSoundMix;                                     // 0x0AF8(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		bool                                                       bDisableSpatialReplication;                              // 0x0B00(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_J75U[0x3];                                   // 0x0B01(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      SM4ExposureOffset;                                       // 0x0B04(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_CHZ5[0x8];                                   // 0x0B08(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FReverbSettings                                     DefaultWaterReverbSettings;                              // 0x0B10(0x0018) Edit, BlueprintVisible
		struct FInteriorSettings                                   DefaultWaterAmbientZoneSettings;                         // 0x0B28(0x0024) Edit, BlueprintVisible
		struct FProxyMeshSettings                                  ProxySettings;                                           // 0x0B4C(0x000C) Edit
		unsigned char                                              UnknownData_ZCJU[0x50];                                  // 0x0B58(0x0050) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      WorldToMeters;                                           // 0x0BA8(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_K0L3[0x4];                                   // 0x0BAC(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class ULevelStreaming*>                             StreamingLevels;                                         // 0x0BB0(0x0010) ZeroConstructor, Deprecated
		float                                                      TimeDilation;                                            // 0x0BC0(0x0004) Net, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      MatineeTimeDilation;                                     // 0x0BC4(0x0004) Net, ZeroConstructor, IsPlainOldData, NoDestructor
		class APlayerState*                                        Pauser;                                                  // 0x0BC8(0x0008) Net, ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              bHighPriorityLoading : 1;                                // 0x0BD0(0x0001) BIT_FIELD Net, NoDestructor
		unsigned char                                              bHighPriorityLoadingLocal : 1;                           // 0x0BD0(0x0001) BIT_FIELD NoDestructor
		unsigned char                                              UnknownData_DORW[0x3];                                   // 0x0BD1(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      DistanceFieldRuntimeQualityMultiplier;                   // 0x0BD4(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		TArray<class FName>                                        AlwaysVisibleLevelNames;                                 // 0x0BD8(0x0010) Edit, ZeroConstructor, DisableEditOnInstance
		TArray<class FName>                                        LevelsToForceInvisibleWhenExcluded;                      // 0x0BE8(0x0010) Edit, ZeroConstructor, DisableEditOnInstance
		int32_t                                                    MinInstancesForConsoleFoliageAutoReduction;              // 0x0BF8(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      ConsoleFoliageAutoReductionPercent;                      // 0x0BFC(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_KAEI[0x58];                                  // 0x0C00(0x0058) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class UAssetUserData*>                              AssetUserData;                                           // 0x0C58(0x0010) ZeroConstructor, Protected
		unsigned char                                              UnknownData_09RL[0x60];                                  // 0x0C68(0x0060) MISSED OFFSET (PADDING)

	public:
		void PooledParticleSystemFinished(class UParticleSystemComponent* FinishedComponent);
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.MovementComponent
	 * Size -> 0x0040 (FullSize[0x0118] - InheritedSize[0x00D8])
	 */
	class UMovementComponent : public UActorComponent
	{
	public:
		class UPrimitiveComponent*                                 UpdatedComponent;                                        // 0x00D8(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_H8MP[0x4];                                   // 0x00E0(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FVector                                             Velocity;                                                // 0x00E4(0x000C) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		struct FVector                                             PlaneConstraintNormal;                                   // 0x00F0(0x000C) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected
		struct FVector                                             PlaneConstraintOrigin;                                   // 0x00FC(0x000C) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected
		unsigned char                                              bConstrainToPlane : 1;                                   // 0x0108(0x0001) BIT_FIELD Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor
		unsigned char                                              bSnapToPlaneAtStart : 1;                                 // 0x0108(0x0001) BIT_FIELD Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor
		unsigned char                                              bUpdateOnlyIfRendered : 1;                               // 0x0108(0x0001) BIT_FIELD Edit, BlueprintVisible, NoDestructor
		unsigned char                                              bAutoUpdateTickRegistration : 1;                         // 0x0108(0x0001) BIT_FIELD Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor
		unsigned char                                              bAutoRegisterUpdatedComponent : 1;                       // 0x0108(0x0001) BIT_FIELD Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor
		unsigned char                                              bDedicatedForceTickingEveryFrame : 1;                    // 0x0108(0x0001) BIT_FIELD BlueprintVisible, NoDestructor
		unsigned char                                              UnknownData_PVS4[0xF];                                   // 0x0109(0x000F) MISSED OFFSET (PADDING)

	public:
		void StopMovementImmediately();
		void SnapUpdatedComponentToPlane();
		bool ShouldForceDedicatedTickEveryFrame();
		void SetUpdatedComponent(class UPrimitiveComponent* NewUpdatedComponent);
		void SetPlaneConstraintOrigin(const struct FVector& PlaneOrigin);
		void SetPlaneConstraintNormal(const struct FVector& PlaneNormal);
		void SetPlaneConstraintFromVectors(const struct FVector& Forward, const struct FVector& Up);
		void PhysicsVolumeChanged(class APhysicsVolume* NewVolume);
		bool K2_MoveUpdatedComponent(const struct FVector& Delta, const struct FRotator& NewRotation, struct FHitResult* OutHit, bool bSweep);
		float K2_GetModifiedMaxSpeed();
		float K2_GetMaxSpeedModifier();
		bool IsExceedingMaxSpeed(float MaxSpeed);
		struct FVector GetPlaneConstraintOrigin();
		struct FVector GetPlaneConstraintNormal();
		class APhysicsVolume* GetPhysicsVolume();
		float GetMaxSpeed();
		float GetGravityZ();
		struct FVector ConstrainLocationToPlane(const struct FVector& Location);
		struct FVector ConstrainDirectionToPlane(const struct FVector& Direction);
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.NavigationTypes
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class UNavigationTypes : public UObject
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.NavMovementComponent
	 * Size -> 0x0018 (FullSize[0x0130] - InheritedSize[0x0118])
	 */
	class UNavMovementComponent : public UMovementComponent
	{
	public:
		struct FNavAgentProperties                                 NavAgentProps;                                           // 0x0118(0x0010) Edit, BlueprintVisible
		unsigned char                                              bUpdateNavAgentWithOwnersCollision : 1;                  // 0x0128(0x0001) BIT_FIELD Edit, NoDestructor, Protected
		unsigned char                                              UnknownData_CTB8[0x3];                                   // 0x0129(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FMovementProperties                                 MovementState;                                           // 0x012C(0x0004)

	public:
		void StopMovementKeepPathing();
		void StopActiveMovement();
		bool IsSwimming();
		bool IsMovingOnGround();
		bool IsFlying();
		bool IsFalling();
		bool IsCrouching();
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.PawnMovementComponent
	 * Size -> 0x0010 (FullSize[0x0140] - InheritedSize[0x0130])
	 */
	class UPawnMovementComponent : public UNavMovementComponent
	{
	public:
		class APawn*                                               PawnOwner;                                               // 0x0130(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, Protected
		unsigned char                                              UnknownData_Q6U8[0x8];                                   // 0x0138(0x0008) MISSED OFFSET (PADDING)

	public:
		struct FVector K2_GetInputVector();
		bool IsMoveInputIgnored();
		struct FVector GetPendingInputVector();
		class APawn* GetPawnOwner();
		struct FVector GetLastInputVector();
		struct FVector ConsumeInputVector();
		void AddInputVector(const struct FVector& WorldVector, bool bForce);
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.CharacterMovementComponent
	 * Size -> 0x0400 (FullSize[0x0540] - InheritedSize[0x0140])
	 */
	class UCharacterMovementComponent : public UPawnMovementComponent
	{
	public:
		unsigned char                                              UnknownData_88WY[0x8];                                   // 0x0140(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class ACharacter*                                          CharacterOwner;                                          // 0x0148(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, Protected
		unsigned char                                              UnknownData_RH1K : 2;                                    // 0x0150(0x0001) BIT_FIELD (PADDING)
		unsigned char                                              bPreventExitingWaterForceExtraOverlap : 1;               // 0x0150(0x0001) BIT_FIELD Edit, BlueprintVisible, NoDestructor
		unsigned char                                              UnknownData_WVLS[0x3];                                   // 0x0151(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      MaxStepHeight;                                           // 0x0154(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      JumpZVelocity;                                           // 0x0158(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      JumpOffJumpZFactor;                                      // 0x015C(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay
		bool                                                       bSlipOffLedges;                                          // 0x0160(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_X1UM[0x3];                                   // 0x0161(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      LedgeSlipCapsuleRadiusMultiplier;                        // 0x0164(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      LedgeSlipPushVelocity;                                   // 0x0168(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      LedgeSlipVelocityBuildUpMultiplier;                      // 0x016C(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      WalkableFloorAngle;                                      // 0x0170(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      WalkableFloorZ;                                          // 0x0174(0x0004) Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_8NFL[0x8];                                   // 0x0178(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		EMovementMode                                              MovementMode;                                            // 0x0180(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              CustomMovementMode;                                      // 0x0181(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_D7L2[0x3E];                                  // 0x0182(0x003E) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      GravityScale;                                            // 0x01C0(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      GroundFriction;                                          // 0x01C4(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      MaxWalkSpeed;                                            // 0x01C8(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      MaxWalkSpeedCrouched;                                    // 0x01CC(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      MaxWalkSpeedProne;                                       // 0x01D0(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      MaxCustomMovementSpeed;                                  // 0x01D4(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      MaxSwimSpeed;                                            // 0x01D8(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      MaxFlySpeed;                                             // 0x01DC(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      LandedPreventRequestedMoveInterval;                      // 0x01E0(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      LandedPreventRequestedMoveMinVelocityMagnitude;          // 0x01E4(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      MinimumImpulseToApply;                                   // 0x01E8(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_FUQE[0xC];                                   // 0x01EC(0x000C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      MaxAcceleration;                                         // 0x01F8(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      MaxImpulseVelocityMagnitude;                             // 0x01FC(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      MaxImpulseVelocityZ;                                     // 0x0200(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      BrakingDecelerationWalking;                              // 0x0204(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      BrakingDecelerationFalling;                              // 0x0208(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      BrakingDecelerationSwimming;                             // 0x020C(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      BrakingDecelerationFlying;                               // 0x0210(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      AirControl;                                              // 0x0214(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      AirControlBoostMultiplier;                               // 0x0218(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      AirControlBoostVelocityThreshold;                        // 0x021C(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      FallingLateralFriction;                                  // 0x0220(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      CrouchedHalfHeight;                                      // 0x0224(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      ProneHalfHeight;                                         // 0x0228(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      Buoyancy;                                                // 0x022C(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      PerchRadiusThreshold;                                    // 0x0230(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay
		float                                                      PerchAdditionalHeight;                                   // 0x0234(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay
		struct FRotator                                            RotationRate;                                            // 0x0238(0x000C) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              bUseControllerDesiredRotation : 1;                       // 0x0244(0x0001) BIT_FIELD Edit, BlueprintVisible, NoDestructor, AdvancedDisplay
		unsigned char                                              bRequireAccelerationForUseControllerDesiredRotation : 1; // 0x0244(0x0001) BIT_FIELD Edit, BlueprintVisible, NoDestructor, AdvancedDisplay
		unsigned char                                              bForceDontAllowDesiredRotationWhenFalling : 1;           // 0x0244(0x0001) BIT_FIELD Edit, BlueprintVisible, NoDestructor, AdvancedDisplay
		unsigned char                                              bUseCharacterInterpolationAndStops : 1;                  // 0x0244(0x0001) BIT_FIELD Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor
		unsigned char                                              bOnlyForwardsInputAcceleration : 1;                      // 0x0244(0x0001) BIT_FIELD Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor
		unsigned char                                              bOnlyForwardsInputAccelerationWalking : 1;               // 0x0244(0x0001) BIT_FIELD Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor
		unsigned char                                              bReduceBackwardsMovement : 1;                            // 0x0244(0x0001) BIT_FIELD Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor
		unsigned char                                              bUseAsyncWalking : 1;                                    // 0x0244(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		unsigned char                                              bAllowSimulatedTickDistanceSkip : 1;                     // 0x0245(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		unsigned char                                              bUseBPAcknowledgeServerCorrection : 1;                   // 0x0245(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		unsigned char                                              bAllowImpactDeflection : 1;                              // 0x0245(0x0001) BIT_FIELD Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor
		unsigned char                                              bDisableSimulatedMovement : 1;                           // 0x0245(0x0001) BIT_FIELD Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor
		unsigned char                                              UnknownData_ZRZR : 1;                                    // 0x0245(0x0001) BIT_FIELD (PADDING)
		unsigned char                                              bZeroPitchWhenNoAcceleration : 1;                        // 0x0245(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		unsigned char                                              bPreventSlidingWhileFalling : 1;                         // 0x0245(0x0001) BIT_FIELD Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor
		unsigned char                                              bPreventAddingImpulse : 1;                               // 0x0245(0x0001) BIT_FIELD Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor
		unsigned char                                              bPreventZeroPitchAndRollWhileFalling : 1;                // 0x0246(0x0001) BIT_FIELD Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor
		unsigned char                                              bOrientRotationToMovement : 1;                           // 0x0246(0x0001) BIT_FIELD Edit, BlueprintVisible, NoDestructor
		unsigned char                                              bAssumeSymmetricalRotation : 1;                          // 0x0246(0x0001) BIT_FIELD Edit, BlueprintVisible, NoDestructor
		unsigned char                                              bEnableSwimmingOutsideOfWater : 1;                       // 0x0246(0x0001) BIT_FIELD Edit, BlueprintVisible, NoDestructor
		unsigned char                                              bServerCorrectForMovementModeChanges : 1;                // 0x0246(0x0001) BIT_FIELD Edit, BlueprintVisible, NoDestructor
		unsigned char                                              bMovementInProgress : 1;                                 // 0x0246(0x0001) BIT_FIELD NoDestructor, Protected
		unsigned char                                              bEnableScopedMovementUpdates : 1;                        // 0x0246(0x0001) BIT_FIELD Edit, NoDestructor, AdvancedDisplay
		unsigned char                                              bForceMaxAccel : 1;                                      // 0x0246(0x0001) BIT_FIELD NoDestructor
		unsigned char                                              bRunPhysicsWithNoController : 1;                         // 0x0247(0x0001) BIT_FIELD Edit, BlueprintVisible, NoDestructor, AdvancedDisplay
		unsigned char                                              bForceNextFloorCheck : 1;                                // 0x0247(0x0001) BIT_FIELD Edit, BlueprintVisible, DisableEditOnTemplate, EditConst, NoDestructor, AdvancedDisplay
		unsigned char                                              bShrinkProxyCapsule : 1;                                 // 0x0247(0x0001) BIT_FIELD NoDestructor
		unsigned char                                              bCanWalkOffLedges : 1;                                   // 0x0247(0x0001) BIT_FIELD Edit, BlueprintVisible, NoDestructor
		unsigned char                                              bCanWalkOffLedgesWhenCrouching : 1;                      // 0x0247(0x0001) BIT_FIELD Edit, BlueprintVisible, NoDestructor
		unsigned char                                              bDeferUpdateMoveComponent : 1;                           // 0x0247(0x0001) BIT_FIELD NoDestructor
		unsigned char                                              bUseRootMotionForLocomotion : 1;                         // 0x0247(0x0001) BIT_FIELD Edit, NoDestructor
		class UPrimitiveComponent*                                 DeferredUpdatedMoveComponent;                            // 0x0248(0x0008) ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor
		float                                                      MaxOutOfWaterStepHeight;                                 // 0x0250(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay
		float                                                      OutOfWaterZ;                                             // 0x0254(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay
		float                                                      Mass;                                                    // 0x0258(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      DinoClientPositionErrorToleranceStopped;                 // 0x025C(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      DinoClientPositionErrorToleranceMovingFlying;            // 0x0260(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      PlayerClientPositionErrorToleranceOverride;              // 0x0264(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      SimulatedTickSkipDistanceSQ;                             // 0x0268(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		bool                                                       bEnablePhysicsInteraction;                               // 0x026C(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		bool                                                       bTouchForceScaledToMass;                                 // 0x026D(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		bool                                                       bPushForceScaledToMass;                                  // 0x026E(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		bool                                                       bScalePushForceToVelocity;                               // 0x026F(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      StandingDownwardForceScale;                              // 0x0270(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      InitialPushForceFactor;                                  // 0x0274(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      PushForceFactor;                                         // 0x0278(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      PushForcePointZOffsetFactor;                             // 0x027C(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      TouchForceFactor;                                        // 0x0280(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      MinTouchForce;                                           // 0x0284(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      MaxTouchForce;                                           // 0x0288(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      RepulsionForce;                                          // 0x028C(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              bForceBraking : 1;                                       // 0x0290(0x0001) BIT_FIELD Deprecated, NoDestructor
		unsigned char                                              UnknownData_FB2Q[0x3];                                   // 0x0291(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      CrouchedSpeedMultiplier;                                 // 0x0294(0x0004) ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor
		struct FVector                                             LastUpdateLocation;                                      // 0x0298(0x000C) ZeroConstructor, IsPlainOldData, NoDestructor, Protected
		struct FVector                                             MoveStartLocation;                                       // 0x02A4(0x000C) ZeroConstructor, IsPlainOldData, NoDestructor, Protected
		float                                                      AnalogInputModifier;                                     // 0x02B0(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, Protected
		float                                                      BackwardsMaxSpeedMultiplier;                             // 0x02B4(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected
		float                                                      BackwardsMovementDotThreshold;                           // 0x02B8(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected
		struct FVector                                             PendingForceToApply;                                     // 0x02BC(0x000C) ZeroConstructor, IsPlainOldData, NoDestructor
		struct FVector                                             PendingImpulseToApply;                                   // 0x02C8(0x000C) ZeroConstructor, IsPlainOldData, NoDestructor
		struct FVector                                             Acceleration;                                            // 0x02D4(0x000C) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      MaxSimulationTimeStep;                                   // 0x02E0(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay
		int32_t                                                    MaxSimulationIterations;                                 // 0x02E4(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay
		float                                                      LedgeCheckThreshold;                                     // 0x02E8(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay
		float                                                      JumpOutOfWaterPitch;                                     // 0x02EC(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay
		float                                                      UpperImpactNormalScale;                                  // 0x02F0(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay
		unsigned char                                              UnknownData_2DE2[0x4];                                   // 0x02F4(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FFindFloorResult                                    CurrentFloor;                                            // 0x02F8(0x0098) Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnTemplate, EditConst
		EMovementMode                                              DefaultLandMovementMode;                                 // 0x0390(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		EMovementMode                                              DefaultWaterMovementMode;                                // 0x0391(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_OOIT[0x2];                                   // 0x0392(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		unsigned char                                              bMaintainHorizontalGroundVelocity : 1;                   // 0x0394(0x0001) BIT_FIELD Edit, BlueprintVisible, NoDestructor
		unsigned char                                              bImpartBaseVelocityX : 1;                                // 0x0394(0x0001) BIT_FIELD Edit, BlueprintVisible, NoDestructor
		unsigned char                                              bImpartBaseVelocityY : 1;                                // 0x0394(0x0001) BIT_FIELD Edit, BlueprintVisible, NoDestructor
		unsigned char                                              bImpartBaseVelocityZ : 1;                                // 0x0394(0x0001) BIT_FIELD Edit, BlueprintVisible, NoDestructor
		unsigned char                                              bImpartBaseAngularVelocity : 1;                          // 0x0394(0x0001) BIT_FIELD Edit, BlueprintVisible, NoDestructor
		unsigned char                                              bCanSlide : 1;                                           // 0x0394(0x0001) BIT_FIELD Edit, BlueprintVisible, NoDestructor
		unsigned char                                              bJustTeleported : 1;                                     // 0x0394(0x0001) BIT_FIELD BlueprintVisible, Transient, NoDestructor
		unsigned char                                              bNetworkUpdateReceived : 1;                              // 0x0394(0x0001) BIT_FIELD BlueprintVisible, Transient, NoDestructor
		unsigned char                                              bNetworkMovementModeChanged : 1;                         // 0x0395(0x0001) BIT_FIELD Transient, NoDestructor
		unsigned char                                              bNotifyApex : 1;                                         // 0x0395(0x0001) BIT_FIELD NoDestructor
		unsigned char                                              bCheatFlying : 1;                                        // 0x0395(0x0001) BIT_FIELD BlueprintVisible, BlueprintReadOnly, NoDestructor
		unsigned char                                              bWantsToCrouch : 1;                                      // 0x0395(0x0001) BIT_FIELD Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnTemplate, EditConst, NoDestructor
		unsigned char                                              bWantsToProne : 1;                                       // 0x0395(0x0001) BIT_FIELD Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnTemplate, EditConst, NoDestructor
		unsigned char                                              bCrouchMaintainsBaseLocation : 1;                        // 0x0395(0x0001) BIT_FIELD Edit, BlueprintVisible, DisableEditOnTemplate, EditConst, NoDestructor, AdvancedDisplay
		unsigned char                                              bIgnoreBaseRotation : 1;                                 // 0x0395(0x0001) BIT_FIELD Edit, BlueprintVisible, NoDestructor
		unsigned char                                              bFastAttachedMove : 1;                                   // 0x0395(0x0001) BIT_FIELD NoDestructor
		unsigned char                                              bAlwaysCheckFloor : 1;                                   // 0x0396(0x0001) BIT_FIELD Edit, BlueprintVisible, NoDestructor, AdvancedDisplay
		unsigned char                                              bUseFlatBaseForFloorChecks : 1;                          // 0x0396(0x0001) BIT_FIELD Edit, BlueprintVisible, NoDestructor, AdvancedDisplay
		unsigned char                                              bPerformingJumpOff : 1;                                  // 0x0396(0x0001) BIT_FIELD NoDestructor
		unsigned char                                              bRequestedMoveUseAcceleration : 1;                       // 0x0396(0x0001) BIT_FIELD Edit, BlueprintVisible, NoDestructor, AdvancedDisplay
		unsigned char                                              bAccelerationFollowsRotation : 1;                        // 0x0396(0x0001) BIT_FIELD Edit, BlueprintVisible, NoDestructor, AdvancedDisplay
		unsigned char                                              bPreventWaterSurfaceHopping : 1;                         // 0x0396(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		unsigned char                                              bCheckFallingAITempIgnoreDinoRiderMesh : 1;              // 0x0396(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		unsigned char                                              bAlwaysCheckForInvallidFloor : 1;                        // 0x0396(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		unsigned char                                              UnknownData_4P8C[0x1];                                   // 0x0397(0x0001) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      PreventWaterHoppingPlaneOffset;                          // 0x0398(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_CJAM[0x4];                                   // 0x039C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		double                                                     PreventWaterHopping_LastTimeAtSurface;                   // 0x03A0(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		float                                                      AccelerationFollowsRotationMinDot;                       // 0x03A8(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay
		float                                                      AccelerationFollowsRotationStopDistance;                 // 0x03AC(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay
		float                                                      RotationAcceleration;                                    // 0x03B0(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay
		float                                                      RotationBraking;                                         // 0x03B4(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay
		float                                                      AngleToStartRotationBraking;                             // 0x03B8(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay
		float                                                      SwimmingAccelZMultiplier;                                // 0x03BC(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      TamedSwimmingAccelZMultiplier;                           // 0x03C0(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              bUseRotationAcceleration : 1;                            // 0x03C4(0x0001) BIT_FIELD Edit, BlueprintVisible, NoDestructor, AdvancedDisplay
		unsigned char                                              bIgnoreRotationAccelerationWhenSwimming : 1;             // 0x03C4(0x0001) BIT_FIELD Edit, BlueprintVisible, NoDestructor, AdvancedDisplay
		unsigned char                                              UnknownData_M1PT : 1;                                    // 0x03C4(0x0001) BIT_FIELD (PADDING)
		unsigned char                                              bForceModifyDesiredRotation : 1;                         // 0x03C4(0x0001) BIT_FIELD Edit, BlueprintVisible, NoDestructor, AdvancedDisplay
		unsigned char                                              UnknownData_LNQV[0x7];                                   // 0x03C5(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		unsigned char                                              bLastHasRequestedVelocity : 1;                           // 0x03CC(0x0001) BIT_FIELD BlueprintVisible, BlueprintReadOnly, Transient, NoDestructor
		unsigned char                                              bHasRequestedVelocity : 1;                               // 0x03CC(0x0001) BIT_FIELD BlueprintVisible, BlueprintReadOnly, Transient, NoDestructor
		unsigned char                                              bRequestedMoveWithMaxSpeed : 1;                          // 0x03CC(0x0001) BIT_FIELD Transient, NoDestructor
		unsigned char                                              bWasAvoidanceUpdated : 1;                                // 0x03CC(0x0001) BIT_FIELD Transient, NoDestructor
		unsigned char                                              UnknownData_WDB0 : 2;                                    // 0x03CC(0x0001) BIT_FIELD (PADDING)
		unsigned char                                              bPreventExitingWater : 1;                                // 0x03CC(0x0001) BIT_FIELD Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor
		unsigned char                                              bForcePreventExitingWater : 1;                           // 0x03CC(0x0001) BIT_FIELD Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor
		unsigned char                                              bPreventEnteringWater : 1;                               // 0x03CD(0x0001) BIT_FIELD Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor
		unsigned char                                              bPendingLaunchNoLowerVelocity : 1;                       // 0x03CD(0x0001) BIT_FIELD NoDestructor
		unsigned char                                              bForceNextTickUpdate : 1;                                // 0x03CD(0x0001) BIT_FIELD Transient, NoDestructor
		unsigned char                                              UnknownData_1L08[0x2];                                   // 0x03CE(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FVector                                             LastForcedNetVelocity;                                   // 0x03D0(0x000C) ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_C54A[0x4];                                   // 0x03DC(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		double                                                     LastStepUpTime;                                          // 0x03E0(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_OTGX[0x20];                                  // 0x03E8(0x0020) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		double                                                     LastSwimTime;                                            // 0x0408(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		struct FRotator                                            CurrentRotationSpeed;                                    // 0x0410(0x000C) ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		struct FVector                                             RequestedVelocity;                                       // 0x041C(0x000C) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		double                                                     DisableMovementPhysicsUntilTime;                         // 0x0428(0x0008) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      LostDeltaTime;                                           // 0x0430(0x0004) ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		float                                                      LastLostDeltaTime;                                       // 0x0434(0x0004) ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		int32_t                                                    AvoidanceUID;                                            // 0x0438(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, AdvancedDisplay
		float                                                      AvoidanceWeight;                                         // 0x043C(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor
		struct FVector                                             PendingLaunchVelocity;                                   // 0x0440(0x000C) ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_Q0HC[0x4];                                   // 0x044C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FCharacterMovementComponentPreClothTickFunction     PreClothComponentTick;                                   // 0x0450(0x0050)
		unsigned char                                              UnknownData_2J01[0x20];                                  // 0x04A0(0x0020) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      MinTimeBetweenTimeStampResets;                           // 0x04C0(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_XHW8[0x4];                                   // 0x04C4(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<struct FStoredMoveData>                             ClientMovedData;                                         // 0x04C8(0x0010) ZeroConstructor, Transient
		unsigned char                                              UnknownData_E9YV[0x8];                                   // 0x04D8(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FRootMotionMovementParams                           RootMotionParams;                                        // 0x04E0(0x0040) Transient
		bool                                                       bWasSimulatingRootMotion;                                // 0x0520(0x0001) ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_H6CK[0x1F];                                  // 0x0521(0x001F) MISSED OFFSET (PADDING)

	public:
		void SetWalkableFloorZ(float InWalkableFloorZ);
		void SetWalkableFloorAngle(float InWalkableFloorAngle);
		void SetMovementMode(EMovementMode NewMovementMode, unsigned char NewCustomMode);
		void SetGroupsToIgnore(int32_t GroupFlags);
		void SetGroupsToAvoid(int32_t GroupFlags);
		void SetBase(class UPrimitiveComponent* NewBase, const class FName& BoneName, bool bNotifyActor);
		void SetAvoidanceGroup(int32_t GroupFlags);
		void SetAvoidanceEnabled(bool bEnable);
		void ServerMoveWithRotation(float TimeStamp, const struct FVector_NetQuantize100& InAccel, const struct FVector_NetQuantize100& ClientLoc, unsigned char CompressedMoveFlags, unsigned char ClientRoll, uint32_t View, class UPrimitiveComponent* ClientMovementBase, const class FName& ClientBaseBoneName, unsigned char ClientMovementMode, const struct FRotator& ClientRotation);
		void ServerMoveOnlyRotation(float TimeStamp, unsigned char ClientRoll, uint32_t View);
		void ServerMoveOldWithRotation(float OldTimeStamp, const struct FVector_NetQuantize100& OldAccel, unsigned char OldMoveFlags, const struct FRotator& OldRotation);
		void ServerMoveOld(float OldTimeStamp, const struct FVector_NetQuantize100& OldAccel, unsigned char OldMoveFlags);
		void ServerMoveDualWithRotation(float TimeStamp0, const struct FVector_NetQuantize100& InAccel0, unsigned char PendingFlags, uint32_t View0, float TimeStamp, const struct FVector_NetQuantize100& InAccel, const struct FVector_NetQuantize100& ClientLoc, unsigned char NewFlags, unsigned char ClientRoll, uint32_t View, class UPrimitiveComponent* ClientMovementBase, const class FName& ClientBaseBoneName, unsigned char ClientMovementMode, const struct FRotator& InRotation0, const struct FRotator& InRotation);
		void ServerMoveDualOnlyRotation(float TimeStamp0, uint32_t View0, float TimeStamp, unsigned char ClientRoll, uint32_t View);
		void ServerMoveDual(float TimeStamp0, const struct FVector_NetQuantize100& InAccel0, unsigned char PendingFlags, uint32_t View0, float TimeStamp, const struct FVector_NetQuantize100& InAccel, const struct FVector_NetQuantize100& ClientLoc, unsigned char NewFlags, unsigned char ClientRoll, uint32_t View, class UPrimitiveComponent* ClientMovementBase, const class FName& ClientBaseBoneName, unsigned char ClientMovementMode);
		void ServerMove(float TimeStamp, const struct FVector_NetQuantize100& InAccel, const struct FVector_NetQuantize100& ClientLoc, unsigned char CompressedMoveFlags, unsigned char ClientRoll, uint32_t View, class UPrimitiveComponent* ClientMovementBase, const class FName& ClientBaseBoneName, unsigned char ClientMovementMode);
		void ServerJumpOutOfWater(const struct FVector_NetQuantize100& WallNormal, unsigned char JumpFlag);
		void RequestDirectMove(const struct FVector& MoveVelocity, bool bForceMaxSpeed);
		struct FVector NewFallVelocity(const struct FVector& InitialVelocity, const struct FVector& Gravity, float DeltaTime);
		float K2_GetWalkableFloorZ();
		float K2_GetWalkableFloorAngle();
		float K2_GetModifiedMaxAcceleration();
		bool IsWalking();
		bool IsWalkable(const struct FHitResult& Hit);
		bool IsOnWalkableFloor();
		float GetValidPerchRadius();
		float GetPerchRadiusThreshold();
		class UPrimitiveComponent* GetMovementBase();
		float GetMaxJumpHeight();
		float GetMaxAcceleration();
		struct FVector GetImpartedMovementBaseVelocity();
		struct FVector GetCurrentAcceleration();
		class ACharacter* GetCharacterOwner();
		float GetAnalogInputModifier();
		void DisableMovement();
		void ClientVeryShortAdjustPosition(float TimeStamp, const struct FVector& NewLoc, class UPrimitiveComponent* NewBase, const class FName& NewBaseBoneName, bool bHasBase, bool bBaseRelativePosition, unsigned char ServerMovementMode);
		void ClientDrawDebugSphere(const struct FVector& Location, float Radius, const struct FColor& SphereColor, float LifeSpan);
		void ClientAdjustRootMotionPosition(float TimeStamp, float ServerMontageTrackPosition, const struct FVector& ServerLoc, const struct FVector_NetQuantizeNormal& ServerRotation, float ServerVelZ, class UPrimitiveComponent* ServerBase, const class FName& ServerBoneName, bool bHasBase, bool bBaseRelativePosition, unsigned char ServerMovementMode);
		void ClientAdjustPosition(float TimeStamp, const struct FVector& NewLoc, const struct FVector& NewVel, class UPrimitiveComponent* NewBase, const class FName& NewBaseBoneName, bool bHasBase, bool bBaseRelativePosition, unsigned char ServerMovementMode);
		void ClientAckGoodMove(float TimeStamp);
		void ClearBase(bool bNotifyActor);
		void CapsuleTouched(class AActor* Other, class UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
		void CalcVelocity(float DeltaTime, float Friction, bool bFluid, float BrakingDeceleration);
		void AddImpulse(const struct FVector& Impulse, bool bVelocityChange, float MassScaleImpulseExponent, bool bOverrideMaxImpulseZ);
		void AddForce(const struct FVector& Force);
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.CheatManager
	 * Size -> 0x0058 (FullSize[0x0080] - InheritedSize[0x0028])
	 */
	class UCheatManager : public UObject
	{
	public:
		class ADebugCameraController*                              DebugCameraControllerRef;                                // 0x0028(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor
		class UClass*                                              DebugCameraControllerClass;                              // 0x0030(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_E3TV[0x48];                                  // 0x0038(0x0048) MISSED OFFSET (PADDING)

	public:
		void WidgetReflector();
		void Walk();
		void ViewSelf();
		void ViewPlayer(const class FString& S);
		void ViewClass(class UClass* DesiredClass);
		void ViewActor(const class FName& ActorName);
		void ToggleDebugCamera();
		void ToggleAILogging();
		void TestCollisionDistance();
		void Teleport();
		void Summon(const class FString& ClassName);
		void StreamLevelOut(const class FName& PackageName);
		void StreamLevelIn(const class FName& PackageName);
		void Slomo(float T);
		void SetWorldOrigin();
		void SetNavDrawDistance(float DrawDistance);
		void ServerToggleAILogging();
		void RebuildNavigation();
		void PlayersOnly();
		void OnlyLoadLevel(const class FName& PackageName);
		void LogLoc();
		void God();
		void Ghost();
		void FreezeFrame(float Delay);
		void Fly();
		void FlushLog();
		void DumpVoiceMutingState();
		void DumpOnlineSessionState();
		void DestroyTarget();
		void DestroyPawns(class UClass* aClass);
		void DestroyAll(class UClass* aClass, bool bExactMatch);
		void DebugCapsuleSweepSize(float HalfHeight, float Radius);
		void DebugCapsuleSweepPawn();
		void DebugCapsuleSweepComplex(bool bTraceComplex);
		void DebugCapsuleSweepClear();
		void DebugCapsuleSweepChannel(ECollisionChannel Channel);
		void DebugCapsuleSweepCapture();
		void DebugCapsuleSweep();
		void DamageTarget(float DamageAmount);
		void ChangeSize(float F);
		void BugItStringCreator(const struct FVector& ViewLocation, const struct FRotator& ViewRotation, class FString* GoString, class FString* LocString);
		void BugItGo(float X, float Y, float Z, float Pitch, float Yaw, float Roll);
		void BugIt(const class FString& ScreenShotDescription);
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.Engine
	 * Size -> 0x0928 (FullSize[0x0950] - InheritedSize[0x0028])
	 */
	class UEngine : public UObject
	{
	public:
		unsigned char                                              UnknownData_DG90[0x8];                                   // 0x0028(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UFont*                                               TinyFont;                                                // 0x0030(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor
		struct FStringAssetReference                               TinyFontName;                                            // 0x0038(0x0010) Edit, ZeroConstructor, Config, GlobalConfig
		class UFont*                                               SmallFont;                                               // 0x0048(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor
		struct FStringAssetReference                               SmallFontName;                                           // 0x0050(0x0010) Edit, ZeroConstructor, Config, GlobalConfig
		class UFont*                                               MediumFont;                                              // 0x0060(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor
		struct FStringAssetReference                               MediumFontName;                                          // 0x0068(0x0010) Edit, ZeroConstructor, Config, GlobalConfig
		class UFont*                                               LargeFont;                                               // 0x0078(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor
		struct FStringAssetReference                               LargeFontName;                                           // 0x0080(0x0010) Edit, ZeroConstructor, Config, GlobalConfig
		class UFont*                                               SubtitleFont;                                            // 0x0090(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor
		struct FStringAssetReference                               SubtitleFontName;                                        // 0x0098(0x0010) Edit, ZeroConstructor, Config, GlobalConfig, AdvancedDisplay
		TArray<class UFont*>                                       AdditionalFonts;                                         // 0x00A8(0x0010) ZeroConstructor
		unsigned char                                              UnknownData_EGCY[0x8];                                   // 0x00B8(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class FString>                                      AdditionalFontNames;                                     // 0x00C0(0x0010) Edit, ZeroConstructor, Config, GlobalConfig, AdvancedDisplay
		class UClass*                                              ConsoleClass;                                            // 0x00D0(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor
		struct FStringClassReference                               ConsoleClassName;                                        // 0x00D8(0x0010) Edit, ZeroConstructor, Config, GlobalConfig, NoClear
		class UClass*                                              GameViewportClientClass;                                 // 0x00E8(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor
		struct FStringClassReference                               GameViewportClientClassName;                             // 0x00F0(0x0010) Edit, ZeroConstructor, Config, GlobalConfig, NoClear
		class UClass*                                              LocalPlayerClass;                                        // 0x0100(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor
		struct FStringClassReference                               LocalPlayerClassName;                                    // 0x0108(0x0010) Edit, ZeroConstructor, Config, GlobalConfig, NoClear
		class UClass*                                              WorldSettingsClass;                                      // 0x0118(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor
		struct FStringClassReference                               WorldSettingsClassName;                                  // 0x0120(0x0010) Edit, ZeroConstructor, Config, GlobalConfig, NoClear
		struct FStringClassReference                               NavigationSystemClassName;                               // 0x0130(0x0010) ZeroConstructor, Config, GlobalConfig, NoClear
		class UClass*                                              NavigationSystemClass;                                   // 0x0140(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor
		struct FStringClassReference                               AvoidanceManagerClassName;                               // 0x0148(0x0010) ZeroConstructor, Config, GlobalConfig, NoClear
		class UClass*                                              AvoidanceManagerClass;                                   // 0x0158(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor
		class UClass*                                              PhysicsCollisionHandlerClass;                            // 0x0160(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor
		struct FStringClassReference                               PhysicsCollisionHandlerClassName;                        // 0x0168(0x0010) Edit, ZeroConstructor, Config, GlobalConfig, NoClear, AdvancedDisplay
		struct FStringClassReference                               GameUserSettingsClassName;                               // 0x0178(0x0010) ZeroConstructor, Config, GlobalConfig, NoClear
		class UClass*                                              GameUserSettingsClass;                                   // 0x0188(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor
		class UGameUserSettings*                                   GameUserSettings;                                        // 0x0190(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor
		class UClass*                                              LevelScriptActorClass;                                   // 0x0198(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor
		struct FStringClassReference                               LevelScriptActorClassName;                               // 0x01A0(0x0010) Edit, ZeroConstructor, Config, GlobalConfig, NoClear
		struct FStringClassReference                               DefaultBlueprintBaseClassName;                           // 0x01B0(0x0010) Edit, ZeroConstructor, Config, GlobalConfig, NoClear, AdvancedDisplay
		struct FStringClassReference                               GameSingletonClassName;                                  // 0x01C0(0x0010) Edit, ZeroConstructor, Config, GlobalConfig, NoClear, AdvancedDisplay
		class UObject*                                             GameSingleton;                                           // 0x01D0(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor
		class UTireType*                                           DefaultTireType;                                         // 0x01D8(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor
		struct FStringAssetReference                               DefaultTireTypeName;                                     // 0x01E0(0x0010) Edit, ZeroConstructor, Config, GlobalConfig, AdvancedDisplay
		class UClass*                                              DefaultPreviewPawnClass;                                 // 0x01F0(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor
		struct FStringClassReference                               DefaultPreviewPawnClassName;                             // 0x01F8(0x0010) Edit, ZeroConstructor, Config, GlobalConfig, NoClear, AdvancedDisplay
		class FString                                              PlayOnConsoleSaveDir;                                    // 0x0208(0x0010) ZeroConstructor, Config
		class UTexture2D*                                          DefaultTexture;                                          // 0x0218(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor
		struct FStringAssetReference                               DefaultTextureName;                                      // 0x0220(0x0010) ZeroConstructor, Config, GlobalConfig
		class UTexture*                                            DefaultDiffuseTexture;                                   // 0x0230(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor
		struct FStringAssetReference                               DefaultDiffuseTextureName;                               // 0x0238(0x0010) ZeroConstructor, Config, GlobalConfig
		class UTexture2D*                                          DefaultBSPVertexTexture;                                 // 0x0248(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor
		struct FStringAssetReference                               DefaultBSPVertexTextureName;                             // 0x0250(0x0010) ZeroConstructor, Config, GlobalConfig
		class UTexture2D*                                          HighFrequencyNoiseTexture;                               // 0x0260(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor
		struct FStringAssetReference                               HighFrequencyNoiseTextureName;                           // 0x0268(0x0010) ZeroConstructor, Config, GlobalConfig
		class UTexture2D*                                          DefaultBokehTexture;                                     // 0x0278(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor
		struct FStringAssetReference                               DefaultBokehTextureName;                                 // 0x0280(0x0010) ZeroConstructor, Config, GlobalConfig
		class UMaterial*                                           WireframeMaterial;                                       // 0x0290(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor
		struct FStringAssetReference                               WireframeMaterialName;                                   // 0x0298(0x0010) ZeroConstructor, Config, GlobalConfig
		class UMaterial*                                           DebugMeshMaterial;                                       // 0x02A8(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor
		struct FStringAssetReference                               DebugMeshMaterialName;                                   // 0x02B0(0x0010) ZeroConstructor, Config, GlobalConfig
		class UMaterial*                                           LevelColorationLitMaterial;                              // 0x02C0(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor
		struct FStringAssetReference                               LevelColorationLitMaterialName;                          // 0x02C8(0x0010) ZeroConstructor, Config, GlobalConfig
		class UMaterial*                                           LevelColorationUnlitMaterial;                            // 0x02D8(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor
		struct FStringAssetReference                               LevelColorationUnlitMaterialName;                        // 0x02E0(0x0010) ZeroConstructor, Config, GlobalConfig
		class UMaterial*                                           LightingTexelDensityMaterial;                            // 0x02F0(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor
		struct FStringAssetReference                               LightingTexelDensityName;                                // 0x02F8(0x0010) ZeroConstructor, Config, GlobalConfig
		class UMaterial*                                           ShadedLevelColorationLitMaterial;                        // 0x0308(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor
		struct FStringAssetReference                               ShadedLevelColorationLitMaterialName;                    // 0x0310(0x0010) ZeroConstructor, Config, GlobalConfig
		class UMaterial*                                           ShadedLevelColorationUnlitMaterial;                      // 0x0320(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor
		struct FStringAssetReference                               ShadedLevelColorationUnlitMaterialName;                  // 0x0328(0x0010) ZeroConstructor, Config, GlobalConfig
		class UMaterial*                                           RemoveSurfaceMaterial;                                   // 0x0338(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor
		struct FStringAssetReference                               RemoveSurfaceMaterialName;                               // 0x0340(0x0010) ZeroConstructor, Config, GlobalConfig
		class UMaterial*                                           VertexColorMaterial;                                     // 0x0350(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor
		struct FStringAssetReference                               VertexColorMaterialName;                                 // 0x0358(0x0010) ZeroConstructor, Config, GlobalConfig
		class UMaterial*                                           VertexColorViewModeMaterial_ColorOnly;                   // 0x0368(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor
		struct FStringAssetReference                               VertexColorViewModeMaterialName_ColorOnly;               // 0x0370(0x0010) ZeroConstructor, Config, GlobalConfig
		class UMaterial*                                           VertexColorViewModeMaterial_AlphaAsColor;                // 0x0380(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor
		struct FStringAssetReference                               VertexColorViewModeMaterialName_AlphaAsColor;            // 0x0388(0x0010) ZeroConstructor, Config, GlobalConfig
		class UMaterial*                                           VertexColorViewModeMaterial_RedOnly;                     // 0x0398(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor
		struct FStringAssetReference                               VertexColorViewModeMaterialName_RedOnly;                 // 0x03A0(0x0010) ZeroConstructor, Config, GlobalConfig
		class UMaterial*                                           VertexColorViewModeMaterial_GreenOnly;                   // 0x03B0(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor
		struct FStringAssetReference                               VertexColorViewModeMaterialName_GreenOnly;               // 0x03B8(0x0010) ZeroConstructor, Config, GlobalConfig
		class UMaterial*                                           VertexColorViewModeMaterial_BlueOnly;                    // 0x03C8(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor
		struct FStringAssetReference                               VertexColorViewModeMaterialName_BlueOnly;                // 0x03D0(0x0010) ZeroConstructor, Config, GlobalConfig
		class UMaterial*                                           ConstraintLimitMaterial;                                 // 0x03E0(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor
		class UMaterialInstanceDynamic*                            ConstraintLimitMaterialX;                                // 0x03E8(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor
		class UMaterialInstanceDynamic*                            ConstraintLimitMaterialY;                                // 0x03F0(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor
		class UMaterialInstanceDynamic*                            ConstraintLimitMaterialZ;                                // 0x03F8(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor
		struct FStringAssetReference                               ConstraintLimitMaterialName;                             // 0x0400(0x0010) ZeroConstructor, Config, GlobalConfig
		class UMaterial*                                           InvalidLightmapSettingsMaterial;                         // 0x0410(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor
		struct FStringAssetReference                               InvalidLightmapSettingsMaterialName;                     // 0x0418(0x0010) ZeroConstructor, Config, GlobalConfig
		class UMaterial*                                           PreviewShadowsIndicatorMaterial;                         // 0x0428(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor
		struct FStringAssetReference                               PreviewShadowsIndicatorMaterialName;                     // 0x0430(0x0010) Edit, ZeroConstructor, Config, GlobalConfig
		class UMaterial*                                           ArrowMaterial;                                           // 0x0440(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor
		struct FStringAssetReference                               ArrowMaterialName;                                       // 0x0448(0x0010) ZeroConstructor, Config, GlobalConfig
		struct FLinearColor                                        LightingOnlyBrightness;                                  // 0x0458(0x0010) ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor
		TArray<struct FColor>                                      LightComplexityColors;                                   // 0x0468(0x0010) ZeroConstructor, Config, GlobalConfig
		TArray<struct FLinearColor>                                ShaderComplexityColors;                                  // 0x0478(0x0010) ZeroConstructor, Config, GlobalConfig
		TArray<struct FLinearColor>                                StationaryLightOverlapColors;                            // 0x0488(0x0010) ZeroConstructor, Config, GlobalConfig
		float                                                      MaxPixelShaderAdditiveComplexityCount;                   // 0x0498(0x0004) ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor
		float                                                      MaxES2PixelShaderAdditiveComplexityCount;                // 0x049C(0x0004) ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor
		float                                                      MinLightMapDensity;                                      // 0x04A0(0x0004) ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor
		float                                                      IdealLightMapDensity;                                    // 0x04A4(0x0004) ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor
		float                                                      MaxLightMapDensity;                                      // 0x04A8(0x0004) ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor
		unsigned char                                              bRenderLightMapDensityGrayscale : 1;                     // 0x04AC(0x0001) BIT_FIELD Config, GlobalConfig, NoDestructor
		unsigned char                                              UnknownData_5GXT[0x3];                                   // 0x04AD(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      RenderLightMapDensityGrayscaleScale;                     // 0x04B0(0x0004) ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor
		float                                                      RenderLightMapDensityColorScale;                         // 0x04B4(0x0004) ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor
		struct FLinearColor                                        LightMapDensityVertexMappedColor;                        // 0x04B8(0x0010) ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor
		struct FLinearColor                                        LightMapDensitySelectedColor;                            // 0x04C8(0x0010) ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor
		TArray<struct FStatColorMapping>                           StatColorMappings;                                       // 0x04D8(0x0010) ZeroConstructor, Config, GlobalConfig
		class UPhysicalMaterial*                                   DefaultPhysMaterial;                                     // 0x04E8(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor
		struct FStringAssetReference                               DefaultPhysMaterialName;                                 // 0x04F0(0x0010) ZeroConstructor, Config, GlobalConfig
		TArray<struct FGameNameRedirect>                           ActiveGameNameRedirects;                                 // 0x0500(0x0010) ZeroConstructor, Config
		TArray<struct FClassRedirect>                              ActiveClassRedirects;                                    // 0x0510(0x0010) ZeroConstructor, Config
		TArray<struct FPluginRedirect>                             ActivePluginRedirects;                                   // 0x0520(0x0010) ZeroConstructor, Config
		TArray<struct FStructRedirect>                             ActiveStructRedirects;                                   // 0x0530(0x0010) ZeroConstructor, Config
		class UTexture2D*                                          PreIntegratedSkinBRDFTexture;                            // 0x0540(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor
		struct FStringAssetReference                               PreIntegratedSkinBRDFTextureName;                        // 0x0548(0x0010) ZeroConstructor, Config, GlobalConfig
		class UTexture2D*                                          MiniFontTexture;                                         // 0x0558(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor
		struct FStringAssetReference                               MiniFontTextureName;                                     // 0x0560(0x0010) ZeroConstructor, Config, GlobalConfig
		class UTexture*                                            WeightMapPlaceholderTexture;                             // 0x0570(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor
		struct FStringAssetReference                               WeightMapPlaceholderTextureName;                         // 0x0578(0x0010) ZeroConstructor, Config, GlobalConfig
		class UTexture2D*                                          LightMapDensityTexture;                                  // 0x0588(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor
		struct FStringAssetReference                               LightMapDensityTextureName;                              // 0x0590(0x0010) ZeroConstructor, Config, GlobalConfig
		unsigned char                                              UnknownData_GHQQ[0x8];                                   // 0x05A0(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UGameViewportClient*                                 GameViewport;                                            // 0x05A8(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor
		TArray<class FString>                                      DeferredCommands;                                        // 0x05B0(0x0010) ZeroConstructor
		int32_t                                                    TickCycles;                                              // 0x05C0(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor
		int32_t                                                    GameCycles;                                              // 0x05C4(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor
		int32_t                                                    ClientCycles;                                            // 0x05C8(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      NearClipPlane;                                           // 0x05CC(0x0004) Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor
		unsigned char                                              bEditorAnalyticsEnabled : 1;                             // 0x05D0(0x0001) BIT_FIELD Edit, Config, NoDestructor, AdvancedDisplay
		unsigned char                                              bHardwareSurveyEnabled : 1;                              // 0x05D0(0x0001) BIT_FIELD Edit, Config, NoDestructor, AdvancedDisplay
		unsigned char                                              bSubtitlesEnabled : 1;                                   // 0x05D0(0x0001) BIT_FIELD Edit, Config, NoDestructor
		unsigned char                                              bSubtitlesForcedOff : 1;                                 // 0x05D0(0x0001) BIT_FIELD Edit, Config, NoDestructor
		unsigned char                                              UnknownData_Z9BQ[0x3];                                   // 0x05D1(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      TimeBetweenPurgingPendingKillObjects;                    // 0x05D4(0x0004) Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, AdvancedDisplay
		unsigned char                                              bUseBackgroundLevelStreaming : 1;                        // 0x05D8(0x0001) BIT_FIELD Edit, Config, NoDestructor
		unsigned char                                              UnknownData_ALV6[0x3];                                   // 0x05D9(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      AsyncLoadingTimeLimit;                                   // 0x05DC(0x0004) Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, AdvancedDisplay
		unsigned char                                              bAsyncLoadingUseFullTimeLimit : 1;                       // 0x05E0(0x0001) BIT_FIELD Edit, Config, NoDestructor, AdvancedDisplay
		unsigned char                                              UnknownData_N5FN[0x3];                                   // 0x05E1(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      PriorityAsyncLoadingExtraTime;                           // 0x05E4(0x0004) Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, AdvancedDisplay
		float                                                      LevelStreamingActorsUpdateTimeLimit;                     // 0x05E8(0x0004) Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, AdvancedDisplay
		int32_t                                                    LevelStreamingComponentsRegistrationGranularity;         // 0x05EC(0x0004) Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, AdvancedDisplay
		int32_t                                                    MaximumLoopIterationCount;                               // 0x05F0(0x0004) Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor
		unsigned char                                              bEnableEditorPSysRealtimeLOD : 1;                        // 0x05F4(0x0001) BIT_FIELD Config, NoDestructor
		unsigned char                                              bSmoothFrameRate : 1;                                    // 0x05F4(0x0001) BIT_FIELD Edit, Config, NoDestructor
		unsigned char                                              UnknownData_E6EV[0x3];                                   // 0x05F5(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FFloatRange                                         SmoothedFrameRateRange;                                  // 0x05F8(0x0010) Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor
		unsigned char                                              bCheckForMultiplePawnsSpawnedInAFrame : 1;               // 0x0608(0x0001) BIT_FIELD Config, NoDestructor
		unsigned char                                              UnknownData_O77O[0x3];                                   // 0x0609(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int32_t                                                    NumPawnsAllowedToBeSpawnedInAFrame;                      // 0x060C(0x0004) ZeroConstructor, Config, IsPlainOldData, NoDestructor
		unsigned char                                              bShouldGenerateLowQualityLightmaps : 1;                  // 0x0610(0x0001) BIT_FIELD Config, GlobalConfig, NoDestructor
		unsigned char                                              UnknownData_LNUK[0x3];                                   // 0x0611(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FColor                                              C_WorldBox;                                              // 0x0614(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor
		struct FColor                                              C_BrushWire;                                             // 0x0618(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor
		struct FColor                                              C_AddWire;                                               // 0x061C(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor
		struct FColor                                              C_SubtractWire;                                          // 0x0620(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor
		struct FColor                                              C_SemiSolidWire;                                         // 0x0624(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor
		struct FColor                                              C_NonSolidWire;                                          // 0x0628(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor
		struct FColor                                              C_WireBackground;                                        // 0x062C(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor
		struct FColor                                              C_ScaleBoxHi;                                            // 0x0630(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor
		struct FColor                                              C_VolumeCollision;                                       // 0x0634(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor
		struct FColor                                              C_BSPCollision;                                          // 0x0638(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor
		struct FColor                                              C_OrthoBackground;                                       // 0x063C(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor
		struct FColor                                              C_Volume;                                                // 0x0640(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor
		struct FColor                                              C_BrushShape;                                            // 0x0644(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      StreamingDistanceFactor;                                 // 0x0648(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay
		ETransitionType                                            TransitionType;                                          // 0x064C(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_1OF2[0x3];                                   // 0x064D(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FString                                              TransitionDescription;                                   // 0x0650(0x0010) ZeroConstructor
		class FString                                              TransitionGameMode;                                      // 0x0660(0x0010) ZeroConstructor
		float                                                      MeshLODRange;                                            // 0x0670(0x0004) ZeroConstructor, Config, IsPlainOldData, NoDestructor
		unsigned char                                              bAllowMatureLanguage : 1;                                // 0x0674(0x0001) BIT_FIELD Config, NoDestructor
		unsigned char                                              UnknownData_D7TV[0x3];                                   // 0x0675(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      CameraRotationThreshold;                                 // 0x0678(0x0004) ZeroConstructor, Config, IsPlainOldData, NoDestructor
		float                                                      CameraTranslationThreshold;                              // 0x067C(0x0004) ZeroConstructor, Config, IsPlainOldData, NoDestructor
		float                                                      PrimitiveProbablyVisibleTime;                            // 0x0680(0x0004) ZeroConstructor, Config, IsPlainOldData, NoDestructor
		float                                                      MaxOcclusionPixelsFraction;                              // 0x0684(0x0004) ZeroConstructor, Config, IsPlainOldData, NoDestructor
		unsigned char                                              bDisablePhysXHardwareSupport : 1;                        // 0x0688(0x0001) BIT_FIELD Config, GlobalConfig, NoDestructor
		unsigned char                                              bPauseOnLossOfFocus : 1;                                 // 0x0688(0x0001) BIT_FIELD Config, NoDestructor
		unsigned char                                              UnknownData_ZM7I[0x3];                                   // 0x0689(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int32_t                                                    MaxParticleResize;                                       // 0x068C(0x0004) ZeroConstructor, Config, IsPlainOldData, NoDestructor
		int32_t                                                    MaxParticleResizeWarn;                                   // 0x0690(0x0004) ZeroConstructor, Config, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_DZOF[0x4];                                   // 0x0694(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<struct FDropNoteInfo>                               PendingDroppedNotes;                                     // 0x0698(0x0010) ZeroConstructor, Transient
		struct FRigidBodyErrorCorrection                           PhysicErrorCorrection;                                   // 0x06A8(0x001C) Config
		float                                                      NetClientTicksPerSecond;                                 // 0x06C4(0x0004) ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor
		unsigned char                                              bHasPendingGlobalReregister : 1;                         // 0x06C8(0x0001) BIT_FIELD Transient, NoDestructor
		unsigned char                                              UnknownData_N4B4[0x3];                                   // 0x06C9(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      DisplayGamma;                                            // 0x06CC(0x0004) ZeroConstructor, Config, IsPlainOldData, NoDestructor
		float                                                      MinDesiredFrameRate;                                     // 0x06D0(0x0004) Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor
		struct FLinearColor                                        DefaultSelectedMaterialColor;                            // 0x06D4(0x0010) ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor
		struct FLinearColor                                        SelectedMaterialColor;                                   // 0x06E4(0x0010) ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		struct FLinearColor                                        SelectionOutlineColor;                                   // 0x06F4(0x0010) ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		struct FLinearColor                                        SelectedMaterialColorOverride;                           // 0x0704(0x0010) ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		bool                                                       bIsOverridingSelectedColor;                              // 0x0714(0x0001) ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_PAF6[0x3];                                   // 0x0715(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		unsigned char                                              bEnableOnScreenDebugMessages : 1;                        // 0x0718(0x0001) BIT_FIELD Config, GlobalConfig, NoDestructor
		unsigned char                                              bEnableOnScreenDebugMessagesDisplay : 1;                 // 0x0718(0x0001) BIT_FIELD Transient, NoDestructor
		unsigned char                                              bSuppressMapWarnings : 1;                                // 0x0718(0x0001) BIT_FIELD Config, GlobalConfig, NoDestructor
		unsigned char                                              bCookSeparateSharedMPGameContent : 1;                    // 0x0718(0x0001) BIT_FIELD Config, GlobalConfig, NoDestructor
		unsigned char                                              bDisableAILogging : 1;                                   // 0x0718(0x0001) BIT_FIELD Config, GlobalConfig, NoDestructor
		unsigned char                                              UnknownData_8NNP[0x3];                                   // 0x0719(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		uint32_t                                                   bEnableVisualLogRecordingOnStart;                        // 0x071C(0x0004) ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor
		class UDeviceProfileManager*                               DeviceProfileManager;                                    // 0x0720(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_LS2J[0x4];                                   // 0x0728(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int32_t                                                    ScreenSaverInhibitorSemaphore;                           // 0x072C(0x0004) ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		unsigned char                                              bStartWithMatineeCapture : 1;                            // 0x0730(0x0001) BIT_FIELD Transient, NoDestructor
		unsigned char                                              bCompressMatineeCapture : 1;                             // 0x0730(0x0001) BIT_FIELD Transient, NoDestructor
		unsigned char                                              UnknownData_IVI6[0x7];                                   // 0x0731(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FString                                              MatineeCaptureName;                                      // 0x0738(0x0010) ZeroConstructor, Transient
		class FString                                              MatineePackageCaptureName;                               // 0x0748(0x0010) ZeroConstructor, Transient
		int32_t                                                    MatineeCaptureFPS;                                       // 0x0758(0x0004) ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		EMatineeCaptureType                                        MatineeCaptureType;                                      // 0x075C(0x0001) ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		bool                                                       bNoTextureStreaming;                                     // 0x075D(0x0001) ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_G06G[0x2];                                   // 0x075E(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		unsigned char                                              bLockReadOnlyLevels : 1;                                 // 0x0760(0x0001) BIT_FIELD Transient, NoDestructor
		unsigned char                                              UnknownData_V6C4[0x7];                                   // 0x0761(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FString                                              ParticleEventManagerClassPath;                           // 0x0768(0x0010) ZeroConstructor, Config, GlobalConfig
		unsigned char                                              UnknownData_947P[0x10];                                  // 0x0778(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      SelectionHighlightIntensity;                             // 0x0788(0x0004) ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		float                                                      BSPSelectionHighlightIntensity;                          // 0x078C(0x0004) ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		float                                                      HoverHighlightIntensity;                                 // 0x0790(0x0004) ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		float                                                      SelectionHighlightIntensityBillboards;                   // 0x0794(0x0004) ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_XSSW[0x168];                                 // 0x0798(0x0168) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<struct FNetDriverDefinition>                        NetDriverDefinitions;                                    // 0x0900(0x0010) ZeroConstructor, Transient, Config
		TArray<class FString>                                      ServerActors;                                            // 0x0910(0x0010) ZeroConstructor, Config
		unsigned char                                              bStartedLoadMapMovie : 1;                                // 0x0920(0x0001) BIT_FIELD Transient, NoDestructor
		unsigned char                                              UnknownData_DK48[0x17];                                  // 0x0921(0x0017) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int32_t                                                    NextWorldContextHandle;                                  // 0x0938(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, Protected
		unsigned char                                              UnknownData_6ZWX[0x14];                                  // 0x093C(0x0014) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.GameEngine
	 * Size -> 0x0040 (FullSize[0x0990] - InheritedSize[0x0950])
	 */
	class UGameEngine : public UEngine
	{
	public:
		unsigned char                                              bCheckForMovieCapture : 1;                               // 0x0950(0x0001) BIT_FIELD Transient, NoDestructor
		unsigned char                                              UnknownData_LPQY[0x3];                                   // 0x0951(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      MaxDeltaTime;                                            // 0x0954(0x0004) ZeroConstructor, Config, IsPlainOldData, NoDestructor
		class UGameInstance*                                       GameInstance;                                            // 0x0958(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_KWL6[0x30];                                  // 0x0960(0x0030) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.GameMode
	 * Size -> 0x00F0 (FullSize[0x0558] - InheritedSize[0x0468])
	 */
	class AGameMode : public AInfo
	{
	public:
		class FName                                                MatchState;                                              // 0x0468(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, Protected
		unsigned char                                              bUseSeamlessTravel : 1;                                  // 0x0470(0x0001) BIT_FIELD NoDestructor
		unsigned char                                              bPauseable : 1;                                          // 0x0470(0x0001) BIT_FIELD NoDestructor
		unsigned char                                              bStartPlayersAsSpectators : 1;                           // 0x0470(0x0001) BIT_FIELD NoDestructor
		unsigned char                                              bDelayedStart : 1;                                       // 0x0470(0x0001) BIT_FIELD NoDestructor
		unsigned char                                              UnknownData_JVXK[0x7];                                   // 0x0471(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FString                                              OptionsString;                                           // 0x0478(0x0010) ZeroConstructor
		class UClass*                                              DefaultPawnClass;                                        // 0x0488(0x0008) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		class UClass*                                              HUDClass;                                                // 0x0490(0x0008) Edit, BlueprintVisible, ZeroConstructor, NoClear, IsPlainOldData, NoDestructor
		int32_t                                                    NumSpectators;                                           // 0x0498(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor
		int32_t                                                    NumPlayers;                                              // 0x049C(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor
		int32_t                                                    NumBots;                                                 // 0x04A0(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      MinRespawnDelay;                                         // 0x04A4(0x0004) Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor
		class AGameSession*                                        GameSession;                                             // 0x04A8(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor
		int32_t                                                    NumTravellingPlayers;                                    // 0x04B0(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor
		int32_t                                                    CurrentID;                                               // 0x04B4(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor
		class FString                                              DefaultPlayerName;                                       // 0x04B8(0x0010) BlueprintReadOnly, ZeroConstructor
		TArray<class APlayerStart*>                                PlayerStarts;                                            // 0x04C8(0x0010) ZeroConstructor
		class UClass*                                              EngineMessageClass;                                      // 0x04D8(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor
		class UClass*                                              PlayerControllerClass;                                   // 0x04E0(0x0008) Edit, BlueprintVisible, ZeroConstructor, NoClear, IsPlainOldData, NoDestructor
		class UClass*                                              SpectatorClass;                                          // 0x04E8(0x0008) Edit, BlueprintVisible, ZeroConstructor, NoClear, IsPlainOldData, NoDestructor
		class UClass*                                              PlayerStateClass;                                        // 0x04F0(0x0008) Edit, BlueprintVisible, ZeroConstructor, NoClear, IsPlainOldData, NoDestructor, AdvancedDisplay
		class UClass*                                              GameStateClass;                                          // 0x04F8(0x0008) Edit, BlueprintVisible, ZeroConstructor, NoClear, IsPlainOldData, NoDestructor
		class AGameState*                                          GameState;                                               // 0x0500(0x0008) ZeroConstructor, Transient, SaveGame, IsPlainOldData, NoDestructor
		TArray<class APlayerState*>                                InactivePlayerArray;                                     // 0x0508(0x0010) ZeroConstructor
		unsigned char                                              UnknownData_XI2X[0x10];                                  // 0x0518(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UAntiDupeTransactionLog*                             AntiDupeTransactionLog;                                  // 0x0528(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		TArray<struct FGameClassShortName>                         GameModeClassAliases;                                    // 0x0530(0x0010) ZeroConstructor, Config, Protected
		float                                                      InactivePlayerStateLifeSpan;                             // 0x0540(0x0004) ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected
		unsigned char                                              UnknownData_W8MF[0x14];                                  // 0x0544(0x0014) MISSED OFFSET (PADDING)

	public:
		bool ShouldSpawnAtStartSpot(class AController* Player);
		void SetBandwidthLimit(float AsyncIOBandwidthLimit);
		void K2_PostLogin(class APlayerController* NewPlayer);
		class UClass* GetDefaultPawnClassForController(class AController* InController);
		class AActor* ChoosePlayerStart(class AController* Player);
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.GameInstance
	 * Size -> 0x0030 (FullSize[0x0058] - InheritedSize[0x0028])
	 */
	class UGameInstance : public UObject
	{
	public:
		unsigned char                                              UnknownData_Q985[0x10];                                  // 0x0028(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class ULocalPlayer*>                                LocalPlayers;                                            // 0x0038(0x0010) ZeroConstructor
		unsigned char                                              UnknownData_14M6[0x10];                                  // 0x0048(0x0010) MISSED OFFSET (PADDING)

	public:
		void DebugRemovePlayer(int32_t ControllerId);
		void DebugCreatePlayer(int32_t ControllerId);
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.GameSession
	 * Size -> 0x0018 (FullSize[0x0480] - InheritedSize[0x0468])
	 */
	class AGameSession : public AInfo
	{
	public:
		int32_t                                                    MaxSpectators;                                           // 0x0468(0x0004) ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor
		int32_t                                                    MaxPlayers;                                              // 0x046C(0x0004) ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor
		unsigned char                                              MaxSplitscreensPerConnection;                            // 0x0470(0x0001) ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor
		bool                                                       bRequiresPushToTalk;                                     // 0x0471(0x0001) ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_04M1[0x2];                                   // 0x0472(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FName                                                SessionName;                                             // 0x0474(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_TKS9[0x4];                                   // 0x047C(0x0004) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.GameState
	 * Size -> 0x00C8 (FullSize[0x0530] - InheritedSize[0x0468])
	 */
	class AGameState : public AInfo
	{
	public:
		class UClass*                                              GameModeClass;                                           // 0x0468(0x0008) Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor
		class AGameMode*                                           AuthorityGameMode;                                       // 0x0470(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		class UClass*                                              SpectatorClass;                                          // 0x0478(0x0008) Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor
		unsigned char                                              bServerAllowsAnsel : 1;                                  // 0x0480(0x0001) BIT_FIELD Net, Transient, NoDestructor
		unsigned char                                              UnknownData_4P3F[0x3];                                   // 0x0481(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FName                                                MatchState;                                              // 0x0484(0x0008) Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, Protected
		class FName                                                PreviousMatchState;                                      // 0x048C(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, Protected
		unsigned char                                              UnknownData_YACC[0x4];                                   // 0x0494(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FScriptMulticastDelegate                             OnAnyPostProcessVolumeEntered;                           // 0x0498(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable
		class FScriptMulticastDelegate                             OnAnyPostProcessVolumeLeft;                              // 0x04A8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable
		int32_t                                                    ElapsedTime;                                             // 0x04B8(0x0004) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_DUQF[0x4];                                   // 0x04BC(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class APlayerState*>                                PlayerArray;                                             // 0x04C0(0x0010) BlueprintVisible, BlueprintReadOnly, ZeroConstructor
		TArray<class APlayerState*>                                InactivePlayerArray;                                     // 0x04D0(0x0010) ZeroConstructor
		unsigned char                                              UnknownData_G2NF[0x50];                                  // 0x04E0(0x0050) MISSED OFFSET (PADDING)

	public:
		bool Semaphore_TryGrab(const class FName& SemaphoreName, class AActor* InObject, float PriorityWeight, int32_t MaxToAllocate);
		bool Semaphore_Release(const class FName& SemaphoreName, class AActor* InObject);
		void PostProcessOverlapEvent__DelegateSignature(class APostProcessVolume* PostProcessVolume, class APlayerController* Controller, bool bIsPrimaryPlayer);
		void OnRep_SpectatorClass();
		void OnRep_MatchState();
		void OnRep_GameModeClass();
		void BPNetSpawnActorAtLocation(class UClass* anActorClass, const struct FVector& AtLocation, const struct FRotator& AtRotation, class AActor* EffectOwnerToIgnore, float MaxRangeToReplicate, class USceneComponent* attachToComponent, int32_t dataIndex, const class FName& attachSocketName, bool bOnlySendToEffectOwner);
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.GameUserSettings
	 * Size -> 0x0100 (FullSize[0x0128] - InheritedSize[0x0028])
	 */
	class UGameUserSettings : public UObject
	{
	public:
		bool                                                       bUseVSync;                                               // 0x0028(0x0001) ZeroConstructor, Config, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_CLAM[0x37];                                  // 0x0029(0x0037) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FString                                              MacroCtrl0;                                              // 0x0060(0x0010) ZeroConstructor, Config
		class FString                                              MacroCtrl1;                                              // 0x0070(0x0010) ZeroConstructor, Config
		class FString                                              MacroCtrl2;                                              // 0x0080(0x0010) ZeroConstructor, Config
		class FString                                              MacroCtrl3;                                              // 0x0090(0x0010) ZeroConstructor, Config
		class FString                                              MacroCtrl4;                                              // 0x00A0(0x0010) ZeroConstructor, Config
		class FString                                              MacroCtrl5;                                              // 0x00B0(0x0010) ZeroConstructor, Config
		class FString                                              MacroCtrl6;                                              // 0x00C0(0x0010) ZeroConstructor, Config
		class FString                                              MacroCtrl7;                                              // 0x00D0(0x0010) ZeroConstructor, Config
		class FString                                              MacroCtrl8;                                              // 0x00E0(0x0010) ZeroConstructor, Config
		class FString                                              MacroCtrl9;                                              // 0x00F0(0x0010) ZeroConstructor, Config
		uint32_t                                                   ResolutionSizeX;                                         // 0x0100(0x0004) ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected
		uint32_t                                                   ResolutionSizeY;                                         // 0x0104(0x0004) ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected
		uint32_t                                                   LastUserConfirmedResolutionSizeX;                        // 0x0108(0x0004) ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected
		uint32_t                                                   LastUserConfirmedResolutionSizeY;                        // 0x010C(0x0004) ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected
		int32_t                                                    WindowPosX;                                              // 0x0110(0x0004) ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected
		int32_t                                                    WindowPosY;                                              // 0x0114(0x0004) ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected
		bool                                                       bUseDesktopResolutionForFullscreen;                      // 0x0118(0x0001) ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected
		unsigned char                                              UnknownData_708T[0x3];                                   // 0x0119(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int32_t                                                    FullscreenMode;                                          // 0x011C(0x0004) ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected
		int32_t                                                    LastConfirmedFullscreenMode;                             // 0x0120(0x0004) ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected
		uint32_t                                                   Version;                                                 // 0x0124(0x0004) ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected

	public:
		void SaveSettings();
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.ScriptViewportClient
	 * Size -> 0x0008 (FullSize[0x0030] - InheritedSize[0x0028])
	 */
	class UScriptViewportClient : public UObject
	{
	public:
		unsigned char                                              UnknownData_29ON[0x8];                                   // 0x0028(0x0008) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.GameViewportClient
	 * Size -> 0x0110 (FullSize[0x0140] - InheritedSize[0x0030])
	 */
	class UGameViewportClient : public UScriptViewportClient
	{
	public:
		unsigned char                                              UnknownData_KZKA[0x8];                                   // 0x0030(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class UObject*>                                     ViewPortWidgets;                                         // 0x0038(0x0010) ZeroConstructor, Transient
		class UConsole*                                            ViewportConsole;                                         // 0x0048(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor
		TArray<struct FDebugDisplayProperty>                       DebugProperties;                                         // 0x0050(0x0010) ZeroConstructor
		unsigned char                                              UnknownData_CH6Q[0x30];                                  // 0x0060(0x0030) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UWorld*                                              World;                                                   // 0x0090(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, Protected
		class UGameInstance*                                       GameInstance;                                            // 0x0098(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, Protected
		unsigned char                                              UnknownData_1X4F[0xA0];                                  // 0x00A0(0x00A0) MISSED OFFSET (PADDING)

	public:
		void SSSwapControllers();
		void ShowTitleSafeArea();
		void SetConsoleTarget(int32_t PlayerIndex);
		void PostRender(CG::UCanvas* canvas);
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.MaterialInterface
	 * Size -> 0x0038 (FullSize[0x0060] - InheritedSize[0x0028])
	 */
	class UMaterialInterface : public UObject
	{
	public:
		unsigned char                                              UnknownData_SP2W[0x8];                                   // 0x0028(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class USubsurfaceProfile*                                  SubsurfaceProfile;                                       // 0x0030(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_JREF[0x8];                                   // 0x0038(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FLightmassMaterialInterfaceSettings                 LightmassSettings;                                       // 0x0040(0x0018) Edit, BlueprintVisible, Protected
		unsigned char                                              UnknownData_XQ2A[0x8];                                   // 0x0058(0x0008) MISSED OFFSET (PADDING)

	public:
		class UPhysicalMaterial* GetPhysicalMaterial();
		class UMaterial* GetBaseMaterial();
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.ParticleSystemComponent
	 * Size -> 0x01C8 (FullSize[0x0830] - InheritedSize[0x0668])
	 */
	class UParticleSystemComponent : public UPrimitiveComponent
	{
	public:
		class UParticleSystem*                                     Template;                                                // 0x0668(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor
		TArray<class UMaterialInterface*>                          EmitterMaterials;                                        // 0x0670(0x0010) ZeroConstructor, Transient, DuplicateTransient
		TArray<class USkeletalMeshComponent*>                      SkelMeshComponents;                                      // 0x0680(0x0010) ExportObject, ZeroConstructor, Transient, DuplicateTransient, ContainsInstancedReference
		unsigned char                                              UnknownData_A4HJ : 4;                                    // 0x0690(0x0001) BIT_FIELD (PADDING)
		unsigned char                                              bWasDeactivated : 1;                                     // 0x0690(0x0001) BIT_FIELD BlueprintVisible, BlueprintReadOnly, NoDestructor
		unsigned char                                              UnknownData_HSO9 : 1;                                    // 0x0690(0x0001) BIT_FIELD (PADDING)
		unsigned char                                              bResetOnDetach : 1;                                      // 0x0690(0x0001) BIT_FIELD Edit, BlueprintVisible, NoDestructor
		unsigned char                                              bUpdateOnDedicatedServer : 1;                            // 0x0690(0x0001) BIT_FIELD NoDestructor
		unsigned char                                              UnknownData_ZK3T : 2;                                    // 0x0691(0x0001) BIT_FIELD (PADDING)
		unsigned char                                              bPreserveOnDedicatedServer : 1;                          // 0x0691(0x0001) BIT_FIELD Edit, BlueprintVisible, NoDestructor
		unsigned char                                              UnknownData_6U27[0x6];                                   // 0x0692(0x0006) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<struct FParticleSysParam>                           InstanceParameters;                                      // 0x0698(0x0010) Edit, BlueprintVisible, ZeroConstructor
		class FScriptMulticastDelegate                             OnParticleSpawn;                                         // 0x06A8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable
		class FScriptMulticastDelegate                             OnParticleBurst;                                         // 0x06B8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable
		class FScriptMulticastDelegate                             OnParticleDeath;                                         // 0x06C8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable
		class FScriptMulticastDelegate                             OnParticleCollide;                                       // 0x06D8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable
		struct FVector                                             OldPosition;                                             // 0x06E8(0x000C) ZeroConstructor, IsPlainOldData, NoDestructor
		struct FVector                                             PartSysVelocity;                                         // 0x06F4(0x000C) ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      WarmupTime;                                              // 0x0700(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      WarmupTickRate;                                          // 0x0704(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              bWarmingUp : 1;                                          // 0x0708(0x0001) BIT_FIELD NoDestructor
		unsigned char                                              UnknownData_5QLW[0xB];                                   // 0x0709(0x000B) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      SecondsBeforeInactive;                                   // 0x0714(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_WZCA[0x8];                                   // 0x0718(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      MaxTimeBeforeForceUpdateTransform;                       // 0x0720(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_YIG9[0x4];                                   // 0x0724(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		unsigned char                                              bOverrideLODMethod : 1;                                  // 0x0728(0x0001) BIT_FIELD Edit, BlueprintVisible, NoDestructor
		unsigned char                                              UnknownData_PK4B[0x3];                                   // 0x0729(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		EParticleSystemLODMethod                                   LODMethod;                                               // 0x072C(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_LP1B[0x3];                                   // 0x072D(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		unsigned char                                              bSkipUpdateDynamicDataDuringTick : 1;                    // 0x0730(0x0001) BIT_FIELD NoDestructor
		unsigned char                                              UnknownData_7TSR : 1;                                    // 0x0730(0x0001) BIT_FIELD (PADDING)
		unsigned char                                              bForceAllowParticleCollisions : 1;                       // 0x0730(0x0001) BIT_FIELD Edit, BlueprintVisible, NoDestructor
		unsigned char                                              UnknownData_HOHN[0x7];                                   // 0x0731(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<struct FMaterialRelevance>                          CachedViewRelevanceFlags;                                // 0x0738(0x0010) ZeroConstructor, Transient
		unsigned char                                              UnknownData_UYGJ[0x8];                                   // 0x0748(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class UParticleSystemReplay*>                       ReplayClips;                                             // 0x0750(0x0010) ZeroConstructor
		unsigned char                                              UnknownData_SX1Z[0x80];                                  // 0x0760(0x0080) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      CustomTimeDilation;                                      // 0x07E0(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_BPVS[0x4];                                   // 0x07E4(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FScriptDelegate                                      OnSystemFinished;                                        // 0x07E8(0x0010) ZeroConstructor, InstancedReference, NoDestructor
		unsigned char                                              UnknownData_DAF8[0x38];                                  // 0x07F8(0x0038) MISSED OFFSET (PADDING)

	public:
		void SetVectorParameter(const class FName& ParameterName, const struct FVector& Param);
		void SetTrailSourceData(const class FName& InFirstSocketName, const class FName& InSecondSocketName, ETrailWidthMode InWidthMode, float InWidth);
		void SetTemplate(class UParticleSystem* NewTemplate);
		void SetMaterialParameter(const class FName& ParameterName, class UMaterialInterface* Param);
		void SetFloatParameter(const class FName& ParameterName, float Param);
		void SetEmitterEnable(const class FName& EmitterName, bool bNewEnableState);
		void SetColorParameter(const class FName& ParameterName, const struct FLinearColor& Param);
		void SetBeamTargetTangent(int32_t EmitterIndex, const struct FVector& NewTangentPoint, int32_t TargetIndex);
		void SetBeamTargetStrength(int32_t EmitterIndex, float NewTargetStrength, int32_t TargetIndex);
		void SetBeamTargetPoint(int32_t EmitterIndex, const struct FVector& NewTargetPoint, int32_t TargetIndex);
		void SetBeamSourceTangent(int32_t EmitterIndex, const struct FVector& NewTangentPoint, int32_t SourceIndex);
		void SetBeamSourceStrength(int32_t EmitterIndex, float NewSourceStrength, int32_t SourceIndex);
		void SetBeamSourcePoint(int32_t EmitterIndex, const struct FVector& NewSourcePoint, int32_t SourceIndex);
		void SetBeamEndPoint(int32_t EmitterIndex, const struct FVector& NewEndPoint);
		void SetActorParameter(const class FName& ParameterName, class AActor* Param);
		void OnSystemFinished__DelegateSignature(class UParticleSystemComponent* PSystem);
		bool GetVectorParameter(const class FName& InName, struct FVector* OutVector);
		int32_t GetNumActiveParticles();
		class UMaterialInterface* GetNamedMaterial(const class FName& Name);
		bool GetMaterialParameter(const class FName& InName, class UMaterialInterface** OutMaterial);
		bool GetFloatParameter(const class FName& InName, float* OutFloat);
		bool GetColorParameter(const class FName& InName, struct FLinearColor* outColor);
		bool GetActorParameter(const class FName& InName, class AActor** OutActor);
		void GenerateParticleEvent(const class FName& InEventName, float InEmitterTime, const struct FVector& InLocation, const struct FVector& InDirection, const struct FVector& InVelocity);
		void EndTrails();
		class UMaterialInstanceDynamic* CreateNamedDynamicMaterialInstance(const class FName& Name, class UMaterialInterface* SourceMaterial);
		void BeginTrails(const class FName& InFirstSocketName, const class FName& InSecondSocketName, ETrailWidthMode InWidthMode, float InWidth);
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.SaveGame
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class USaveGame : public UObject
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.Player
	 * Size -> 0x0028 (FullSize[0x0050] - InheritedSize[0x0028])
	 */
	class UPlayer : public UObject
	{
	public:
		unsigned char                                              UnknownData_6AG1[0x8];                                   // 0x0028(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class APlayerController*                                   PlayerController;                                        // 0x0030(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		int32_t                                                    CurrentNetSpeed;                                         // 0x0038(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor
		int32_t                                                    ConfiguredInternetSpeed;                                 // 0x003C(0x0004) ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor
		int32_t                                                    ConfiguredLanSpeed;                                      // 0x0040(0x0004) ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_8JAN[0xC];                                   // 0x0044(0x000C) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.LocalPlayer
	 * Size -> 0x01D8 (FullSize[0x0228] - InheritedSize[0x0050])
	 */
	class ULocalPlayer : public UPlayer
	{
	public:
		int32_t                                                    ControllerId;                                            // 0x0050(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_F3OE[0x14];                                  // 0x0054(0x0014) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UGameViewportClient*                                 ViewportClient;                                          // 0x0068(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor
		struct FVector2D                                           Origin;                                                  // 0x0070(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor
		struct FVector2D                                           Size;                                                    // 0x0078(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor
		struct FVector                                             LastViewLocation;                                        // 0x0080(0x000C) ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		EAspectRatioAxisConstraint                                 AspectRatioAxisConstraint;                               // 0x008C(0x0001) ZeroConstructor, Config, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_FCFZ[0x3];                                   // 0x008D(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UClass*                                              PendingLevelPlayerControllerClass;                       // 0x0090(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              bSentSplitJoin : 1;                                      // 0x0098(0x0001) BIT_FIELD Edit, Transient, EditConst, NoDestructor
		unsigned char                                              UnknownData_CWRU[0x3];                                   // 0x0099(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       bValidCachedViewFrustum;                                 // 0x009C(0x0001) ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_BDBS[0x173];                                 // 0x009D(0x0173) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UOnlineSession*                                      OnlineSession;                                           // 0x0210(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_17VQ[0x10];                                  // 0x0218(0x0010) Fix size for supers

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.OnlineSession
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class UOnlineSession : public UObject
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.DefaultPawn
	 * Size -> 0x0028 (FullSize[0x0520] - InheritedSize[0x04F8])
	 */
	class ADefaultPawn : public APawn
	{
	public:
		float                                                      BaseTurnRate;                                            // 0x04F8(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor
		float                                                      BaseLookUpRate;                                          // 0x04FC(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor
		class UFloatingPawnMovement*                               MovementComponent;                                       // 0x0500(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, SubobjectReference, IsPlainOldData, NoDestructor
		class USphereComponent*                                    CollisionComponent;                                      // 0x0508(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, SubobjectReference, IsPlainOldData, NoDestructor
		class UStaticMeshComponent*                                MeshComponent;                                           // 0x0510(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, SubobjectReference, IsPlainOldData, NoDestructor
		unsigned char                                              bAddDefaultMovementBindings : 1;                         // 0x0518(0x0001) BIT_FIELD Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor
		unsigned char                                              UnknownData_U0W1[0x7];                                   // 0x0519(0x0007) MISSED OFFSET (PADDING)

	public:
		void TurnAtRate(float Rate);
		void Turn(float val);
		void MoveUp_World(float val);
		void MoveRight(float val);
		void MoveForward(float val);
		void LookUpAtRate(float Rate);
		void LookUp(float val);
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.SpectatorPawn
	 * Size -> 0x0000 (FullSize[0x0520] - InheritedSize[0x0520])
	 */
	class ASpectatorPawn : public ADefaultPawn
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.SoundNode
	 * Size -> 0x0010 (FullSize[0x0038] - InheritedSize[0x0028])
	 */
	class USoundNode : public UObject
	{
	public:
		TArray<class USoundNode*>                                  ChildNodes;                                              // 0x0028(0x0010) ZeroConstructor

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.PhysicsVolume
	 * Size -> 0x0020 (FullSize[0x04C0] - InheritedSize[0x04A0])
	 */
	class APhysicsVolume : public AVolume
	{
	public:
		float                                                      TerminalVelocity;                                        // 0x04A0(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		int32_t                                                    Priority;                                                // 0x04A4(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      FluidFriction;                                           // 0x04A8(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              bWaterVolume : 1;                                        // 0x04AC(0x0001) BIT_FIELD Edit, BlueprintVisible, NoDestructor
		unsigned char                                              bDynamicWaterVolume : 1;                                 // 0x04AC(0x0001) BIT_FIELD Edit, BlueprintVisible, NoDestructor
		unsigned char                                              bPhysicsOnContact : 1;                                   // 0x04AC(0x0001) BIT_FIELD Edit, BlueprintVisible, NoDestructor
		unsigned char                                              bPreventWaterSubmersion : 1;                             // 0x04AC(0x0001) BIT_FIELD Edit, BlueprintVisible, NoDestructor
		unsigned char                                              UnknownData_CIZ2[0x3];                                   // 0x04AD(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      WaterDensity;                                            // 0x04B0(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      WaterDamping;                                            // 0x04B4(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      PhysicsMinWalkableFloorZ;                                // 0x04B8(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_BD84[0x4];                                   // 0x04BC(0x0004) MISSED OFFSET (PADDING)

	public:
		float GetVolumeZAtPosition2D(const struct FVector2D& Position);
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.AISystemBase
	 * Size -> 0x0018 (FullSize[0x0040] - InheritedSize[0x0028])
	 */
	class UAISystemBase : public UObject
	{
	public:
		struct FStringClassReference                               AISystemClassName;                                       // 0x0028(0x0010) ZeroConstructor, Config, GlobalConfig, NoClear
		class FName                                                AISystemModuleName;                                      // 0x0038(0x0008) ZeroConstructor, Config, GlobalConfig, NoClear, IsPlainOldData, NoDestructor

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.BlueprintGeneratedClass
	 * Size -> 0x0050 (FullSize[0x01D8] - InheritedSize[0x0188])
	 */
	class UBlueprintGeneratedClass : public UClass
	{
	public:
		int32_t                                                    NumReplicatedProperties;                                 // 0x0188(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable
		unsigned char                                              UnknownData_TVJE[0x4];                                   // 0x018C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class FName>                                        ReplicatedPropertiesInitialOnly;                         // 0x0190(0x0010) ZeroConstructor
		TArray<class UDynamicBlueprintBinding*>                    DynamicBindingObjects;                                   // 0x01A0(0x0010) ZeroConstructor
		TArray<class UActorComponent*>                             ComponentTemplates;                                      // 0x01B0(0x0010) ExportObject, ZeroConstructor, ContainsInstancedReference
		TArray<class UTimelineTemplate*>                           Timelines;                                               // 0x01C0(0x0010) ZeroConstructor
		class USimpleConstructionScript*                           SimpleConstructionScript;                                // 0x01D0(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.NetConnection
	 * Size -> 0x342E8 (FullSize[0x34338] - InheritedSize[0x0050])
	 */
	class UNetConnection : public UPlayer
	{
	public:
		TArray<class UChildConnection*>                            Children;                                                // 0x0050(0x0010) ZeroConstructor, Transient
		class UNetDriver*                                          Driver;                                                  // 0x0060(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor
		class UPackageMap*                                         PackageMap;                                              // 0x0068(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_M34E[0x10];                                  // 0x0070(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class UChannel*>                                    OpenChannels;                                            // 0x0080(0x0010) ZeroConstructor
		TArray<class AActor*>                                      SentTemporaries;                                         // 0x0090(0x0010) ZeroConstructor
		struct FVector                                             LastDormancyLocCheck;                                    // 0x00A0(0x000C) ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      PlayerControllerTimer;                                   // 0x00AC(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_59O7[0x8];                                   // 0x00B0(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		double                                                     SpatialFrame;                                            // 0x00B8(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor
		double                                                     NextSpatialFrameCheckTime;                               // 0x00C0(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor
		class AActor*                                              Viewer;                                                  // 0x00C8(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor
		class AActor*                                              OwningActor;                                             // 0x00D0(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor
		int32_t                                                    MaxPacket;                                               // 0x00D8(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              InternalAck : 1;                                         // 0x00DC(0x0001) BIT_FIELD NoDestructor
		unsigned char                                              bWelcomed : 1;                                           // 0x00DC(0x0001) BIT_FIELD NoDestructor
		unsigned char                                              bFirstActorSent : 1;                                     // 0x00DC(0x0001) BIT_FIELD NoDestructor
		unsigned char                                              bHasArkLoginLock : 1;                                    // 0x00DC(0x0001) BIT_FIELD Transient, NoDestructor
		unsigned char                                              bDisableFlushNetUntilActuallyReady : 1;                  // 0x00DC(0x0001) BIT_FIELD NoDestructor
		unsigned char                                              bSendingHandoverToken : 1;                               // 0x00DC(0x0001) BIT_FIELD NoDestructor
		unsigned char                                              bInlineAuthTokenValid : 1;                               // 0x00DC(0x0001) BIT_FIELD NoDestructor
		unsigned char                                              UnknownData_POSX[0xEB];                                  // 0x00DD(0x00EB) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		double                                                     LastReceiveTime;                                         // 0x01C8(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_CO8T[0x34038];                               // 0x01D0(0x34038) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FString                                              ClientGivenIP;                                           // 0x34208(0x0010) ZeroConstructor
		unsigned char                                              UnknownData_0X8R[0x120];                                 // 0x34218(0x0120) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.NetDriver
	 * Size -> 0x0378 (FullSize[0x03A0] - InheritedSize[0x0028])
	 */
	class UNetDriver : public UObject
	{
	public:
		unsigned char                                              UnknownData_78OW[0x8];                                   // 0x0028(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FString                                              NetConnectionClassName;                                  // 0x0030(0x0010) ZeroConstructor, Config
		int32_t                                                    MaxDownloadSize;                                         // 0x0040(0x0004) ZeroConstructor, Config, IsPlainOldData, NoDestructor
		unsigned char                                              bClampListenServerTickRate : 1;                          // 0x0044(0x0001) BIT_FIELD Config, NoDestructor
		unsigned char                                              UnknownData_SCUJ[0x3];                                   // 0x0045(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int32_t                                                    NetServerMaxTickRate;                                    // 0x0048(0x0004) ZeroConstructor, Config, IsPlainOldData, NoDestructor
		int32_t                                                    MaxInternetClientRate;                                   // 0x004C(0x0004) ZeroConstructor, Config, IsPlainOldData, NoDestructor
		int32_t                                                    MaxClientRate;                                           // 0x0050(0x0004) ZeroConstructor, Config, IsPlainOldData, NoDestructor
		float                                                      ServerTravelPause;                                       // 0x0054(0x0004) ZeroConstructor, Config, IsPlainOldData, NoDestructor
		float                                                      SpawnPrioritySeconds;                                    // 0x0058(0x0004) ZeroConstructor, Config, IsPlainOldData, NoDestructor
		float                                                      RelevantTimeout;                                         // 0x005C(0x0004) ZeroConstructor, Config, IsPlainOldData, NoDestructor
		float                                                      KeepAliveTime;                                           // 0x0060(0x0004) ZeroConstructor, Config, IsPlainOldData, NoDestructor
		float                                                      InitialConnectTimeout;                                   // 0x0064(0x0004) ZeroConstructor, Config, IsPlainOldData, NoDestructor
		float                                                      ConnectionTimeout;                                       // 0x0068(0x0004) ZeroConstructor, Config, IsPlainOldData, NoDestructor
		float                                                      InitialConnectTimeoutToServer;                           // 0x006C(0x0004) ZeroConstructor, Config, IsPlainOldData, NoDestructor
		float                                                      ConnectionTimeoutToServer;                               // 0x0070(0x0004) ZeroConstructor, Config, IsPlainOldData, NoDestructor
		bool                                                       RequireEngineVersionMatch;                               // 0x0074(0x0001) ZeroConstructor, Config, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_4PUW[0x3];                                   // 0x0075(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UNetConnection*                                      ServerConnection;                                        // 0x0078(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor
		TArray<class UNetConnection*>                              ClientConnections;                                       // 0x0080(0x0010) ZeroConstructor
		class UWorld*                                              World;                                                   // 0x0090(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_U4CU[0x68];                                  // 0x0098(0x0068) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UClass*                                              NetConnectionClass;                                      // 0x0100(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor
		class UProperty*                                           RoleProperty;                                            // 0x0108(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor
		class UProperty*                                           RemoteRoleProperty;                                      // 0x0110(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor
		class FName                                                NetDriverName;                                           // 0x0118(0x0008) ZeroConstructor, Config, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_36C2[0x8];                                   // 0x0120(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		double                                                     Time;                                                    // 0x0128(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_ZVRN[0x270];                                 // 0x0130(0x0270) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.Model
	 * Size -> 0x0578 (FullSize[0x05A0] - InheritedSize[0x0028])
	 */
	class UModel : public UObject
	{
	public:
		unsigned char                                              UnknownData_XYSP[0x578];                                 // 0x0028(0x0578) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.Interface_AssetUserData
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class UInterface_AssetUserData : public UInterface
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.AmbientSound
	 * Size -> 0x0020 (FullSize[0x0488] - InheritedSize[0x0468])
	 */
	class AAmbientSound : public AActor
	{
	public:
		unsigned char                                              bAutoPlay : 1;                                           // 0x0468(0x0001) BIT_FIELD Deprecated, NoDestructor
		unsigned char                                              UnknownData_G01B[0x7];                                   // 0x0469(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UAudioComponent*                                     AudioComponent;                                          // 0x0470(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, SubobjectReference, IsPlainOldData, NoDestructor
		class USoundNodeAmbient*                                   SoundNodeInstance;                                       // 0x0478(0x0008) ExportObject, ZeroConstructor, InstancedReference, Deprecated, IsPlainOldData, NoDestructor
		bool                                                       bOverrideAutoplay;                                       // 0x0480(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_9BCG[0x7];                                   // 0x0481(0x0007) MISSED OFFSET (PADDING)

	public:
		void Stop();
		void Play(float StartTime);
		void FadeOut(float FadeOutDuration, float FadeVolumeLevel);
		void FadeIn(float FadeInDuration, float FadeVolumeLevel);
		void AdjustVolume(float AdjustVolumeDuration, float AdjustVolumeLevel);
		static UClass* StaticClass();
	};


	template<typename T>
	struct TTransArray : public TArray<T>
	{
		UObject* Owner;
	};

	/**
	 * Class Engine.LevelBase
	 * Size -> 0x0088 (FullSize[0x00B0] - InheritedSize[0x0028])
	 */
	class ULevelBase 
	{
	public:

		PAD(0x88);
		TTransArray<AActor*> Actors;				// 0x0088
	public:
		static UClass* StaticClass();

	};

	/**
	 * Class Engine.PendingNetGame
	 * Size -> 0x0108 (FullSize[0x0130] - InheritedSize[0x0028])
	 */
	class UPendingNetGame : public UObject
	{
	public:
		unsigned char                                              UnknownData_4ZUD[0x8];                                   // 0x0028(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UNetDriver*                                          NetDriver;                                               // 0x0030(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_4LL4[0xF8];                                  // 0x0038(0x00F8) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.World
	 * Size -> 0x0BF8 (FullSize[0x0C20] - InheritedSize[0x0028])
	 */
	class UWorld : public UObject
	{
	public:
		static class UWorld**                                      GWorld;                                                  // 0x0000(0x0008) PREDEFINED PROPERTY
		unsigned char                                              UnknownData_811M[0xD0];                                  // 0x0028(0x00D0) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class ULevel*                                              PersistentLevel;                                         // 0x00F8(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		class USaveGameSummary*                                    SaveGameSummary;                                         // 0x0100(0x0008) ZeroConstructor, Transient, Deprecated, IsPlainOldData, NoDestructor
		class UNetDriver*                                          NetDriver;                                               // 0x0108(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		class ULineBatchComponent*                                 LineBatcher;                                             // 0x0110(0x0008) ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor
		class ULineBatchComponent*                                 PersistentLineBatcher;                                   // 0x0118(0x0008) ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor
		class ULineBatchComponent*                                 ForegroundLineBatcher;                                   // 0x0120(0x0008) ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor
		class AGameState*                                          GameState;                                               // 0x0128(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		class AGameNetworkManager*                                 NetworkManager;                                          // 0x0130(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		class UPhysicsCollisionHandler*                            PhysicsCollisionHandler;                                 // 0x0138(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		TArray<class UObject*>                                     ExtraReferencedObjects;                                  // 0x0140(0x0010) ZeroConstructor, Transient
		TArray<class ULevelStreaming*>                             StreamingLevels;                                         // 0x0150(0x0010) ZeroConstructor, Transient
		class FString                                              StreamingLevelsPrefix;                                   // 0x0160(0x0010) ZeroConstructor
		class ULevel*                                              CurrentLevelPendingVisibility;                           // 0x0170(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		class AParticleEventManager*                               MyParticleEventManager;                                  // 0x0178(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor
		class APhysicsVolume*                                      DefaultPhysicsVolume;                                    // 0x0180(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_RB78[0xB8];                                  // 0x0188(0x00B8) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		unsigned char                                              bWorldWasLoadedThisTick : 1;                             // 0x0240(0x0001) BIT_FIELD Transient, NoDestructor
		unsigned char                                              bTriggerPostLoadMap : 1;                                 // 0x0240(0x0001) BIT_FIELD Transient, NoDestructor
		unsigned char                                              bWorldWasPlayerView : 1;                                 // 0x0240(0x0001) BIT_FIELD Transient, NoDestructor
		unsigned char                                              bUseSimpleWorld : 1;                                     // 0x0240(0x0001) BIT_FIELD Transient, NoDestructor
		unsigned char                                              UnknownData_TCUT : 1;                                    // 0x0240(0x0001) BIT_FIELD (PADDING)
		unsigned char                                              bForceLevelStreamingUpdateForOneTick : 1;                // 0x0240(0x0001) BIT_FIELD Transient, NoDestructor
		unsigned char                                              UnknownData_C6BQ[0x7];                                   // 0x0241(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class AGameMode*                                           AuthorityGameMode;                                       // 0x0248(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		class UNavigationSystem*                                   NavigationSystem;                                        // 0x0250(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		class UAISystemBase*                                       AISystem;                                                // 0x0258(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		class UAvoidanceManager*                                   AvoidanceManager;                                        // 0x0260(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		TArray<class ULevel*>                                      Levels;                                                  // 0x0268(0x0010) ZeroConstructor, Transient
		unsigned char                                              UnknownData_WZGI[0x10];                                  // 0x0278(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class ULevel*                                              CurrentLevel;                                            // 0x0288(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		class UGameInstance*                                       OwningGameInstance;                                      // 0x0290(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		TArray<class UMaterialParameterCollectionInstance*>        ParameterCollectionInstances;                            // 0x0298(0x0010) ZeroConstructor, Transient
		class UCanvas*                                             CanvasForRenderingToTarget;                              // 0x02A8(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		class UCanvas*                                             CanvasForDrawMaterialToRenderTarget;                     // 0x02B0(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		int32_t                                                    FrameCounter;                                            // 0x02B8(0x0004) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_GGJA[0x8A4];                                 // 0x02BC(0x08A4) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UWorldComposition*                                   WorldComposition;                                        // 0x0B60(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_V9ZZ[0xB4];                                  // 0x0B68(0x00B4) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		unsigned char                                              UnknownData_URWQ : 5;                                    // 0x0C1C(0x0001) BIT_FIELD (PADDING)
		unsigned char                                              bAreConstraintsDirty : 1;                                // 0x0C1C(0x0001) BIT_FIELD Transient, NoDestructor
		unsigned char                                              UnknownData_HSYI[0x3];                                   // 0x0C1D(0x0003) MISSED OFFSET (PADDING)

	public:
		bool IsActuallyUsingTrueSkyActor();
		class AWorldSettings* GetWorldSettings(bool bCheckStreamingPesistent, bool bChecked);
		class APlayerController* GetFirstPlayerController();
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.Level
	 * Size -> 0x02A0 (FullSize[0x0350] - InheritedSize[0x00B0])
	 */
	class ULevel : public ULevelBase
	{
	public:
		unsigned char                                              UnknownData_81SM[0x8];                                   // 0x00B0(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UWorld*                                              OwningWorld;                                             // 0x00B8(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		class UModel*                                              Model;                                                   // 0x00C0(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor
		TArray<class UModelComponent*>                             ModelComponents;                                         // 0x00C8(0x0010) ExportObject, ZeroConstructor, ContainsInstancedReference
		class ALevelScriptActor*                                   LevelScriptActor;                                        // 0x00D8(0x0008) ZeroConstructor, IsPlainOldData, NonTransactional, NoDestructor
		class ANavigationObjectBase*                               NavListStart;                                            // 0x00E0(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor
		class ANavigationObjectBase*                               NavListEnd;                                              // 0x00E8(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      LightmapTotalSize;                                       // 0x00F0(0x0004) Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor
		float                                                      ShadowmapTotalSize;                                      // 0x00F4(0x0004) Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor
		TArray<struct FVector>                                     StaticNavigableGeometry;                                 // 0x00F8(0x0010) ZeroConstructor
		unsigned char                                              UnknownData_Q9W1[0x1D8];                                 // 0x0108(0x01D8) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		unsigned char                                              UnknownData_KHLV : 2;                                    // 0x02E0(0x0001) BIT_FIELD (PADDING)
		unsigned char                                              bIsVisible : 1;                                          // 0x02E0(0x0001) BIT_FIELD Transient, NoDestructor
		unsigned char                                              bLocked : 1;                                             // 0x02E0(0x0001) BIT_FIELD NoDestructor
		unsigned char                                              UnknownData_EM06[0x2F];                                  // 0x02E1(0x002F) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class UObject*>                                     MovieSceneBindingsArray;                                 // 0x0310(0x0010) ZeroConstructor, Protected
		TArray<class UObject*>                                     ActiveRuntimeMovieScenePlayers;                          // 0x0320(0x0010) ZeroConstructor, Transient, Protected
		TArray<class UAssetUserData*>                              AssetUserData;                                           // 0x0330(0x0010) ZeroConstructor, Protected
		unsigned char                                              UnknownData_RY2S[0x10];                                  // 0x0340(0x0010) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.BrushShape
	 * Size -> 0x0000 (FullSize[0x04A0] - InheritedSize[0x04A0])
	 */
	class ABrushShape : public ABrush
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.BlockingVolume
	 * Size -> 0x0008 (FullSize[0x04A8] - InheritedSize[0x04A0])
	 */
	class ABlockingVolume : public AVolume
	{
	public:
		bool                                                       bAddToBlockingVolumeList;                                // 0x04A0(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_789Z[0x7];                                   // 0x04A1(0x0007) MISSED OFFSET (PADDING)

	public:
		void OnInterpToggle(bool bEnable);
		void DoToggle(bool bEnable);
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.CameraBlockingVolume
	 * Size -> 0x0000 (FullSize[0x04A0] - InheritedSize[0x04A0])
	 */
	class ACameraBlockingVolume : public AVolume
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.CullDistanceVolume
	 * Size -> 0x0018 (FullSize[0x04B8] - InheritedSize[0x04A0])
	 */
	class ACullDistanceVolume : public AVolume
	{
	public:
		TArray<struct FCullDistanceSizePair>                       CullDistances;                                           // 0x04A0(0x0010) Edit, BlueprintVisible, ZeroConstructor
		unsigned char                                              bEnabled : 1;                                            // 0x04B0(0x0001) BIT_FIELD Edit, BlueprintVisible, NoDestructor
		unsigned char                                              UnknownData_A2F8[0x7];                                   // 0x04B1(0x0007) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.FoliageInclusionVolume
	 * Size -> 0x0000 (FullSize[0x04A0] - InheritedSize[0x04A0])
	 */
	class AFoliageInclusionVolume : public AVolume
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.LevelStreamingVolume
	 * Size -> 0x0018 (FullSize[0x04B8] - InheritedSize[0x04A0])
	 */
	class ALevelStreamingVolume : public AVolume
	{
	public:
		TArray<class FName>                                        StreamingLevelNames;                                     // 0x04A0(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst
		unsigned char                                              bEditorPreVisOnly : 1;                                   // 0x04B0(0x0001) BIT_FIELD Edit, BlueprintVisible, NoDestructor
		unsigned char                                              bDisabled : 1;                                           // 0x04B0(0x0001) BIT_FIELD Edit, BlueprintVisible, NoDestructor
		unsigned char                                              UnknownData_S8IF[0x3];                                   // 0x04B1(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		EStreamingVolumeUsage                                      StreamingUsage;                                          // 0x04B4(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_EY6Z[0x3];                                   // 0x04B5(0x0003) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.LightmassCharacterIndirectDetailVolume
	 * Size -> 0x0000 (FullSize[0x04A0] - InheritedSize[0x04A0])
	 */
	class ALightmassCharacterIndirectDetailVolume : public AVolume
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.LightmassImportanceVolume
	 * Size -> 0x0000 (FullSize[0x04A0] - InheritedSize[0x04A0])
	 */
	class ALightmassImportanceVolume : public AVolume
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.MergeMeshVolume
	 * Size -> 0x0010 (FullSize[0x04B0] - InheritedSize[0x04A0])
	 */
	class AMergeMeshVolume : public AVolume
	{
	public:
		float                                                      GridCountX;                                              // 0x04A0(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      GridCountY;                                              // 0x04A4(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      GridCountZ;                                              // 0x04A8(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_6SLN[0x4];                                   // 0x04AC(0x0004) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.NavMeshBoundsVolume
	 * Size -> 0x0008 (FullSize[0x04A8] - InheritedSize[0x04A0])
	 */
	class ANavMeshBoundsVolume : public AVolume
	{
	public:
		unsigned char                                              bAutoUpdateBounds : 1;                                   // 0x04A0(0x0001) BIT_FIELD Edit, NoDestructor
		unsigned char                                              UnknownData_I7PO[0x7];                                   // 0x04A1(0x0007) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.NavRelevantInterface
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class UNavRelevantInterface : public UInterface
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.NavModifierVolume
	 * Size -> 0x0010 (FullSize[0x04B0] - InheritedSize[0x04A0])
	 */
	class ANavModifierVolume : public AVolume
	{
	public:
		unsigned char                                              UnknownData_DG8W[0x8];                                   // 0x04A0(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UClass*                                              AreaClass;                                               // 0x04A8(0x0008) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.DefaultPhysicsVolume
	 * Size -> 0x0000 (FullSize[0x04C0] - InheritedSize[0x04C0])
	 */
	class ADefaultPhysicsVolume : public APhysicsVolume
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.KillZVolume
	 * Size -> 0x0000 (FullSize[0x04C0] - InheritedSize[0x04C0])
	 */
	class AKillZVolume : public APhysicsVolume
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.PainCausingVolume
	 * Size -> 0x0048 (FullSize[0x0508] - InheritedSize[0x04C0])
	 */
	class APainCausingVolume : public APhysicsVolume
	{
	public:
		unsigned char                                              bPainCausing : 1;                                        // 0x04C0(0x0001) BIT_FIELD Edit, BlueprintVisible, NoDestructor
		unsigned char                                              UnknownData_RGFV[0x3];                                   // 0x04C1(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      DamagePerSec;                                            // 0x04C4(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		class UClass*                                              DamageType;                                              // 0x04C8(0x0008) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      PainInterval;                                            // 0x04D0(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              bEntryPain : 1;                                          // 0x04D4(0x0001) BIT_FIELD Edit, BlueprintVisible, NoDestructor
		unsigned char                                              bPainWalkingOnly : 1;                                    // 0x04D4(0x0001) BIT_FIELD Edit, BlueprintVisible, NoDestructor
		unsigned char                                              bTriggerUndermeshDetection : 1;                          // 0x04D4(0x0001) BIT_FIELD Edit, NoDestructor
		unsigned char                                              bContainsMultipleOverlapComponents : 1;                  // 0x04D4(0x0001) BIT_FIELD NoDestructor
		unsigned char                                              bIgnoreWildDinos : 1;                                    // 0x04D4(0x0001) BIT_FIELD Edit, BlueprintVisible, NoDestructor
		unsigned char                                              UnknownData_POWR[0x3];                                   // 0x04D5(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class UClass*>                                      ActorClassesToExclude;                                   // 0x04D8(0x0010) Edit, BlueprintVisible, ZeroConstructor
		TArray<class UClass*>                                      ActorClassesToInclude;                                   // 0x04E8(0x0010) Edit, BlueprintVisible, ZeroConstructor
		unsigned char                                              BACKUP_bPainCausing : 1;                                 // 0x04F8(0x0001) BIT_FIELD NoDestructor
		unsigned char                                              UnknownData_WBD6[0x7];                                   // 0x04F9(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class AController*                                         DamageInstigator;                                        // 0x0500(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.Interface_PostProcessVolume
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class UInterface_PostProcessVolume : public UInterface
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.PostProcessVolume
	 * Size -> 0x03C0 (FullSize[0x0860] - InheritedSize[0x04A0])
	 */
	class APostProcessVolume : public AVolume
	{
	public:
		unsigned char                                              UnknownData_SOK1[0x8];                                   // 0x04A0(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FPostProcessSettings                                Settings;                                                // 0x04A8(0x0358) Edit, BlueprintVisible, Interp
		float                                                      Priority;                                                // 0x0800(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      BlendRadius;                                             // 0x0804(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor
		float                                                      BlendWeight;                                             // 0x0808(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor
		float                                                      MaterialWaterLineParameterValue;                         // 0x080C(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              bEnabled : 1;                                            // 0x0810(0x0001) BIT_FIELD Edit, BlueprintVisible, NoDestructor
		unsigned char                                              bUnbound : 1;                                            // 0x0810(0x0001) BIT_FIELD Edit, BlueprintVisible, NoDestructor
		unsigned char                                              bWaterPP : 1;                                            // 0x0810(0x0001) BIT_FIELD Edit, BlueprintVisible, NoDestructor
		unsigned char                                              UnknownData_5HU6[0x3];                                   // 0x0811(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		EPostProcessVolumeType                                     VolumeType;                                              // 0x0814(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_4MD3[0x3];                                   // 0x0815(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		unsigned char                                              bAbsolutePriority : 1;                                   // 0x0818(0x0001) BIT_FIELD Edit, BlueprintVisible, NoDestructor
		unsigned char                                              UnknownData_UBQE[0x3];                                   // 0x0819(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      ViewDistanceMultiplier;                                  // 0x081C(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		class FScriptMulticastDelegate                             OnPostProcessVolumeEntered;                              // 0x0820(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable
		class FScriptMulticastDelegate                             OnPostProcessVolumeLeft;                                 // 0x0830(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable
		TArray<class AExponentialHeightFog*>                       DisabledHeightFogs;                                      // 0x0840(0x0010) Edit, ZeroConstructor
		TArray<class AExponentialHeightFog*>                       PrimaryLerpingHeightFogs;                                // 0x0850(0x0010) Edit, ZeroConstructor

	public:
		void PostprocessVolumeLeftSignature__DelegateSignature(class APlayerController* Controller, bool bIsPrimaryPlayer);
		void PostprocessVolumeEnteredSignature__DelegateSignature(class APlayerController* Controller, bool bIsPrimaryPlayer);
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.SpherePostProcessVolume
	 * Size -> 0x0010 (FullSize[0x0870] - InheritedSize[0x0860])
	 */
	class ASpherePostProcessVolume : public APostProcessVolume
	{
	public:
		float                                                      SphereVolumeRadius;                                      // 0x0860(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_RO9M[0x4];                                   // 0x0864(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class USphereComponent*                                    SphereComponent;                                         // 0x0868(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, SubobjectReference, IsPlainOldData, NoDestructor

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.PrecomputedVisibilityOverrideVolume
	 * Size -> 0x0030 (FullSize[0x04D0] - InheritedSize[0x04A0])
	 */
	class APrecomputedVisibilityOverrideVolume : public AVolume
	{
	public:
		TArray<class AActor*>                                      OverrideVisibleActors;                                   // 0x04A0(0x0010) Edit, BlueprintVisible, ZeroConstructor
		TArray<class AActor*>                                      OverrideInvisibleActors;                                 // 0x04B0(0x0010) Edit, BlueprintVisible, ZeroConstructor
		TArray<class FName>                                        OverrideInvisibleLevels;                                 // 0x04C0(0x0010) Edit, BlueprintVisible, ZeroConstructor

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.PrecomputedVisibilityVolume
	 * Size -> 0x0000 (FullSize[0x04A0] - InheritedSize[0x04A0])
	 */
	class APrecomputedVisibilityVolume : public AVolume
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.TileStreamingVolume
	 * Size -> 0x0078 (FullSize[0x0518] - InheritedSize[0x04A0])
	 */
	class ATileStreamingVolume : public AVolume
	{
	public:
		TArray<class FName>                                        StreamingLevelNames;                                     // 0x04A0(0x0010) Edit, BlueprintVisible, ZeroConstructor
		TArray<class FName>                                        ExcludeLevelNames;                                       // 0x04B0(0x0010) Edit, BlueprintVisible, ZeroConstructor
		unsigned char                                              UnknownData_NVZO[0x50];                                  // 0x04C0(0x0050) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		unsigned char                                              bDisabled : 1;                                           // 0x0510(0x0001) BIT_FIELD Edit, BlueprintVisible, NoDestructor
		unsigned char                                              bAllowOnlySpecifiedLevels : 1;                           // 0x0510(0x0001) BIT_FIELD Edit, BlueprintVisible, NoDestructor
		unsigned char                                              bForceDoNotTriggerBlockLoading : 1;                      // 0x0510(0x0001) BIT_FIELD Edit, BlueprintVisible, NoDestructor
		unsigned char                                              bHideOtherLevels : 1;                                    // 0x0510(0x0001) BIT_FIELD Edit, BlueprintVisible, NoDestructor
		unsigned char                                              bBlockOnLoading : 1;                                     // 0x0510(0x0001) BIT_FIELD Edit, BlueprintVisible, NoDestructor
		unsigned char                                              bEnableUpdatesWorldComp : 1;                             // 0x0510(0x0001) BIT_FIELD Edit, BlueprintVisible, NoDestructor
		unsigned char                                              bDestroyContainedPawnsOnStartup : 1;                     // 0x0510(0x0001) BIT_FIELD Edit, BlueprintVisible, NoDestructor
		unsigned char                                              bForceLevelsAsDistanceStreamingEnabled : 1;              // 0x0510(0x0001) BIT_FIELD Edit, BlueprintVisible, NoDestructor
		unsigned char                                              UnknownData_ANSI[0x7];                                   // 0x0511(0x0007) MISSED OFFSET (PADDING)

	public:
		void OnInterpToggle(bool bEnable);
		void DoToggle(bool bEnable);
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.TriggerVolume
	 * Size -> 0x0000 (FullSize[0x04A0] - InheritedSize[0x04A0])
	 */
	class ATriggerVolume : public AVolume
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.CameraActor
	 * Size -> 0x0380 (FullSize[0x07E8] - InheritedSize[0x0468])
	 */
	class ACameraActor : public AActor
	{
	public:
		EAutoReceiveInput                                          AutoActivateForPlayer;                                   // 0x0468(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_8LVG[0x7];                                   // 0x0469(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UCameraComponent*                                    CameraComponent;                                         // 0x0470(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, SubobjectReference, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_YDII[0x8];                                   // 0x0478(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		unsigned char                                              bConstrainAspectRatio : 1;                               // 0x0480(0x0001) BIT_FIELD Deprecated, NoDestructor
		unsigned char                                              UnknownData_IN1E[0x3];                                   // 0x0481(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      AspectRatio;                                             // 0x0484(0x0004) ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor
		float                                                      FOVAngle;                                                // 0x0488(0x0004) ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor
		float                                                      PostProcessBlendWeight;                                  // 0x048C(0x0004) ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor
		struct FPostProcessSettings                                PostProcessSettings;                                     // 0x0490(0x0358) Deprecated

	public:
		int32_t GetAutoActivatePlayerIndex();
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.NavAgentInterface
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class UNavAgentInterface : public UInterface
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.InputComponent
	 * Size -> 0x0078 (FullSize[0x0150] - InheritedSize[0x00D8])
	 */
	class UInputComponent : public UActorComponent
	{
	public:
		unsigned char                                              UnknownData_MHHC[0x78];                                  // 0x00D8(0x0078) MISSED OFFSET (PADDING)

	public:
		bool WasControllerKeyJustReleased(const struct FKey& Key);
		bool WasControllerKeyJustPressed(const struct FKey& Key);
		bool IsControllerKeyDown(const struct FKey& Key);
		void InputVectorAxisHandlerDynamicSignature__DelegateSignature(const struct FVector& AxisValue);
		void InputTouchHandlerDynamicSignature__DelegateSignature(ETouchIndex FingerIndex, const struct FVector& Location);
		void InputGestureHandlerDynamicSignature__DelegateSignature(float Value);
		void InputAxisHandlerDynamicSignature__DelegateSignature(float AxisValue);
		void InputActionHandlerDynamicSignature__DelegateSignature();
		void GetTouchState(int32_t FingerIndex, float* LocationX, float* LocationY, bool* bIsCurrentlyPressed);
		struct FVector GetControllerVectorKeyState(const struct FKey& Key);
		void GetControllerMouseDelta(float* DeltaX, float* DeltaY);
		float GetControllerKeyTimeDown(const struct FKey& Key);
		void GetControllerAnalogStickState(EControllerAnalogStick WhichStick, float* StickX, float* StickY);
		float GetControllerAnalogKeyState(const struct FKey& Key);
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.DebugCameraController
	 * Size -> 0x0048 (FullSize[0x08A0] - InheritedSize[0x0858])
	 */
	class ADebugCameraController : public APlayerController
	{
	public:
		unsigned char                                              bShowSelectedInfo : 1;                                   // 0x0858(0x0001) BIT_FIELD Config, GlobalConfig, NoDestructor
		unsigned char                                              bIsFrozenRendering : 1;                                  // 0x0858(0x0001) BIT_FIELD NoDestructor
		unsigned char                                              UnknownData_GFWZ[0x7];                                   // 0x0859(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UDrawFrustumComponent*                               DrawFrustum;                                             // 0x0860(0x0008) ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_ZCZV[0x38];                                  // 0x0868(0x0038) MISSED OFFSET (PADDING)

	public:
		void ShowDebugSelectedInfo();
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.LogVisualizerCameraController
	 * Size -> 0x0018 (FullSize[0x08B8] - InheritedSize[0x08A0])
	 */
	class ALogVisualizerCameraController : public ADebugCameraController
	{
	public:
		class AActor*                                              PickedActor;                                             // 0x08A0(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_GLQV[0x10];                                  // 0x08A8(0x0010) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.DecalActor
	 * Size -> 0x0008 (FullSize[0x0470] - InheritedSize[0x0468])
	 */
	class ADecalActor : public AActor
	{
	public:
		class UDecalComponent*                                     Decal;                                                   // 0x0468(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, SubobjectReference, IsPlainOldData, NoDestructor

	public:
		void SetDecalMaterial(class UMaterialInterface* NewDecalMaterial);
		class UMaterialInterface* GetDecalMaterial();
		class UMaterialInstanceDynamic* CreateDynamicMaterialInstance();
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.DocumentationActor
	 * Size -> 0x0008 (FullSize[0x0470] - InheritedSize[0x0468])
	 */
	class ADocumentationActor : public AActor
	{
	public:
		unsigned char                                              UnknownData_1EUT[0x8];                                   // 0x0468(0x0008) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.DynamicCaptureManager
	 * Size -> 0x0628 (FullSize[0x0A90] - InheritedSize[0x0468])
	 */
	class ADynamicCaptureManager : public AActor
	{
	public:
		class FString                                              SavePath;                                                // 0x0468(0x0010) Edit, ZeroConstructor
		bool                                                       bUseMapRelativeSaving;                                   // 0x0478(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_XSS7[0x7];                                   // 0x0479(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class AMatineeActor*                                       Matinee;                                                 // 0x0480(0x0008) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		TArray<struct FStringAssetReference>                       CapturesData;                                            // 0x0488(0x0010) Edit, ZeroConstructor
		struct FOverrideCaptureData                                OverridenCapturesData[0x20];                             // 0x0498(0x0300) Edit
		bool                                                       bIsMasterSkylightOverrider;                              // 0x0798(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_VHJ0[0x7];                                   // 0x0799(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FString                                              OverrideMasterSkylightCapturesPath;                      // 0x07A0(0x0010) Edit, ZeroConstructor
		TArray<struct FOverrideCaptureData>                        OverrideMasterSkylightData;                              // 0x07B0(0x0010) Edit, ZeroConstructor
		float                                                      CaptureInterval;                                         // 0x07C0(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      PreviewMatineeTime;                                      // 0x07C4(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_AWL0[0x150];                                 // 0x07C8(0x0150) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UDynamicCaptureData*                                 LoadedSnapshot0;                                         // 0x0918(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		class UDynamicCaptureData*                                 LoadedSnapshot1;                                         // 0x0920(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		class UDynamicCaptureData*                                 OverrideLoadedSnapshot0;                                 // 0x0928(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		class UDynamicCaptureData*                                 OverrideLoadedSnapshot1;                                 // 0x0930(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		TArray<struct FStringAssetReference>                       OldCapturesData;                                         // 0x0938(0x0010) ZeroConstructor, Transient
		unsigned char                                              UnknownData_0KA3[0x148];                                 // 0x0948(0x0148) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.EmitterCameraLensEffectBase
	 * Size -> 0x0038 (FullSize[0x04F0] - InheritedSize[0x04B8])
	 */
	class AEmitterCameraLensEffectBase : public AEmitter
	{
	public:
		class UParticleSystem*                                     PS_CameraEffect;                                         // 0x04B8(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, Protected
		class UParticleSystem*                                     PS_CameraEffectNonExtremeContent;                        // 0x04C0(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, Protected
		float                                                      BaseFOV;                                                 // 0x04C8(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      DistFromCamera;                                          // 0x04CC(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              bAllowMultipleInstances : 1;                             // 0x04D0(0x0001) BIT_FIELD Edit, NoDestructor
		unsigned char                                              UnknownData_656Y[0x7];                                   // 0x04D1(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class UClass*>                                      EmittersToTreatAsSame;                                   // 0x04D8(0x0010) ZeroConstructor
		class APlayerCameraManager*                                BaseCamera;                                              // 0x04E8(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.GroundClutterLayerActor
	 * Size -> 0x0008 (FullSize[0x0470] - InheritedSize[0x0468])
	 */
	class AGroundClutterLayerActor : public AActor
	{
	public:
		class UGroundClutterComponent*                             ClutterComponent;                                        // 0x0468(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, SubobjectReference, IsPlainOldData, NoDestructor

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.HierarchicalInstancedStaticMeshActor
	 * Size -> 0x0008 (FullSize[0x0470] - InheritedSize[0x0468])
	 */
	class AHierarchicalInstancedStaticMeshActor : public AActor
	{
	public:
		class UHierarchicalInstancedStaticMeshComponent*           InstancedStaticMeshComponent;                            // 0x0468(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, SubobjectReference, IsPlainOldData, NoDestructor

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.HoudiniEmptyActor
	 * Size -> 0x0000 (FullSize[0x0468] - InheritedSize[0x0468])
	 */
	class AHoudiniEmptyActor : public AActor
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.DebugCameraHUD
	 * Size -> 0x0000 (FullSize[0x0550] - InheritedSize[0x0550])
	 */
	class ADebugCameraHUD : public AHUD
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.LogVisualizerHUD
	 * Size -> 0x0030 (FullSize[0x0580] - InheritedSize[0x0550])
	 */
	class ALogVisualizerHUD : public ADebugCameraHUD
	{
	public:
		unsigned char                                              UnknownData_O6EN[0x30];                                  // 0x0550(0x0030) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.AtmosphericFog
	 * Size -> 0x0008 (FullSize[0x0470] - InheritedSize[0x0468])
	 */
	class AAtmosphericFog : public AInfo
	{
	public:
		class UAtmosphericFogComponent*                            AtmosphericFogComponent;                                 // 0x0468(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, SubobjectReference, IsPlainOldData, NoDestructor

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.ExponentialHeightFog
	 * Size -> 0x0010 (FullSize[0x0478] - InheritedSize[0x0468])
	 */
	class AExponentialHeightFog : public AInfo
	{
	public:
		class UExponentialHeightFogComponent*                      Component;                                               // 0x0468(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, SubobjectReference, IsPlainOldData, NoDestructor
		unsigned char                                              bEnabled : 1;                                            // 0x0470(0x0001) BIT_FIELD Net, RepNotify, NoDestructor
		unsigned char                                              UnknownData_LX7Z[0x7];                                   // 0x0471(0x0007) MISSED OFFSET (PADDING)

	public:
		void OnRep_bEnabled();
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.AntiDupeTransactionLog
	 * Size -> 0x0098 (FullSize[0x00C0] - InheritedSize[0x0028])
	 */
	class UAntiDupeTransactionLog : public UObject
	{
	public:
		class UWorld*                                              CurrentWorld;                                            // 0x0028(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_2400[0x90];                                  // 0x0030(0x0090) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.LocalSpawnGameMode
	 * Size -> 0x0000 (FullSize[0x0558] - InheritedSize[0x0558])
	 */
	class ALocalSpawnGameMode : public AGameMode
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.GameNetworkManager
	 * Size -> 0x0050 (FullSize[0x04B8] - InheritedSize[0x0468])
	 */
	class AGameNetworkManager : public AInfo
	{
	public:
		int32_t                                                    AdjustedNetSpeed;                                        // 0x0468(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      LastNetSpeedUpdateTime;                                  // 0x046C(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor
		int32_t                                                    TotalNetBandwidth;                                       // 0x0470(0x0004) ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor
		int32_t                                                    MinDynamicBandwidth;                                     // 0x0474(0x0004) ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor
		int32_t                                                    MaxDynamicBandwidth;                                     // 0x0478(0x0004) ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor
		unsigned char                                              bIsStandbyCheckingEnabled : 1;                           // 0x047C(0x0001) BIT_FIELD Config, NoDestructor
		unsigned char                                              bHasStandbyCheatTriggered : 1;                           // 0x047C(0x0001) BIT_FIELD NoDestructor
		unsigned char                                              UnknownData_P7A1[0x3];                                   // 0x047D(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      StandbyRxCheatTime;                                      // 0x0480(0x0004) ZeroConstructor, Config, IsPlainOldData, NoDestructor
		float                                                      StandbyTxCheatTime;                                      // 0x0484(0x0004) ZeroConstructor, Config, IsPlainOldData, NoDestructor
		int32_t                                                    BadPingThreshold;                                        // 0x0488(0x0004) ZeroConstructor, Config, IsPlainOldData, NoDestructor
		float                                                      PercentMissingForRxStandby;                              // 0x048C(0x0004) ZeroConstructor, Config, IsPlainOldData, NoDestructor
		float                                                      PercentMissingForTxStandby;                              // 0x0490(0x0004) ZeroConstructor, Config, IsPlainOldData, NoDestructor
		float                                                      PercentForBadPing;                                       // 0x0494(0x0004) ZeroConstructor, Config, IsPlainOldData, NoDestructor
		float                                                      JoinInProgressStandbyWaitTime;                           // 0x0498(0x0004) ZeroConstructor, Config, IsPlainOldData, NoDestructor
		float                                                      MoveRepSize;                                             // 0x049C(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      MAXPOSITIONERRORSQUARED;                                 // 0x04A0(0x0004) ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor
		float                                                      MAXNEARZEROVELOCITYSQUARED;                              // 0x04A4(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      CLIENTADJUSTUPDATECOST;                                  // 0x04A8(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      MAXCLIENTUPDATEINTERVAL;                                 // 0x04AC(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor
		bool                                                       ClientAuthorativePosition;                               // 0x04B0(0x0001) ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor
		bool                                                       bUseDistanceBasedRelevancy;                              // 0x04B1(0x0001) ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_BC96[0x6];                                   // 0x04B2(0x0006) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.MatineeActorManager
	 * Size -> 0x0018 (FullSize[0x0480] - InheritedSize[0x0468])
	 */
	class AMatineeActorManager : public AInfo
	{
	public:
		bool                                                       bPriorityToFloatSets;                                    // 0x0468(0x0001) ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		bool                                                       bPriorityToVectorSets;                                   // 0x0469(0x0001) ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_S7GM[0x16];                                  // 0x046A(0x0016) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.SkyLight
	 * Size -> 0x0010 (FullSize[0x0478] - InheritedSize[0x0468])
	 */
	class ASkyLight : public AInfo
	{
	public:
		class USkyLightComponent*                                  LightComponent;                                          // 0x0468(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, SubobjectReference, IsPlainOldData, NoDestructor
		unsigned char                                              bEnabled : 1;                                            // 0x0470(0x0001) BIT_FIELD Net, RepNotify, NoDestructor
		unsigned char                                              UnknownData_ORL0[0x7];                                   // 0x0471(0x0007) MISSED OFFSET (PADDING)

	public:
		void OnRep_bEnabled();
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.WindDirectionalSource
	 * Size -> 0x0008 (FullSize[0x0470] - InheritedSize[0x0468])
	 */
	class AWindDirectionalSource : public AInfo
	{
	public:
		class UWindDirectionalSourceComponent*                     Component;                                               // 0x0468(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, SubobjectReference, IsPlainOldData, NoDestructor

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.InstancedFoliageActor
	 * Size -> 0x00C0 (FullSize[0x0528] - InheritedSize[0x0468])
	 */
	class AInstancedFoliageActor : public AActor
	{
	public:
		class UFoliageType*                                        SelectedMesh;                                            // 0x0468(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		float                                                      EditorScrollPercent;                                     // 0x0470(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_UJWZ[0x4];                                   // 0x0474(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class UFoliageType*>                                FoliageTypes;                                            // 0x0478(0x0010) ZeroConstructor, Transient, SaveGame
		TArray<class UHierarchicalInstancedStaticMeshComponent*>   InstancedStaticMeshComponent;                            // 0x0488(0x0010) ExportObject, ZeroConstructor, Transient, SaveGame, ContainsInstancedReference
		unsigned char                                              UnknownData_8NPH[0x50];                                  // 0x0498(0x0050) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class FString>                                      BaseMeshLookup;                                          // 0x04E8(0x0010) ZeroConstructor
		unsigned char                                              UnknownData_5OUM[0x30];                                  // 0x04F8(0x0030) MISSED OFFSET (PADDING)

	public:
		class AInstancedFoliageActor* STATIC_BPGetInstancedFoliageActorForCurrentLevel(class UWorld* World);
		void BPConvertStaticMeshActorsToFoliage(TArray<class AStaticMeshActor*> actors, TArray<class AStaticMeshActor*>* ConvertedActors);
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.LandscapeGizmoActor
	 * Size -> 0x0000 (FullSize[0x0468] - InheritedSize[0x0468])
	 */
	class ALandscapeGizmoActor : public AActor
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.LandscapeGizmoActiveActor
	 * Size -> 0x0050 (FullSize[0x04B8] - InheritedSize[0x0468])
	 */
	class ALandscapeGizmoActiveActor : public ALandscapeGizmoActor
	{
	public:
		unsigned char                                              UnknownData_ADSQ[0x50];                                  // 0x0468(0x0050) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.LandscapeProxy
	 * Size -> 0x02E0 (FullSize[0x0748] - InheritedSize[0x0468])
	 */
	class ALandscapeProxy : public AActor
	{
	public:
		class ULandscapeSplinesComponent*                          SplineComponent;                                         // 0x0468(0x0008) ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor
		struct FGuid                                               LandscapeGuid;                                           // 0x0470(0x0010) ZeroConstructor, Protected
		struct FIntPoint                                           LandscapeSectionOffset;                                  // 0x0480(0x0008) ZeroConstructor
		int32_t                                                    MaxLODLevel;                                             // 0x0488(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		int32_t                                                    StaticLightingLOD;                                       // 0x048C(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		class UPhysicalMaterial*                                   DefaultPhysMaterial;                                     // 0x0490(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      StreamingDistanceMultiplier;                             // 0x0498(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_SD0J[0x4];                                   // 0x049C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UMaterialInterface*                                  LandscapeMaterial;                                       // 0x04A0(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor
		class UMaterialInterface*                                  LandscapeHoleMaterial;                                   // 0x04A8(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      LODDistanceFactor;                                       // 0x04B0(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      ZRescaleBuilder;                                         // 0x04B4(0x0004) Edit, ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		TArray<class ULandscapeComponent*>                         LandscapeComponents;                                     // 0x04B8(0x0010) ExportObject, ZeroConstructor, ContainsInstancedReference
		TArray<class ULandscapeHeightfieldCollisionComponent*>     CollisionComponents;                                     // 0x04C8(0x0010) ExportObject, ZeroConstructor, ContainsInstancedReference
		float                                                      StaticLightingResolution;                                // 0x04D8(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		TLazyObjectPtr<class ALandscape>                           LandscapeActor;                                          // 0x04DC(0x001C) Edit, IsPlainOldData, NoDestructor
		unsigned char                                              bCastStaticShadow : 1;                                   // 0x04F8(0x0001) BIT_FIELD Edit, NoDestructor
		unsigned char                                              bCastShadowAsTwoSided : 1;                               // 0x04F8(0x0001) BIT_FIELD Edit, NoDestructor, AdvancedDisplay
		unsigned char                                              bAllowHeightFieldShadow : 1;                             // 0x04F8(0x0001) BIT_FIELD Edit, NoDestructor, AdvancedDisplay
		unsigned char                                              bIsProxy : 1;                                            // 0x04F8(0x0001) BIT_FIELD NoDestructor
		unsigned char                                              UnknownData_UVAX[0x3];                                   // 0x04F9(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FLightmassPrimitiveSettings                         LightmassSettings;                                       // 0x04FC(0x0018) Edit
		int32_t                                                    CollisionMipLevel;                                       // 0x0514(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      CollisionThickness;                                      // 0x0518(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_NUI2[0x4];                                   // 0x051C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FBodyInstance                                       BodyInstance;                                            // 0x0520(0x0160) Edit, BlueprintVisible, BlueprintReadOnly
		TArray<struct FLandscapeLayerStruct>                       LayerInfoObjs;                                           // 0x0680(0x0010) ZeroConstructor, Deprecated
		int32_t                                                    ComponentSizeQuads;                                      // 0x0690(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor
		int32_t                                                    SubsectionSizeQuads;                                     // 0x0694(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor
		int32_t                                                    NumSubsections;                                          // 0x0698(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              bUsedForNavigation : 1;                                  // 0x069C(0x0001) BIT_FIELD Edit, NoDestructor
		unsigned char                                              UnknownData_W7GF[0x3];                                   // 0x069D(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		ELandscapeLODFalloff                                       LODFalloff;                                              // 0x06A0(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_R3M8[0x3];                                   // 0x06A1(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int32_t                                                    MaxPaintedLayersPerComponent;                            // 0x06A4(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_LYGK[0xA0];                                  // 0x06A8(0x00A0) MISSED OFFSET (PADDING)

	public:
		void ChangeLODDistanceFactor(float InLODDistanceFactor);
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.Landscape
	 * Size -> 0x0000 (FullSize[0x0748] - InheritedSize[0x0748])
	 */
	class ALandscape : public ALandscapeProxy
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.LevelBounds
	 * Size -> 0x0008 (FullSize[0x0470] - InheritedSize[0x0468])
	 */
	class ALevelBounds : public AActor
	{
	public:
		bool                                                       bAutoUpdateBounds;                                       // 0x0468(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_ZZVD[0x7];                                   // 0x0469(0x0007) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.LevelScriptActor
	 * Size -> 0x0008 (FullSize[0x0470] - InheritedSize[0x0468])
	 */
	class ALevelScriptActor : public AActor
	{
	public:
		unsigned char                                              bEnableScriptReplication : 1;                            // 0x0468(0x0001) BIT_FIELD Edit, BlueprintVisible, NoDestructor
		unsigned char                                              bForceAbsoluteMaxDistance : 1;                           // 0x0468(0x0001) BIT_FIELD Edit, BlueprintVisible, NoDestructor
		unsigned char                                              bDisableMeshOptimizer : 1;                               // 0x0468(0x0001) BIT_FIELD Edit, BlueprintVisible, NoDestructor
		unsigned char                                              bInputEnabled : 1;                                       // 0x0468(0x0001) BIT_FIELD NoDestructor
		unsigned char                                              UnknownData_OT6P[0x7];                                   // 0x0469(0x0007) MISSED OFFSET (PADDING)

	public:
		void WorldOriginLocationChanged(const struct FIntVector& OldOriginLocation, const struct FIntVector& NewOriginLocation);
		void SetCinematicMode(bool bCinematicMode, bool bHidePlayer, bool bAffectsHUD, bool bAffectsMovement, bool bAffectsTurning);
		bool RemoteEvent(const class FName& EventName);
		void OnGameStateReady(class AGameState* GameState);
		void LevelReset();
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.DirectionalLight
	 * Size -> 0x0008 (FullSize[0x0480] - InheritedSize[0x0478])
	 */
	class ADirectionalLight : public ALight
	{
	public:
		unsigned char                                              UnknownData_FFCD[0x8];                                   // 0x0478(0x0008) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.PointLight
	 * Size -> 0x0008 (FullSize[0x0480] - InheritedSize[0x0478])
	 */
	class APointLight : public ALight
	{
	public:
		class UPointLightComponent*                                PointLightComponent;                                     // 0x0478(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor

	public:
		void SetRadius(float NewRadius);
		void SetLightFalloffExponent(float NewLightFalloffExponent);
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.SpotLight
	 * Size -> 0x0008 (FullSize[0x0480] - InheritedSize[0x0478])
	 */
	class ASpotLight : public ALight
	{
	public:
		class USpotLightComponent*                                 SpotLightComponent;                                      // 0x0478(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor

	public:
		void SetOuterConeAngle(float NewOuterConeAngle);
		void SetInnerConeAngle(float NewInnerConeAngle);
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.GeneratedMeshAreaLight
	 * Size -> 0x0000 (FullSize[0x0480] - InheritedSize[0x0480])
	 */
	class AGeneratedMeshAreaLight : public ASpotLight
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.MaterialInstanceActor
	 * Size -> 0x0010 (FullSize[0x0478] - InheritedSize[0x0468])
	 */
	class AMaterialInstanceActor : public AActor
	{
	public:
		TArray<class AActor*>                                      TargetActors;                                            // 0x0468(0x0010) Edit, BlueprintVisible, ZeroConstructor

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.MatineeActor
	 * Size -> 0x0088 (FullSize[0x04F0] - InheritedSize[0x0468])
	 */
	class AMatineeActor : public AActor
	{
	public:
		unsigned char                                              UnknownData_1Y7I : 1;                                    // 0x0468(0x0001) BIT_FIELD (PADDING)
		unsigned char                                              bRestoreAfterEditing : 1;                                // 0x0468(0x0001) BIT_FIELD Edit, NoDestructor
		unsigned char                                              bUseGameStatePlayRate : 1;                               // 0x0468(0x0001) BIT_FIELD Edit, NoDestructor
		unsigned char                                              UnknownData_SX1W[0x7];                                   // 0x0469(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UInterpData*                                         MatineeData;                                             // 0x0470(0x0008) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		class FName                                                MatineeControllerName;                                   // 0x0478(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      PlayRate;                                                // 0x0480(0x0004) Edit, BlueprintVisible, Net, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor
		unsigned char                                              bDedicatedServerUpdateInterpolations : 1;                // 0x0484(0x0001) BIT_FIELD Edit, NoDestructor
		unsigned char                                              bPlayOnLevelLoad : 1;                                    // 0x0484(0x0001) BIT_FIELD Edit, BlueprintVisible, NoDestructor
		unsigned char                                              bIsGameplayRelevant : 1;                                 // 0x0484(0x0001) BIT_FIELD Edit, BlueprintVisible, NoDestructor
		unsigned char                                              bForceStartPos : 1;                                      // 0x0484(0x0001) BIT_FIELD Edit, BlueprintVisible, NoDestructor, AdvancedDisplay
		unsigned char                                              UnknownData_A7KV[0x3];                                   // 0x0485(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      ForceStartPosition;                                      // 0x0488(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay
		int32_t                                                    MatineeManagerPriority;                                  // 0x048C(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              bLooping : 1;                                            // 0x0490(0x0001) BIT_FIELD Edit, BlueprintVisible, Net, SaveGame, NoDestructor
		unsigned char                                              bRewindOnPlay : 1;                                       // 0x0490(0x0001) BIT_FIELD Edit, BlueprintVisible, NoDestructor
		unsigned char                                              bNoResetOnRewind : 1;                                    // 0x0490(0x0001) BIT_FIELD Edit, BlueprintVisible, NoDestructor
		unsigned char                                              bRewindIfAlreadyPlaying : 1;                             // 0x0490(0x0001) BIT_FIELD Edit, BlueprintVisible, NoDestructor
		unsigned char                                              bDisableRadioFilter : 1;                                 // 0x0490(0x0001) BIT_FIELD Edit, BlueprintVisible, NoDestructor, AdvancedDisplay
		unsigned char                                              bClientSideOnly : 1;                                     // 0x0490(0x0001) BIT_FIELD Edit, BlueprintVisible, NoDestructor, AdvancedDisplay
		unsigned char                                              bSkipUpdateIfNotVisible : 1;                             // 0x0490(0x0001) BIT_FIELD Edit, BlueprintVisible, NoDestructor
		unsigned char                                              bIsSkippable : 1;                                        // 0x0490(0x0001) BIT_FIELD Edit, BlueprintVisible, NoDestructor
		unsigned char                                              UnknownData_JK92[0x3];                                   // 0x0491(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int32_t                                                    PreferredSplitScreenNum;                                 // 0x0494(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay
		unsigned char                                              bDisableMovementInput : 1;                               // 0x0498(0x0001) BIT_FIELD Edit, BlueprintVisible, NoDestructor
		unsigned char                                              bDisableLookAtInput : 1;                                 // 0x0498(0x0001) BIT_FIELD Edit, BlueprintVisible, NoDestructor
		unsigned char                                              bHidePlayer : 1;                                         // 0x0498(0x0001) BIT_FIELD Edit, BlueprintVisible, NoDestructor
		unsigned char                                              bUseMatineeManager : 1;                                  // 0x0498(0x0001) BIT_FIELD Edit, NoDestructor
		unsigned char                                              bReplicateGroupInfos : 1;                                // 0x0498(0x0001) BIT_FIELD Edit, NoDestructor
		unsigned char                                              UnknownData_AOUG[0x3];                                   // 0x0499(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      InterpPosition;                                          // 0x049C(0x0004) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor
		TArray<struct FInterpGroupActorInfo>                       GroupActorInfos;                                         // 0x04A0(0x0010) Net, ZeroConstructor, RepNotify
		unsigned char                                              bShouldShowGore : 1;                                     // 0x04B0(0x0001) BIT_FIELD Transient, NoDestructor
		unsigned char                                              UnknownData_CP3M[0x7];                                   // 0x04B1(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class UInterpGroupInst*>                            GroupInst;                                               // 0x04B8(0x0010) ZeroConstructor, Transient
		TArray<struct FCameraCutInfo>                              CameraCuts;                                              // 0x04C8(0x0010) ZeroConstructor, Transient
		unsigned char                                              bIsPlaying : 1;                                          // 0x04D8(0x0001) BIT_FIELD BlueprintVisible, BlueprintReadOnly, Net, Transient, SaveGame, NoDestructor
		unsigned char                                              bReversePlayback : 1;                                    // 0x04D8(0x0001) BIT_FIELD Net, SaveGame, NoDestructor
		unsigned char                                              bPaused : 1;                                             // 0x04D8(0x0001) BIT_FIELD Net, Transient, SaveGame, NoDestructor
		unsigned char                                              bClientDontPlayMatineeIfCompleted : 1;                   // 0x04D8(0x0001) BIT_FIELD Edit, NoDestructor
		unsigned char                                              UnknownData_KBQH[0x7];                                   // 0x04D9(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		unsigned char                                              ReplicationForceIsPlaying;                               // 0x04E0(0x0001) Net, ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_ASPP[0xF];                                   // 0x04E1(0x000F) MISSED OFFSET (PADDING)

	public:
		void Stop();
		void SetPosition(float NewPosition, bool bJump, bool bForceJumpFromBeginningForEvents, bool bSkipMatineeUpdate);
		void SetLoopingState(bool bNewLooping);
		void Reverse();
		void Play(float OverrideSetPosition, bool bOverridePositionJump);
		void Pause();
		void OnMatineeEvent__DelegateSignature();
		void InitClientMatinee();
		void ChangePlaybackDirection();
		void AddActorToGroup(const class FName& GroupName, class AActor* TheGroupActor);
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.MatineeActorCameraAnim
	 * Size -> 0x0008 (FullSize[0x04F8] - InheritedSize[0x04F0])
	 */
	class AMatineeActorCameraAnim : public AMatineeActor
	{
	public:
		class UCameraAnim*                                         CameraAnim;                                              // 0x04F0(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.NavigationQueryFilter
	 * Size -> 0x0018 (FullSize[0x0040] - InheritedSize[0x0028])
	 */
	class UNavigationQueryFilter : public UObject
	{
	public:
		TArray<struct FNavigationFilterArea>                       Areas;                                                   // 0x0028(0x0010) Edit, ZeroConstructor
		struct FNavigationFilterFlags                              IncludeFlags;                                            // 0x0038(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		struct FNavigationFilterFlags                              ExcludeFlags;                                            // 0x003C(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.NavigationData
	 * Size -> 0x0178 (FullSize[0x05E0] - InheritedSize[0x0468])
	 */
	class ANavigationData : public AActor
	{
	public:
		class UPrimitiveComponent*                                 RenderingComp;                                           // 0x0468(0x0008) ExportObject, ZeroConstructor, Transient, InstancedReference, DuplicateTransient, IsPlainOldData, NoDestructor
		struct FNavDataConfig                                      NavDataConfig;                                           // 0x0470(0x0028)
		unsigned char                                              bEnableDrawing : 1;                                      // 0x0498(0x0001) BIT_FIELD Edit, Transient, NoDestructor
		unsigned char                                              bRebuildAtRuntime : 1;                                   // 0x0498(0x0001) BIT_FIELD Edit, Config, NoDestructor
		unsigned char                                              UnknownData_3DFB[0x3];                                   // 0x0499(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      ObservedPathsTickInterval;                               // 0x049C(0x0004) Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor
		unsigned char                                              bLockNavigation : 1;                                     // 0x04A0(0x0001) BIT_FIELD Edit, NoDestructor
		unsigned char                                              UnknownData_VZX8[0xD7];                                  // 0x04A1(0x00D7) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<struct FSupportedAreaData>                          SupportedAreas;                                          // 0x0578(0x0010) ZeroConstructor, Protected
		unsigned char                                              UnknownData_Z32T[0x58];                                  // 0x0588(0x0058) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.NavigationGraph
	 * Size -> 0x0000 (FullSize[0x05E0] - InheritedSize[0x05E0])
	 */
	class ANavigationGraph : public ANavigationData
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.RecastNavMesh
	 * Size -> 0x0118 (FullSize[0x06F8] - InheritedSize[0x05E0])
	 */
	class ARecastNavMesh : public ANavigationData
	{
	public:
		unsigned char                                              bDrawTriangleEdges : 1;                                  // 0x05E0(0x0001) BIT_FIELD Edit, NoDestructor
		unsigned char                                              bDrawPolyEdges : 1;                                      // 0x05E0(0x0001) BIT_FIELD Edit, NoDestructor
		unsigned char                                              bDrawNavMeshEdges : 1;                                   // 0x05E0(0x0001) BIT_FIELD Edit, NoDestructor
		unsigned char                                              bDrawTileBounds : 1;                                     // 0x05E0(0x0001) BIT_FIELD Edit, NoDestructor
		unsigned char                                              bDrawPathCollidingGeometry : 1;                          // 0x05E0(0x0001) BIT_FIELD Edit, NoDestructor
		unsigned char                                              bDrawTileLabels : 1;                                     // 0x05E0(0x0001) BIT_FIELD Edit, NoDestructor
		unsigned char                                              bDrawPolygonLabels : 1;                                  // 0x05E0(0x0001) BIT_FIELD Edit, NoDestructor
		unsigned char                                              bDrawDefaultPolygonCost : 1;                             // 0x05E0(0x0001) BIT_FIELD Edit, NoDestructor
		unsigned char                                              bDrawLabelsOnPathNodes : 1;                              // 0x05E1(0x0001) BIT_FIELD Edit, NoDestructor
		unsigned char                                              bDrawNavLinks : 1;                                       // 0x05E1(0x0001) BIT_FIELD Edit, NoDestructor
		unsigned char                                              bDrawFailedNavLinks : 1;                                 // 0x05E1(0x0001) BIT_FIELD Edit, NoDestructor
		unsigned char                                              bDrawClusters : 1;                                       // 0x05E1(0x0001) BIT_FIELD Edit, NoDestructor
		unsigned char                                              bDrawOctree : 1;                                         // 0x05E1(0x0001) BIT_FIELD Edit, NoDestructor
		unsigned char                                              bDistinctlyDrawTilesBeingBuilt : 1;                      // 0x05E1(0x0001) BIT_FIELD Config, NoDestructor
		unsigned char                                              UnknownData_YRH7[0x2];                                   // 0x05E2(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      DrawOffset;                                              // 0x05E4(0x0004) Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor
		float                                                      TileSizeUU;                                              // 0x05E8(0x0004) Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor
		float                                                      CellSize;                                                // 0x05EC(0x0004) Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor
		float                                                      CellHeight;                                              // 0x05F0(0x0004) Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor
		float                                                      AgentRadius;                                             // 0x05F4(0x0004) Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor
		float                                                      AgentHeight;                                             // 0x05F8(0x0004) Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor
		float                                                      AgentMaxHeight;                                          // 0x05FC(0x0004) Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor
		float                                                      AgentMaxSlope;                                           // 0x0600(0x0004) Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor
		float                                                      AgentMaxStepHeight;                                      // 0x0604(0x0004) Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor
		float                                                      MinRegionArea;                                           // 0x0608(0x0004) Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor
		float                                                      MergeRegionSize;                                         // 0x060C(0x0004) Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor
		float                                                      MaxSimplificationError;                                  // 0x0610(0x0004) Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor
		float                                                      DefaultDrawDistance;                                     // 0x0614(0x0004) ZeroConstructor, Config, IsPlainOldData, NoDestructor
		float                                                      DefaultMaxSearchNodes;                                   // 0x0618(0x0004) ZeroConstructor, Config, IsPlainOldData, NoDestructor
		float                                                      DefaultMaxHierarchicalSearchNodes;                       // 0x061C(0x0004) ZeroConstructor, Config, IsPlainOldData, NoDestructor
		unsigned char                                              bUseVirtualFilters : 1;                                  // 0x0620(0x0001) BIT_FIELD Config, NoDestructor
		unsigned char                                              UnknownData_56PD[0x3];                                   // 0x0621(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		ERecastPartitioning                                        RegionPartitioning;                                      // 0x0624(0x0001) Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, AdvancedDisplay
		ERecastPartitioning                                        LayerPartitioning;                                       // 0x0625(0x0001) Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, AdvancedDisplay
		unsigned char                                              UnknownData_BFVO[0x2];                                   // 0x0626(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int32_t                                                    RegionChunkSplits;                                       // 0x0628(0x0004) Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, AdvancedDisplay
		int32_t                                                    LayerChunkSplits;                                        // 0x062C(0x0004) Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, AdvancedDisplay
		int32_t                                                    MaxTileGridWidth;                                        // 0x0630(0x0004) ZeroConstructor, Config, IsPlainOldData, NoDestructor
		int32_t                                                    MaxTileGridHeight;                                       // 0x0634(0x0004) ZeroConstructor, Config, IsPlainOldData, NoDestructor
		unsigned char                                              bSortNavigationAreasByCost : 1;                          // 0x0638(0x0001) BIT_FIELD Edit, Config, NoDestructor
		unsigned char                                              bPerformVoxelFiltering : 1;                              // 0x0638(0x0001) BIT_FIELD Edit, Config, NoDestructor
		unsigned char                                              bUseBetterOffsetsFromCorners : 1;                        // 0x0638(0x0001) BIT_FIELD Config, NoDestructor
		unsigned char                                              bUseVoxelCache : 1;                                      // 0x0638(0x0001) BIT_FIELD Config, NoDestructor
		unsigned char                                              UnknownData_YMMK[0x7];                                   // 0x0639(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      TileSetUpdateInterval;                                   // 0x0640(0x0004) ZeroConstructor, Config, IsPlainOldData, NoDestructor
		float                                                      HeuristicScale;                                          // 0x0644(0x0004) Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_CC52[0xB0];                                  // 0x0648(0x00B0) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.NavigationGraphNode
	 * Size -> 0x0000 (FullSize[0x0468] - InheritedSize[0x0468])
	 */
	class ANavigationGraphNode : public AActor
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.NavigationObjectBase
	 * Size -> 0x0028 (FullSize[0x0490] - InheritedSize[0x0468])
	 */
	class ANavigationObjectBase : public AActor
	{
	public:
		unsigned char                                              UnknownData_JF6T[0x8];                                   // 0x0468(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UCapsuleComponent*                                   CapsuleComponent;                                        // 0x0470(0x0008) ExportObject, ZeroConstructor, InstancedReference, SubobjectReference, IsPlainOldData, NoDestructor
		class UBillboardComponent*                                 GoodSprite;                                              // 0x0478(0x0008) ExportObject, ZeroConstructor, InstancedReference, SubobjectReference, IsPlainOldData, NoDestructor
		class UBillboardComponent*                                 BadSprite;                                               // 0x0480(0x0008) ExportObject, ZeroConstructor, InstancedReference, SubobjectReference, IsPlainOldData, NoDestructor
		unsigned char                                              bIsPIEPlayerStart : 1;                                   // 0x0488(0x0001) BIT_FIELD NoDestructor
		unsigned char                                              UnknownData_98RH[0x7];                                   // 0x0489(0x0007) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.PlayerStart
	 * Size -> 0x0010 (FullSize[0x04A0] - InheritedSize[0x0490])
	 */
	class APlayerStart : public ANavigationObjectBase
	{
	public:
		class FName                                                PlayerStartTag;                                          // 0x0490(0x0008) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		int32_t                                                    SpawnPointRegion;                                        // 0x0498(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_X3PH[0x4];                                   // 0x049C(0x0004) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.PlayerStartPIE
	 * Size -> 0x0000 (FullSize[0x04A0] - InheritedSize[0x04A0])
	 */
	class APlayerStartPIE : public APlayerStart
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.NavPathObserverInterface
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class UNavPathObserverInterface : public UInterface
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.NavigationTestingActor
	 * Size -> 0x0098 (FullSize[0x0500] - InheritedSize[0x0468])
	 */
	class ANavigationTestingActor : public AActor
	{
	public:
		unsigned char                                              UnknownData_MORI[0x10];                                  // 0x0468(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UCapsuleComponent*                                   CapsuleComponent;                                        // 0x0478(0x0008) ExportObject, ZeroConstructor, InstancedReference, SubobjectReference, IsPlainOldData, NoDestructor
		struct FNavAgentProperties                                 NavAgentProps;                                           // 0x0480(0x0010) Edit
		struct FVector                                             QueryingExtent;                                          // 0x0490(0x000C) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_HY6A[0x4];                                   // 0x049C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class ANavigationData*                                     MyNavData;                                               // 0x04A0(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		struct FVector                                             ProjectedLocation;                                       // 0x04A8(0x000C) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor
		unsigned char                                              bProjectedLocationValid : 1;                             // 0x04B4(0x0001) BIT_FIELD Edit, BlueprintVisible, BlueprintReadOnly, EditConst, NoDestructor
		unsigned char                                              bSearchStart : 1;                                        // 0x04B4(0x0001) BIT_FIELD Edit, NoDestructor
		unsigned char                                              bUseHierarchicalPathfinding : 1;                         // 0x04B4(0x0001) BIT_FIELD Edit, NoDestructor
		unsigned char                                              bGatherDetailedInfo : 1;                                 // 0x04B4(0x0001) BIT_FIELD Edit, NoDestructor
		unsigned char                                              bShowNodePool : 1;                                       // 0x04B4(0x0001) BIT_FIELD Edit, NoDestructor
		unsigned char                                              bShowBestPath : 1;                                       // 0x04B4(0x0001) BIT_FIELD Edit, NoDestructor
		unsigned char                                              bShowDiffWithPreviousStep : 1;                           // 0x04B4(0x0001) BIT_FIELD Edit, NoDestructor
		unsigned char                                              bShouldBeVisibleInGame : 1;                              // 0x04B4(0x0001) BIT_FIELD Edit, NoDestructor
		unsigned char                                              UnknownData_UY4U[0x3];                                   // 0x04B5(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		ENavCostDisplay                                            CostDisplayMode;                                         // 0x04B8(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_LTFE[0x3];                                   // 0x04B9(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FVector2D                                           TextCanvasOffset;                                        // 0x04BC(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              bPathExist : 1;                                          // 0x04C4(0x0001) BIT_FIELD Edit, BlueprintVisible, BlueprintReadOnly, Transient, EditConst, NoDestructor
		unsigned char                                              bPathIsPartial : 1;                                      // 0x04C4(0x0001) BIT_FIELD Edit, BlueprintVisible, BlueprintReadOnly, Transient, EditConst, NoDestructor
		unsigned char                                              bPathSearchOutOfNodes : 1;                               // 0x04C4(0x0001) BIT_FIELD Edit, BlueprintVisible, BlueprintReadOnly, Transient, EditConst, NoDestructor
		unsigned char                                              UnknownData_5BKB[0x3];                                   // 0x04C5(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      PathfindingTime;                                         // 0x04C8(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor
		float                                                      PathCost;                                                // 0x04CC(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor
		int32_t                                                    PathfindingSteps;                                        // 0x04D0(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_2AI0[0x4];                                   // 0x04D4(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class ANavigationTestingActor*                             OtherActor;                                              // 0x04D8(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		class UClass*                                              FilterClass;                                             // 0x04E0(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		int32_t                                                    ShowStepIndex;                                           // 0x04E8(0x0004) Edit, ZeroConstructor, DisableEditOnTemplate, Transient, IsPlainOldData, NoDestructor
		float                                                      OffsetFromCornersDistance;                               // 0x04EC(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_QKP1[0x10];                                  // 0x04F0(0x0010) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.NavLinkDefinition
	 * Size -> 0x0028 (FullSize[0x0050] - InheritedSize[0x0028])
	 */
	class UNavLinkDefinition : public UObject
	{
	public:
		TArray<struct FNavigationLink>                             Links;                                                   // 0x0028(0x0010) Edit, ZeroConstructor
		TArray<struct FNavigationSegmentLink>                      SegmentLinks;                                            // 0x0038(0x0010) Edit, ZeroConstructor
		unsigned char                                              UnknownData_JPMY[0x8];                                   // 0x0048(0x0008) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.NavLinkHostInterface
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class UNavLinkHostInterface : public UInterface
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.NavLinkProxy
	 * Size -> 0x0050 (FullSize[0x04B8] - InheritedSize[0x0468])
	 */
	class ANavLinkProxy : public AActor
	{
	public:
		unsigned char                                              UnknownData_SZMA[0x10];                                  // 0x0468(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<struct FNavigationLink>                             PointLinks;                                              // 0x0478(0x0010) Edit, ZeroConstructor
		TArray<struct FNavigationSegmentLink>                      SegmentLinks;                                            // 0x0488(0x0010) ZeroConstructor
		class UNavLinkCustomComponent*                             SmartLinkComp;                                           // 0x0498(0x0008) Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, SubobjectReference, IsPlainOldData, NoDestructor
		bool                                                       bSmartLinkIsRelevant;                                    // 0x04A0(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_91O7[0x7];                                   // 0x04A1(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FScriptMulticastDelegate                             OnSmartLinkReached;                                      // 0x04A8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, Protected

	public:
		void SmartLinkReachedSignature__DelegateSignature(class AActor* MovingActor, const struct FVector& DestinationPoint);
		void SetSmartLinkEnabled(bool bEnabled);
		void ResumePathFollowing(class AActor* Agent);
		void ReceiveSmartLinkReached(class AActor* Agent, const struct FVector& Destination);
		bool IsSmartLinkEnabled();
		bool HasMovingAgents();
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.NiagaraActor
	 * Size -> 0x0008 (FullSize[0x0470] - InheritedSize[0x0468])
	 */
	class ANiagaraActor : public AActor
	{
	public:
		class UNiagaraComponent*                                   NiagaraComponent;                                        // 0x0468(0x0008) Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, SubobjectReference, IsPlainOldData, NoDestructor

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.ParticleEventManager
	 * Size -> 0x0000 (FullSize[0x0468] - InheritedSize[0x0468])
	 */
	class AParticleEventManager : public AActor
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.Skeleton
	 * Size -> 0x0288 (FullSize[0x02B0] - InheritedSize[0x0028])
	 */
	class USkeleton : public UObject
	{
	public:
		TArray<struct FBoneNode>                                   BoneTree;                                                // 0x0028(0x0010) Edit, ZeroConstructor, EditConst
		TArray<struct UObject_FTransform>                          RefLocalPoses;                                           // 0x0038(0x0010) ZeroConstructor, Deprecated
		unsigned char                                              UnknownData_6KUG[0x80];                                  // 0x0048(0x0080) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<struct FSkeletonToMeshLinkup>                       LinkupCache;                                             // 0x00C8(0x0010) ZeroConstructor, Transient
		TArray<class USkeletalMeshSocket*>                         Sockets;                                                 // 0x00D8(0x0010) ZeroConstructor
		unsigned char                                              UnknownData_TCW0[0x50];                                  // 0x00E8(0x0050) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FSmartNameContainer                                 SmartNames;                                              // 0x0138(0x0050)
		unsigned char                                              UnknownData_13NL[0x58];                                  // 0x0188(0x0058) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<struct FAnimSlotGroup>                              SlotGroups;                                              // 0x01E0(0x0010) ZeroConstructor
		unsigned char                                              UnknownData_3CFA[0xC0];                                  // 0x01F0(0x00C0) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.SkeletalMesh
	 * Size -> 0x02A0 (FullSize[0x02C8] - InheritedSize[0x0028])
	 */
	class USkeletalMesh : public UObject
	{
	public:
		unsigned char                                              UnknownData_O5ED[0x18];                                  // 0x0028(0x0018) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class USkeleton*                                           Skeleton;                                                // 0x0040(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, AssetRegistrySearchable
		struct FBoxSphereBounds                                    Bounds;                                                  // 0x0048(0x001C) ZeroConstructor, Transient, DuplicateTransient
		float                                                      CachedInitialSphereRadiusBounds;                         // 0x0064(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		TArray<struct FSkeletalMaterial>                           Materials;                                               // 0x0068(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, DuplicateTransient
		class FName                                                CloseToGroundBoneName;                                   // 0x0078(0x0008) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		TArray<struct FGroundBoneChain>                            GroundBonesChains;                                       // 0x0080(0x0010) Edit, BlueprintVisible, ZeroConstructor
		float                                                      DefaultTraceLength;                                      // 0x0090(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      TraceStartOffset;                                        // 0x0094(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      InterpolationSpeed;                                      // 0x0098(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      InterpolationSpeedUpward;                                // 0x009C(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		TArray<struct FBoneMirrorInfo>                             SkelMirrorTable;                                         // 0x00A0(0x0010) Edit, EditFixedSize, ZeroConstructor
		EAxis                                                      SkelMirrorAxis;                                          // 0x00B0(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		EAxis                                                      SkelMirrorFlipAxis;                                      // 0x00B1(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_QMZT[0x6];                                   // 0x00B2(0x0006) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<struct FSkeletalMeshLODInfo>                        LODInfo;                                                 // 0x00B8(0x0010) Edit, EditFixedSize, ZeroConstructor
		unsigned char                                              bUseFullPrecisionUVs : 1;                                // 0x00C8(0x0001) BIT_FIELD Edit, NoDestructor
		unsigned char                                              bHasBeenSimplified : 1;                                  // 0x00C8(0x0001) BIT_FIELD NoDestructor
		unsigned char                                              bHasVertexColors : 1;                                    // 0x00C8(0x0001) BIT_FIELD NoDestructor
		unsigned char                                              bIgnoreTriReductions : 1;                                // 0x00C8(0x0001) BIT_FIELD Edit, NoDestructor
		unsigned char                                              bAllowLODStreaming : 1;                                  // 0x00C8(0x0001) BIT_FIELD Edit, NoDestructor
		unsigned char                                              bFullLODStreaming : 1;                                   // 0x00C8(0x0001) BIT_FIELD Edit, NoDestructor
		unsigned char                                              bCookRemoveLOD0 : 1;                                     // 0x00C8(0x0001) BIT_FIELD Edit, NoDestructor
		unsigned char                                              bReinitDataOnStreaming : 1;                              // 0x00C8(0x0001) BIT_FIELD Edit, NoDestructor
		unsigned char                                              bIgnoreMasterPoseLODs : 1;                               // 0x00C9(0x0001) BIT_FIELD Edit, NoDestructor
		unsigned char                                              bConsoleDropLOD0 : 1;                                    // 0x00C9(0x0001) BIT_FIELD Edit, NoDestructor
		unsigned char                                              bConsoleDropLOD0onLowMemPlatform : 1;                    // 0x00C9(0x0001) BIT_FIELD Edit, NoDestructor
		unsigned char                                              bPreventLODStreamingOnWindows : 1;                       // 0x00C9(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		unsigned char                                              UnknownData_85X7[0x2];                                   // 0x00CA(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int32_t                                                    ConsoleDropLODNewTriangleCount;                          // 0x00CC(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_MPBE[0x30];                                  // 0x00D0(0x0030) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UPhysicsAsset*                                       PhysicsAsset;                                            // 0x0100(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      StreamingDistanceMultiplier;                             // 0x0108(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_7OYB[0x4];                                   // 0x010C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<struct FMorphTargetMap>                             MorphTargetTable;                                        // 0x0110(0x0010) ZeroConstructor, Deprecated
		TArray<class UMorphTarget*>                                MorphTargets;                                            // 0x0120(0x0010) BlueprintVisible, ZeroConstructor
		unsigned char                                              UnknownData_WXI4[0xD8];                                  // 0x0130(0x00D8) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FRotator                                            RotOffset;                                               // 0x0208(0x000C) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		struct FVector                                             LocOffset;                                               // 0x0214(0x000C) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		struct FVector                                             ScaleMultiplier;                                         // 0x0220(0x000C) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_88QC[0x4];                                   // 0x022C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<struct FClothingAssetData>                          ClothingAssets;                                          // 0x0230(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, EditFixedSize, ZeroConstructor
		unsigned char                                              UnknownData_HW3B[0x18];                                  // 0x0240(0x0018) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class USkeletalMeshSocket*>                         Sockets;                                                 // 0x0258(0x0010) ZeroConstructor
		unsigned char                                              UnknownData_UOVO[0x60];                                  // 0x0268(0x0060) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.WheeledVehicle
	 * Size -> 0x0010 (FullSize[0x0508] - InheritedSize[0x04F8])
	 */
	class AWheeledVehicle : public APawn
	{
	public:
		class USkeletalMeshComponent*                              Mesh;                                                    // 0x04F8(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, SubobjectReference, IsPlainOldData, NoDestructor
		class UWheeledVehicleMovementComponent*                    VehicleMovement;                                         // 0x0500(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, SubobjectReference, IsPlainOldData, NoDestructor

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.ReflectionCapture
	 * Size -> 0x0008 (FullSize[0x0470] - InheritedSize[0x0468])
	 */
	class AReflectionCapture : public AActor
	{
	public:
		class UReflectionCaptureComponent*                         CaptureComponent;                                        // 0x0468(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, SubobjectReference, IsPlainOldData, NoDestructor

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.BoxReflectionCapture
	 * Size -> 0x0000 (FullSize[0x0470] - InheritedSize[0x0470])
	 */
	class ABoxReflectionCapture : public AReflectionCapture
	{
	public:
		class UBoxReflectionCaptureComponent* GetBoxCaptureComponent();
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.PlaneReflectionCapture
	 * Size -> 0x0000 (FullSize[0x0470] - InheritedSize[0x0470])
	 */
	class APlaneReflectionCapture : public AReflectionCapture
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.SphereReflectionCapture
	 * Size -> 0x0008 (FullSize[0x0478] - InheritedSize[0x0470])
	 */
	class ASphereReflectionCapture : public AReflectionCapture
	{
	public:
		class UDrawSphereComponent*                                DrawCaptureRadius;                                       // 0x0470(0x0008) ExportObject, ZeroConstructor, InstancedReference, SubobjectReference, IsPlainOldData, NoDestructor

	public:
		class USphereReflectionCaptureComponent* GetSphereCaptureComponent();
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.RigidBodyBase
	 * Size -> 0x0000 (FullSize[0x0468] - InheritedSize[0x0468])
	 */
	class ARigidBodyBase : public AActor
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.PhysicsConstraintActor
	 * Size -> 0x0020 (FullSize[0x0488] - InheritedSize[0x0468])
	 */
	class APhysicsConstraintActor : public ARigidBodyBase
	{
	public:
		class UPhysicsConstraintComponent*                         ConstraintComp;                                          // 0x0468(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, SubobjectReference, IsPlainOldData, NoDestructor
		class AActor*                                              ConstraintActor1;                                        // 0x0470(0x0008) ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor
		class AActor*                                              ConstraintActor2;                                        // 0x0478(0x0008) ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor
		unsigned char                                              bDisableCollision : 1;                                   // 0x0480(0x0001) BIT_FIELD Deprecated, NoDestructor
		unsigned char                                              UnknownData_90LT[0x7];                                   // 0x0481(0x0007) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.PhysicsThruster
	 * Size -> 0x0008 (FullSize[0x0470] - InheritedSize[0x0468])
	 */
	class APhysicsThruster : public ARigidBodyBase
	{
	public:
		class UPhysicsThrusterComponent*                           ThrusterComponent;                                       // 0x0468(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, SubobjectReference, IsPlainOldData, NoDestructor

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.RadialForceActor
	 * Size -> 0x0008 (FullSize[0x0470] - InheritedSize[0x0468])
	 */
	class ARadialForceActor : public ARigidBodyBase
	{
	public:
		class URadialForceComponent*                               ForceComponent;                                          // 0x0468(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, SubobjectReference, IsPlainOldData, NoDestructor

	public:
		void ToggleForce();
		void FireImpulse();
		void EnableForce();
		void DisableForce();
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.SceneCapture
	 * Size -> 0x0008 (FullSize[0x0470] - InheritedSize[0x0468])
	 */
	class ASceneCapture : public AActor
	{
	public:
		class UStaticMeshComponent*                                MeshComp;                                                // 0x0468(0x0008) ExportObject, ZeroConstructor, InstancedReference, SubobjectReference, IsPlainOldData, NoDestructor

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.SceneCapture2D
	 * Size -> 0x0010 (FullSize[0x0480] - InheritedSize[0x0470])
	 */
	class ASceneCapture2D : public ASceneCapture
	{
	public:
		class USceneCaptureComponent2D*                            CaptureComponent2D;                                      // 0x0470(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, SubobjectReference, IsPlainOldData, NoDestructor
		class UDrawFrustumComponent*                               DrawFrustum;                                             // 0x0478(0x0008) ExportObject, ZeroConstructor, InstancedReference, SubobjectReference, IsPlainOldData, NoDestructor

	public:
		void OnInterpToggle(bool bEnable);
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.SceneCaptureCube
	 * Size -> 0x0010 (FullSize[0x0480] - InheritedSize[0x0470])
	 */
	class ASceneCaptureCube : public ASceneCapture
	{
	public:
		class USceneCaptureComponentCube*                          CaptureComponentCube;                                    // 0x0470(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, SubobjectReference, IsPlainOldData, NoDestructor
		class UDrawFrustumComponent*                               DrawFrustum;                                             // 0x0478(0x0008) ExportObject, ZeroConstructor, InstancedReference, SubobjectReference, IsPlainOldData, NoDestructor

	public:
		void OnInterpToggle(bool bEnable);
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.Interface_CollisionDataProvider
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class UInterface_CollisionDataProvider : public UInterface
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.PhysicsConstraintComponent
	 * Size -> 0x01A8 (FullSize[0x0380] - InheritedSize[0x01D8])
	 */
	class UPhysicsConstraintComponent : public USceneComponent
	{
	public:
		class AActor*                                              ConstraintActor1;                                        // 0x01D8(0x0008) Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor
		struct FConstrainComponentPropName                         ComponentName1;                                          // 0x01E0(0x0008) Edit
		class AActor*                                              ConstraintActor2;                                        // 0x01E8(0x0008) Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor
		struct FConstrainComponentPropName                         ComponentName2;                                          // 0x01F0(0x0008) Edit
		unsigned char                                              UnknownData_TS36[0x10];                                  // 0x01F8(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UPhysicsConstraintTemplate*                          ConstraintSetup;                                         // 0x0208(0x0008) ExportObject, ZeroConstructor, InstancedReference, Deprecated, IsPlainOldData, NoDestructor
		class FScriptMulticastDelegate                             OnConstraintBroken;                                      // 0x0210(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable
		struct FConstraintInstance                                 ConstraintInstance;                                      // 0x0220(0x0160) Edit, ContainsInstancedReference

	public:
		void SetLinearZLimit(ELinearConstraintMotion ConstraintType, float LimitSize);
		void SetLinearYLimit(ELinearConstraintMotion ConstraintType, float LimitSize);
		void SetLinearXLimit(ELinearConstraintMotion ConstraintType, float LimitSize);
		void SetLinearVelocityTarget(const struct FVector& InVelTarget);
		void SetLinearVelocityDrive(bool bEnableDriveX, bool bEnableDriveY, bool bEnableDriveZ);
		void SetLinearPositionTarget(const struct FVector& InPosTarget);
		void SetLinearPositionDrive(bool bEnableDriveX, bool bEnableDriveY, bool bEnableDriveZ);
		void SetLinearDriveParams(float InSpring, float InDamping, float InForceLimit);
		void SetDisableCollision(bool bDisableCollision);
		void SetConstraintReferencePosition(EConstraintFrame Frame, const struct FVector& RefPosition);
		void SetConstraintReferenceOrientation(EConstraintFrame Frame, const struct FVector& PriAxis, const struct FVector& SecAxis);
		void SetConstraintReferenceFrame(EConstraintFrame Frame, const struct UObject_FTransform& RefFrame);
		void SetConstrainedComponents(class UPrimitiveComponent* Component1, const class FName& BoneName1, class UPrimitiveComponent* Component2, const class FName& BoneName2);
		void SetAngularVelocityTarget(const struct FVector& InVelTarget);
		void SetAngularVelocityDrive(bool bEnableSwingDrive, bool bEnableTwistDrive);
		void SetAngularTwistLimit(EAngularConstraintMotion ConstraintType, float TwistLimitAngle);
		void SetAngularSwing2Limit(EAngularConstraintMotion MotionType, float Swing2LimitAngle);
		void SetAngularSwing1Limit(EAngularConstraintMotion MotionType, float Swing1LimitAngle);
		void SetAngularOrientationTarget(const struct FRotator& InPosTarget);
		void SetAngularOrientationDrive(bool bEnableSwingDrive, bool bEnableTwistDrive);
		void SetAngularDriveParams(float InSpring, float InDamping, float InForceLimit);
		void GetConstraintForce(struct FVector* OutLinearForce, struct FVector* OutAngularForce);
		void ConstraintBrokenSignature__DelegateSignature(int32_t ConstraintIndex);
		void BreakConstraint();
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.SkeletalMeshComponent
	 * Size -> 0x0470 (FullSize[0x0C10] - InheritedSize[0x07A0])
	 */
	class USkeletalMeshComponent : public USkinnedMeshComponent
	{
	public:
		EAnimationMode                                             AnimationMode;                                           // 0x07A0(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected
		unsigned char                                              UnknownData_AOUV[0x3];                                   // 0x07A1(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		unsigned char                                              bInterpolateRootPhys : 1;                                // 0x07A4(0x0001) BIT_FIELD Edit, NoDestructor
		unsigned char                                              UnknownData_T1JL[0x2B];                                  // 0x07A5(0x002B) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<float>                                              OriginalBonesOffsets;                                    // 0x07D0(0x0010) ZeroConstructor, Transient
		unsigned char                                              bAlignRootOnlyToGround : 1;                              // 0x07E0(0x0001) BIT_FIELD Transient, NoDestructor
		unsigned char                                              UnknownData_I5P4[0x7];                                   // 0x07E1(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<struct FIKLegInfo>                                  IkLegs;                                                  // 0x07E8(0x0010) Edit, BlueprintVisible, ZeroConstructor
		TArray<struct FIKGroundPlaneOverrideInfo>                  IkGroundPlaneOverrides;                                  // 0x07F8(0x0010) Edit, BlueprintVisible, ZeroConstructor
		TArray<struct FIKRootAdjustmentInfo>                       IkRootAdjustmentPoints;                                  // 0x0808(0x0010) Edit, BlueprintVisible, ZeroConstructor
		float                                                      IkRootAdjustmentHeightCS;                                // 0x0818(0x0004) ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		float                                                      IkRootOffsetInterpSpeed;                                 // 0x081C(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      IkRootOffsetInterpSpeedUp;                               // 0x0820(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      IkRootWorldOffsetInterpSpeed;                            // 0x0824(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      IkRootWorldOffsetInterpSpeedUp;                          // 0x0828(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      IkInterpSpeed;                                           // 0x082C(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      IkInterpSpeedUp;                                         // 0x0830(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      IkFabrikInterpSpeed;                                     // 0x0834(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      IkFeetAlignmentInterpSpeed;                              // 0x0838(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      IkGroundPlaneInterpSpeed;                                // 0x083C(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      MinHitNormalZForFeetAlignment;                           // 0x0840(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      FeetAlignmentLimit;                                      // 0x0844(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      LegLimitRatioFromCylinderHeight;                         // 0x0848(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UseWorldSpaceFeetAlignment : 1;                          // 0x084C(0x0001) BIT_FIELD Edit, BlueprintVisible, NoDestructor
		unsigned char                                              bEnableIkOnlyWhenIdle : 1;                               // 0x084C(0x0001) BIT_FIELD Edit, BlueprintVisible, NoDestructor
		unsigned char                                              UnknownData_6KVR[0x3];                                   // 0x084D(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FRotator                                            IkRootRotationOffset;                                    // 0x0850(0x000C) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		struct FVector                                             IkRootLocationOffset;                                    // 0x085C(0x000C) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      DinoIKDelayedTraceFreezeDurationMultiplier;              // 0x0868(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      DinoIKSlopeMatchingRootHeightOffset;                     // 0x086C(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              bDinoIKSlopeMatchingRootHeightOffsetMultiplier : 1;      // 0x0870(0x0001) BIT_FIELD Edit, BlueprintVisible, NoDestructor
		unsigned char                                              bDinoIKAnimationLegZOffseting : 1;                       // 0x0870(0x0001) BIT_FIELD Edit, BlueprintVisible, NoDestructor
		unsigned char                                              bDinoIKUseExperimentalInvalidTraceZeroing : 1;           // 0x0870(0x0001) BIT_FIELD Edit, BlueprintVisible, NoDestructor
		unsigned char                                              bEnableSimpleIK : 1;                                     // 0x0870(0x0001) BIT_FIELD Transient, NoDestructor
		unsigned char                                              UnknownData_MX1B[0x3];                                   // 0x0871(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      DinoIKAnimationLegZOffsetingMultiplier;                  // 0x0874(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		struct FVector                                             TwoLegVirtualHitLocationWS;                              // 0x0878(0x000C) ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		struct FVector                                             TwoLegVirtualHitLocationWSTarget;                        // 0x0884(0x000C) ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		struct FVector                                             TwoLegVirtualHitLocationCS;                              // 0x0890(0x000C) ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		unsigned char                                              bRotateFeetToAlignWithGround : 1;                        // 0x089C(0x0001) BIT_FIELD Edit, BlueprintVisible, NoDestructor
		unsigned char                                              bEnableMultiFabrik : 1;                                  // 0x089C(0x0001) BIT_FIELD BlueprintVisible, Transient, NoDestructor
		unsigned char                                              bIKRotationEnabled : 1;                                  // 0x089C(0x0001) BIT_FIELD Transient, NoDestructor
		unsigned char                                              bEnableIKTraceFreezing : 1;                              // 0x089C(0x0001) BIT_FIELD Edit, BlueprintVisible, NoDestructor
		unsigned char                                              bDinoIKUseLegLimits : 1;                                 // 0x089C(0x0001) BIT_FIELD Edit, BlueprintVisible, NoDestructor
		unsigned char                                              bDinoIKLerpFeet : 1;                                     // 0x089C(0x0001) BIT_FIELD Edit, BlueprintVisible, NoDestructor
		unsigned char                                              bDinoIKLerpLegs : 1;                                     // 0x089C(0x0001) BIT_FIELD Edit, BlueprintVisible, NoDestructor
		unsigned char                                              bDinoIKRootWorldSpaceLerpZ : 1;                          // 0x089C(0x0001) BIT_FIELD Edit, BlueprintVisible, NoDestructor
		unsigned char                                              bDinoIKSmoothGroundPlaneLerping : 1;                     // 0x089D(0x0001) BIT_FIELD Edit, BlueprintVisible, NoDestructor
		unsigned char                                              bHumanIKUseBoneModiferLegScalars : 1;                    // 0x089D(0x0001) BIT_FIELD Edit, BlueprintVisible, NoDestructor
		unsigned char                                              bApplyGroundBoneModifiers : 1;                           // 0x089D(0x0001) BIT_FIELD NoDestructor
		unsigned char                                              bAllowParallelAnimations : 1;                            // 0x089D(0x0001) BIT_FIELD Edit, BlueprintVisible, NoDestructor
		unsigned char                                              bOnlyTickWhenRenderedDontDisableOnDedicatedServer : 1;   // 0x089D(0x0001) BIT_FIELD Edit, BlueprintVisible, NoDestructor
		unsigned char                                              bSkipUpdateTransformIfBlendedPhysics : 1;                // 0x089D(0x0001) BIT_FIELD Edit, NoDestructor
		unsigned char                                              bInitOffset : 1;                                         // 0x089D(0x0001) BIT_FIELD Transient, NoDestructor
		unsigned char                                              bNeverTickOnDediServer : 1;                              // 0x089D(0x0001) BIT_FIELD Edit, NoDestructor
		unsigned char                                              bAlwaysTeleportKinematic : 1;                            // 0x089E(0x0001) BIT_FIELD Edit, NoDestructor
		unsigned char                                              bForceDisablePhysicsOnDediServer : 1;                    // 0x089E(0x0001) BIT_FIELD Edit, NoDestructor
		unsigned char                                              bForceDisablePhysicsOnDediServerAllowRagdoll : 1;        // 0x089E(0x0001) BIT_FIELD Edit, NoDestructor
		unsigned char                                              bBasedPawnsTriggerChildTick : 1;                         // 0x089E(0x0001) BIT_FIELD Edit, NoDestructor
		unsigned char                                              bPhysicsRequiredOnDediServer : 1;                        // 0x089E(0x0001) BIT_FIELD Edit, NoDestructor
		unsigned char                                              bModifyBoneAnimNodeUseCurrentBoneModifiers : 1;          // 0x089E(0x0001) BIT_FIELD Edit, NoDestructor
		unsigned char                                              bAlwaysForceUpdateKinematicsOnDedicatedServer : 1;       // 0x089E(0x0001) BIT_FIELD Edit, NoDestructor
		unsigned char                                              bForceSimpleIK : 1;                                      // 0x089E(0x0001) BIT_FIELD Edit, NoDestructor
		unsigned char                                              bFreezeGroundPlaneIK : 1;                                // 0x089F(0x0001) BIT_FIELD BlueprintVisible, Transient, NoDestructor
		unsigned char                                              bRotateToMatchWalkingSlope : 1;                          // 0x089F(0x0001) BIT_FIELD Edit, BlueprintVisible, NoDestructor
		float                                                      DistanceFromGroundToStartIK;                             // 0x08A0(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      DistanceFromGroundToStartIKBias;                         // 0x08A4(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		int32_t                                                    MaxIterations;                                           // 0x08A8(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      MatchSlopeRotationSpeed;                                 // 0x08AC(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      RootPitchRotationLimit;                                  // 0x08B0(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      RootRollRotationLimit;                                   // 0x08B4(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      ForceUpdateValuesTimeLimit;                              // 0x08B8(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      RootOffset;                                              // 0x08BC(0x0004) ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		struct FRotator                                            RootRotationOffset;                                      // 0x08C0(0x000C) ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_Q005[0x4];                                   // 0x08CC(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		double                                                     LastIkUpdateTime;                                        // 0x08D0(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_RSEE[0xC0];                                  // 0x08D8(0x00C0) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UClass*                                              AnimBlueprintGeneratedClass;                             // 0x0998(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor
		class UAnimInstance*                                       AnimScriptInstance;                                      // 0x09A0(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		struct FSingleAnimationPlayData                            AnimationData;                                           // 0x09A8(0x0020) Edit, BlueprintVisible
		unsigned char                                              UnknownData_09J1[0x18];                                  // 0x09C8(0x0018) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<struct UObject_FTransform>                          CachedLocalAtoms;                                        // 0x09E0(0x0010) ZeroConstructor, Transient
		TArray<struct UObject_FTransform>                          CachedSpaceBases;                                        // 0x09F0(0x0010) ZeroConstructor, Transient
		float                                                      GlobalAnimRateScale;                                     // 0x0A00(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay
		unsigned char                                              bHasValidBodies : 1;                                     // 0x0A04(0x0001) BIT_FIELD Transient, NoDestructor
		unsigned char                                              UnknownData_6MO5[0x3];                                   // 0x0A05(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		EKinematicBonesUpdateToPhysics                             KinematicBonesUpdateType;                                // 0x0A08(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay
		unsigned char                                              UnknownData_UMRD[0x3];                                   // 0x0A09(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		unsigned char                                              bBlendPhysics : 1;                                       // 0x0A0C(0x0001) BIT_FIELD Transient, NoDestructor
		unsigned char                                              bEnablePhysicsOnDedicatedServer : 1;                     // 0x0A0C(0x0001) BIT_FIELD NoDestructor
		unsigned char                                              bUpdateJointsFromAnimation : 1;                          // 0x0A0C(0x0001) BIT_FIELD Edit, BlueprintVisible, NoDestructor, AdvancedDisplay
		unsigned char                                              bDisableClothSimulation : 1;                             // 0x0A0C(0x0001) BIT_FIELD Edit, BlueprintVisible, NoDestructor
		unsigned char                                              bCollideWithEnvironment : 1;                             // 0x0A0C(0x0001) BIT_FIELD Edit, BlueprintVisible, NoDestructor
		unsigned char                                              bCollideWithAttachedChildren : 1;                        // 0x0A0C(0x0001) BIT_FIELD Edit, BlueprintVisible, NoDestructor
		unsigned char                                              bLocalSpaceSimulation : 1;                               // 0x0A0C(0x0001) BIT_FIELD Edit, BlueprintVisible, NoDestructor
		unsigned char                                              bSetAttachmentMasterPoseComponent : 1;                   // 0x0A0C(0x0001) BIT_FIELD Edit, BlueprintVisible, NoDestructor
		unsigned char                                              bForceTickDisabled : 1;                                  // 0x0A0D(0x0001) BIT_FIELD Edit, NoDestructor
		unsigned char                                              UnknownData_ZXKX[0x2];                                   // 0x0A0E(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      ComponentMassScale;                                      // 0x0A10(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      MinLinearDamping;                                        // 0x0A14(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		float                                                      MinAngularDamping;                                       // 0x0A18(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		unsigned char                                              bClothMorphTarget : 1;                                   // 0x0A1C(0x0001) BIT_FIELD Edit, NoDestructor
		unsigned char                                              bResetAfterTeleport : 1;                                 // 0x0A1C(0x0001) BIT_FIELD Edit, BlueprintVisible, NoDestructor
		unsigned char                                              bSuppressAnimNotifies : 1;                               // 0x0A1C(0x0001) BIT_FIELD Edit, NoDestructor
		unsigned char                                              UnknownData_D5LS : 1;                                    // 0x0A1C(0x0001) BIT_FIELD (PADDING)
		unsigned char                                              bUseAutomaticAnimationStaggering : 1;                    // 0x0A1C(0x0001) BIT_FIELD Edit, NoDestructor
		unsigned char                                              UnknownData_DTO4[0x3];                                   // 0x0A1D(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      TeleportDistanceThreshold;                               // 0x0A20(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      TeleportRotationThreshold;                               // 0x0A24(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      ClothBlendWeight;                                        // 0x0A28(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_2SWB[0x4];                                   // 0x0A2C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FVector                                             RootBoneTranslation;                                     // 0x0A30(0x000C) ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		unsigned char                                              bNoSkeletonUpdate : 1;                                   // 0x0A3C(0x0001) BIT_FIELD Edit, BlueprintVisible, NoDestructor, AdvancedDisplay
		unsigned char                                              bTickAnimationWhenNotRendered : 1;                       // 0x0A3C(0x0001) BIT_FIELD Deprecated, NoDestructor
		unsigned char                                              bPauseAnims : 1;                                         // 0x0A3C(0x0001) BIT_FIELD Edit, BlueprintVisible, NoDestructor, AdvancedDisplay
		unsigned char                                              bEnablePerPolyCollision : 1;                             // 0x0A3C(0x0001) BIT_FIELD Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay
		unsigned char                                              UnknownData_BSVZ[0x3];                                   // 0x0A3D(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UBodySetup*                                          BodySetup;                                               // 0x0A40(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		unsigned char                                              bAutonomousTickPose : 1;                                 // 0x0A48(0x0001) BIT_FIELD Transient, NoDestructor
		unsigned char                                              bForceRefpose : 1;                                       // 0x0A48(0x0001) BIT_FIELD NoDestructor
		unsigned char                                              bOldForceRefPose : 1;                                    // 0x0A48(0x0001) BIT_FIELD NoDestructor
		unsigned char                                              bShowPrePhysBones : 1;                                   // 0x0A48(0x0001) BIT_FIELD NoDestructor
		unsigned char                                              bRequiredBonesUpToDate : 1;                              // 0x0A48(0x0001) BIT_FIELD Transient, NoDestructor
		unsigned char                                              bAnimTreeInitialised : 1;                                // 0x0A48(0x0001) BIT_FIELD Transient, NoDestructor
		unsigned char                                              bEnableLineCheckWithBounds : 1;                          // 0x0A48(0x0001) BIT_FIELD NoDestructor
		unsigned char                                              bUpdatedKinematics : 1;                                  // 0x0A48(0x0001) BIT_FIELD Transient, NoDestructor
		unsigned char                                              bUpdatedKinematicsOnce : 1;                              // 0x0A49(0x0001) BIT_FIELD Transient, NoDestructor
		unsigned char                                              bSetKinematicsSleeping : 1;                              // 0x0A49(0x0001) BIT_FIELD Transient, NoDestructor
		unsigned char                                              bDedicatedForceTickingEveryFrame : 1;                    // 0x0A49(0x0001) BIT_FIELD Edit, NoDestructor
		unsigned char                                              bSleepKinematicsWhenNotRefreshingBones : 1;              // 0x0A49(0x0001) BIT_FIELD Edit, NoDestructor
		unsigned char                                              UnknownData_G1L6[0x6];                                   // 0x0A4A(0x0006) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		ECollisionEnabled                                          PreSleepingKinematicsCollisionType;                      // 0x0A50(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_KWEM[0x3];                                   // 0x0A51(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FVector                                             LineCheckBoundsScale;                                    // 0x0A54(0x000C) ZeroConstructor, IsPlainOldData, NoDestructor
		class FScriptMulticastDelegate                             OnConstraintBroken;                                      // 0x0A60(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable
		unsigned char                                              UnknownData_OGVS[0x158];                                 // 0x0A70(0x0158) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UAnimSequence*                                       SequenceToPlay;                                          // 0x0BC8(0x0008) ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor
		class UAnimationAsset*                                     AnimToPlay;                                              // 0x0BD0(0x0008) ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor
		unsigned char                                              bDefaultLooping : 1;                                     // 0x0BD8(0x0001) BIT_FIELD Deprecated, NoDestructor
		unsigned char                                              bDefaultPlaying : 1;                                     // 0x0BD8(0x0001) BIT_FIELD Deprecated, NoDestructor
		unsigned char                                              UnknownData_UT6C[0x3];                                   // 0x0BD9(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      DefaultPosition;                                         // 0x0BDC(0x0004) ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor
		float                                                      DefaultPlayRate;                                         // 0x0BE0(0x0004) ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_Q6S9[0xC];                                   // 0x0BE4(0x000C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		double                                                     LastTickTime;                                            // 0x0BF0(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		double                                                     PreventSoundCuesTime;                                    // 0x0BF8(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_X6Z1[0x10];                                  // 0x0C00(0x0010) MISSED OFFSET (PADDING)

	public:
		FVector GetBoneWorldPos(const int32_t& boneId) const;
		void Stop();
		void SetupBetweenAnimationBlueprintBlending();
		void SetPosition(float InPos, bool bFireNotifies);
		void SetPlayRate(float Rate);
		void SetPhysicsBlendWeight(float PhysicsBlendWeight);
		void SetMorphTarget(const class FName& MorphTargetName, float Value);
		void SetEnablePhysicsBlending(bool bNewBlendPhysics);
		void SetClothMaxDistanceScale(float Scale);
		void SetAnimInstanceClass(class UClass* NewClass);
		void SetAnimationMode(EAnimationMode InAnimationMode);
		void SetAnimation(class UAnimationAsset* NewAnimToPlay);
		void SetAllBodiesSimulatePhysics(bool bNewSimulate);
		void SetAllBodiesPhysicsBlendWeight(float PhysicsBlendWeight, bool bSkipCustomPhysicsType);
		void SetAllBodiesBelowSimulatePhysics(const class FName& InBoneName, bool bNewSimulate);
		void SetAllBodiesBelowPhysicsBlendWeight(const class FName& InBoneName, float PhysicsBlendWeight, bool bSkipCustomPhysicsType);
		void ResetClothTeleportMode();
		void ResetAllBodiesSimulatePhysics();
		void PlayAnimation(class UAnimationAsset* NewAnimToPlay, bool bLooping);
		void Play(bool bLooping);
		bool IsPlayingMontage(class UAnimMontage* Montage, float TimeFromEndToConsiderFinished);
		bool IsPlayingAnimationMontagesOnSlotName(const class FName& SlotName);
		bool IsPlaying();
		void IncrementIKLegMute(int32_t LegIndex);
		TArray<class APawn*> GetTrueBasedPawns();
		float GetPosition();
		float GetPlayRate();
		float GetMorphTarget(const class FName& MorphTargetName);
		class FName GetFirstBoneWithChildren();
		float GetClothMaxDistanceScale();
		class UAnimInstance* GetAnimInstance();
		EAnimationMode GetAnimationMode();
		void ForceClothNextUpdateTeleportAndReset();
		void ForceClothNextUpdateTeleport();
		void FlushMorphTargets();
		void DecrementIKLegMute(int32_t LegIndex);
		void ClearMorphTargets();
		bool BPValidBoneToUnhide(int32_t BoneIndex);
		void BPTickPose(float DeltaTime);
		void BPSetBoneModifiers(TArray<struct FBoneModifierNamed> NamedBoneModifiers);
		void BPRefreshBoneTransforms();
		void AccumulateAllBodiesBelowPhysicsBlendWeight(const class FName& InBoneName, float AddPhysicsBlendWeight, bool bSkipCustomPhysicsType);
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.MatineeAnimInterface
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class UMatineeAnimInterface : public UInterface
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.SkeletalMeshActor
	 * Size -> 0x0040 (FullSize[0x04A8] - InheritedSize[0x0468])
	 */
	class ASkeletalMeshActor : public AActor
	{
	public:
		unsigned char                                              UnknownData_1ESN[0x8];                                   // 0x0468(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		unsigned char                                              bShouldDoAnimNotifies : 1;                               // 0x0470(0x0001) BIT_FIELD Edit, BlueprintVisible, NoDestructor, AdvancedDisplay
		unsigned char                                              bWakeOnLevelStart : 1;                                   // 0x0470(0x0001) BIT_FIELD Deprecated, NoDestructor
		unsigned char                                              UnknownData_VT8K[0x7];                                   // 0x0471(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class USkeletalMeshComponent*                              SkeletalMeshComponent;                                   // 0x0478(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, SubobjectReference, IsPlainOldData, NoDestructor
		class USkeletalMesh*                                       ReplicatedMesh;                                          // 0x0480(0x0008) Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor
		class UPhysicsAsset*                                       ReplicatedPhysAsset;                                     // 0x0488(0x0008) Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor
		class UMaterialInterface*                                  ReplicatedMaterial0;                                     // 0x0490(0x0008) Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor
		class UMaterialInterface*                                  ReplicatedMaterial1;                                     // 0x0498(0x0008) Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor
		unsigned char                                              UnknownData_B9RP[0x8];                                   // 0x04A0(0x0008) MISSED OFFSET (PADDING)

	public:
		void OnRep_ReplicatedPhysAsset();
		void OnRep_ReplicatedMesh();
		void OnRep_ReplicatedMaterial1();
		void OnRep_ReplicatedMaterial0();
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.StaticMeshActor
	 * Size -> 0x0010 (FullSize[0x0478] - InheritedSize[0x0468])
	 */
	class AStaticMeshActor : public AActor
	{
	public:
		class UStaticMeshComponent*                                StaticMeshComponent;                                     // 0x0468(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, SubobjectReference, IsPlainOldData, NoDestructor
		unsigned char                                              bDisableMeshOptimizer : 1;                               // 0x0470(0x0001) BIT_FIELD Edit, BlueprintVisible, NoDestructor
		unsigned char                                              UnknownData_PUIE[0x3];                                   // 0x0471(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       bStaticMeshReplicateMovement;                            // 0x0474(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay
		unsigned char                                              UnknownData_PD15[0x3];                                   // 0x0475(0x0003) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.InteractiveFoliageActor
	 * Size -> 0x0060 (FullSize[0x04D8] - InheritedSize[0x0478])
	 */
	class AInteractiveFoliageActor : public AStaticMeshActor
	{
	public:
		class UCapsuleComponent*                                   CapsuleComponent;                                        // 0x0478(0x0008) ExportObject, ZeroConstructor, InstancedReference, SubobjectReference, IsPlainOldData, NoDestructor
		struct FVector                                             TouchingActorEntryPosition;                              // 0x0480(0x000C) ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		struct FVector                                             FoliageVelocity;                                         // 0x048C(0x000C) ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		struct FVector                                             FoliageForce;                                            // 0x0498(0x000C) ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		struct FVector                                             FoliagePosition;                                         // 0x04A4(0x000C) ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		float                                                      FoliageDamageImpulseScale;                               // 0x04B0(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      FoliageTouchImpulseScale;                                // 0x04B4(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      FoliageStiffness;                                        // 0x04B8(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      FoliageStiffnessQuadratic;                               // 0x04BC(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      FoliageDamping;                                          // 0x04C0(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      MaxDamageImpulse;                                        // 0x04C4(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      MaxTouchImpulse;                                         // 0x04C8(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      MaxForce;                                                // 0x04CC(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      Mass;                                                    // 0x04D0(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_D5QE[0x4];                                   // 0x04D4(0x0004) MISSED OFFSET (PADDING)

	public:
		void CapsuleTouched(class AActor* Other, class UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex, bool bFromSweep, const struct FHitResult& OverlapInfo);
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.TargetPoint
	 * Size -> 0x0000 (FullSize[0x0468] - InheritedSize[0x0468])
	 */
	class ATargetPoint : public AActor
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.TextRenderActor
	 * Size -> 0x0008 (FullSize[0x0470] - InheritedSize[0x0468])
	 */
	class ATextRenderActor : public AActor
	{
	public:
		class UTextRenderComponent*                                TextRender;                                              // 0x0468(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, SubobjectReference, IsPlainOldData, NoDestructor

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.TriggerBase
	 * Size -> 0x0010 (FullSize[0x0478] - InheritedSize[0x0468])
	 */
	class ATriggerBase : public AActor
	{
	public:
		class UShapeComponent*                                     CollisionComponent;                                      // 0x0468(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, SubobjectReference, IsPlainOldData, NoDestructor
		class UBillboardComponent*                                 SpriteComponent;                                         // 0x0470(0x0008) ExportObject, ZeroConstructor, InstancedReference, SubobjectReference, IsPlainOldData, NoDestructor

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.TriggerBox
	 * Size -> 0x0000 (FullSize[0x0478] - InheritedSize[0x0478])
	 */
	class ATriggerBox : public ATriggerBase
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.TriggerCapsule
	 * Size -> 0x0000 (FullSize[0x0478] - InheritedSize[0x0478])
	 */
	class ATriggerCapsule : public ATriggerBase
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.TriggerSphere
	 * Size -> 0x0000 (FullSize[0x0478] - InheritedSize[0x0478])
	 */
	class ATriggerSphere : public ATriggerBase
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.TrueSkyActorParent
	 * Size -> 0x0000 (FullSize[0x0468] - InheritedSize[0x0468])
	 */
	class ATrueSkyActorParent : public AActor
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.VectorFieldVolume
	 * Size -> 0x0008 (FullSize[0x0470] - InheritedSize[0x0468])
	 */
	class AVectorFieldVolume : public AActor
	{
	public:
		class UVectorFieldComponent*                               VectorFieldComponent;                                    // 0x0468(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, SubobjectReference, IsPlainOldData, NoDestructor

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.ApplicationLifecycleComponent
	 * Size -> 0x0050 (FullSize[0x0128] - InheritedSize[0x00D8])
	 */
	class UApplicationLifecycleComponent : public UActorComponent
	{
	public:
		class FScriptMulticastDelegate                             ApplicationWillDeactivateDelegate;                       // 0x00D8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable
		class FScriptMulticastDelegate                             ApplicationHasReactivatedDelegate;                       // 0x00E8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable
		class FScriptMulticastDelegate                             ApplicationWillEnterBackgroundDelegate;                  // 0x00F8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable
		class FScriptMulticastDelegate                             ApplicationHasEnteredForegroundDelegate;                 // 0x0108(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable
		class FScriptMulticastDelegate                             ApplicationWillTerminateDelegate;                        // 0x0118(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable

	public:
		void ApplicationLifetimeDelegate__DelegateSignature();
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.NavigationSystem
	 * Size -> 0x02C0 (FullSize[0x02E8] - InheritedSize[0x0028])
	 */
	class UNavigationSystem : public UBlueprintFunctionLibrary
	{
	public:
		class ANavigationData*                                     MainNavData;                                             // 0x0028(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              bAutoCreateNavigationData : 1;                           // 0x0030(0x0001) BIT_FIELD Edit, Config, NoDestructor
		unsigned char                                              bBuildNavigationAtRuntime : 1;                           // 0x0030(0x0001) BIT_FIELD Edit, Config, NoDestructor
		unsigned char                                              bInitialBuildingLocked : 1;                              // 0x0030(0x0001) BIT_FIELD Edit, Config, NoDestructor
		unsigned char                                              UnknownData_13DA : 1;                                    // 0x0030(0x0001) BIT_FIELD (PADDING)
		unsigned char                                              bAddPlayersToGenerationSeeds : 1;                        // 0x0030(0x0001) BIT_FIELD Edit, Config, NoDestructor
		unsigned char                                              bSkipAgentHeightCheckWhenPickingNavData : 1;             // 0x0030(0x0001) BIT_FIELD Edit, Config, NoDestructor
		unsigned char                                              UnknownData_2VAP[0x7];                                   // 0x0031(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<struct FNavDataConfig>                              SupportedAgents;                                         // 0x0038(0x0010) Edit, ZeroConstructor, Config
		float                                                      DirtyAreasUpdateFreq;                                    // 0x0048(0x0004) Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_OV88[0x4];                                   // 0x004C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class ANavigationData*>                             NavDataSet;                                              // 0x0050(0x0010) ZeroConstructor
		TArray<class ANavigationData*>                             NavDataRegistrationQueue;                                // 0x0060(0x0010) ZeroConstructor, Transient
		unsigned char                                              UnknownData_E0ZD[0x50];                                  // 0x0070(0x0050) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class ANavMeshBoundsVolume*>                        PendingNavVolumeUpdates;                                 // 0x00C0(0x0010) ZeroConstructor, Transient
		class FScriptMulticastDelegate                             OnNavDataRegisteredEvent;                                // 0x00D0(0x0010) ZeroConstructor, Transient, InstancedReference
		TArray<struct FStringClassReference>                       RequiredNavigationDataClassNames;                        // 0x00E0(0x0010) ZeroConstructor, Config
		unsigned char                                              UnknownData_ZWJK[0x1F8];                                 // 0x00F0(0x01F8) MISSED OFFSET (PADDING)

	public:
		void STATIC_SimpleMoveToLocation(class AController* Controller, const struct FVector& Goal);
		void STATIC_SimpleMoveToActor(class AController* Controller, class AActor* Goal);
		struct FVector STATIC_ProjectPointToNavigationEx(class UObject* WorldContext, const struct FVector& Point, const struct FVector& Extent, class ANavigationData* NavData, class UClass* FilterClass);
		struct FVector STATIC_ProjectPointToNavigation(class UObject* WorldContext, const struct FVector& Point, class ANavigationData* NavData, class UClass* FilterClass);
		void OnNavDataRegistered__DelegateSignature(class ANavigationData* NavData);
		bool STATIC_NavigationRaycast(class UObject* WorldContext, const struct FVector& RayStart, const struct FVector& RayEnd, struct FVector* HitLocation, class UClass* FilterClass, class AController* Querier);
		bool STATIC_IsNavigationBeingBuilt(class UObject* WorldContext);
		struct FVector STATIC_GetRandomReachablePointInMinMaxRadius(class UObject* WorldContext, const struct FVector& Origin, float MinRadius, float MaxRadius, const struct FRandomStream& RandStream, const struct FVector& PathDirection, float DotLimit, class ANavigationData* NavData, class UClass* FilterClass);
		struct FVector STATIC_GetRandomPointInRadius(class UObject* WorldContext, const struct FVector& Origin, float Radius, class ANavigationData* NavData, class UClass* FilterClass);
		struct FVector STATIC_GetRandomPoint(class UObject* WorldContext, class ANavigationData* NavData, class UClass* FilterClass);
		ENavigationQueryResult STATIC_GetPathLength(class UObject* WorldContext, const struct FVector& PathStart, const struct FVector& PathEnd, float* PathLength, class ANavigationData* NavData, class UClass* FilterClass);
		ENavigationQueryResult STATIC_GetPathCost(class UObject* WorldContext, const struct FVector& PathStart, const struct FVector& PathEnd, float* PathCost, class ANavigationData* NavData, class UClass* FilterClass);
		class UNavigationPath* STATIC_FindPathToLocationSynchronously(class UObject* WorldContext, const struct FVector& PathStart, const struct FVector& PathEnd, class AActor* PathfindingContext, class UClass* FilterClass);
		class UNavigationPath* STATIC_FindPathToActorSynchronously(class UObject* WorldContext, const struct FVector& PathStart, class AActor* GoalActor, float TetherDistance, class AActor* PathfindingContext, class UClass* FilterClass);
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.NetworkPredictionInterface
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class UNetworkPredictionInterface : public UInterface
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.FloatingPawnMovement
	 * Size -> 0x0018 (FullSize[0x0158] - InheritedSize[0x0140])
	 */
	class UFloatingPawnMovement : public UPawnMovementComponent
	{
	public:
		float                                                      MaxSpeed;                                                // 0x0140(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      Acceleration;                                            // 0x0144(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      Deceleration;                                            // 0x0148(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      MaxFrameMovement;                                        // 0x014C(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              bPositionCorrected : 1;                                  // 0x0150(0x0001) BIT_FIELD Transient, NoDestructor, Protected
		unsigned char                                              UnknownData_JL7R[0x7];                                   // 0x0151(0x0007) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.SpectatorPawnMovement
	 * Size -> 0x0008 (FullSize[0x0160] - InheritedSize[0x0158])
	 */
	class USpectatorPawnMovement : public UFloatingPawnMovement
	{
	public:
		unsigned char                                              bIgnoreTimeDilation : 1;                                 // 0x0158(0x0001) BIT_FIELD NoDestructor
		unsigned char                                              UnknownData_H05K[0x7];                                   // 0x0159(0x0007) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.WheeledVehicleMovementComponent
	 * Size -> 0x00E8 (FullSize[0x0228] - InheritedSize[0x0140])
	 */
	class UWheeledVehicleMovementComponent : public UPawnMovementComponent
	{
	public:
		TArray<struct FWheelSetup>                                 WheelSetups;                                             // 0x0140(0x0010) Edit, ZeroConstructor
		float                                                      Mass;                                                    // 0x0150(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      DragCoefficient;                                         // 0x0154(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      ChassisWidth;                                            // 0x0158(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      ChassisHeight;                                           // 0x015C(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      DragArea;                                                // 0x0160(0x0004) ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		float                                                      EstimatedMaxEngineSpeed;                                 // 0x0164(0x0004) ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		float                                                      MaxEngineRPM;                                            // 0x0168(0x0004) ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		float                                                      DebugDragMagnitude;                                      // 0x016C(0x0004) ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		struct FVector                                             COMOffset;                                               // 0x0170(0x000C) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay
		struct FVector                                             InertiaTensorScale;                                      // 0x017C(0x000C) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay
		float                                                      MinNormalizedTireLoad;                                   // 0x0188(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay
		float                                                      MinNormalizedTireLoadFiltered;                           // 0x018C(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay
		float                                                      MaxNormalizedTireLoad;                                   // 0x0190(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay
		float                                                      MaxNormalizedTireLoadFiltered;                           // 0x0194(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay
		TArray<class UVehicleWheel*>                               Wheels;                                                  // 0x0198(0x0010) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, DuplicateTransient
		unsigned char                                              UnknownData_7UQ7[0x18];                                  // 0x01A8(0x0018) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		ECollisionChannel                                          CollisionChannel;                                        // 0x01C0(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_LNDB[0x3];                                   // 0x01C1(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FReplicatedVehicleState                             ReplicatedState;                                         // 0x01C4(0x0014) Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_JPPN[0x4];                                   // 0x01D8(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      RawSteeringInput;                                        // 0x01DC(0x0004) ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		float                                                      RawThrottleInput;                                        // 0x01E0(0x0004) ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		unsigned char                                              bRawHandbrakeInput : 1;                                  // 0x01E4(0x0001) BIT_FIELD Transient, NoDestructor
		unsigned char                                              bRawGearUpInput : 1;                                     // 0x01E4(0x0001) BIT_FIELD Transient, NoDestructor
		unsigned char                                              bRawGearDownInput : 1;                                   // 0x01E4(0x0001) BIT_FIELD Transient, NoDestructor
		unsigned char                                              UnknownData_M1Z5[0x3];                                   // 0x01E5(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      SteeringInput;                                           // 0x01E8(0x0004) ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		float                                                      ThrottleInput;                                           // 0x01EC(0x0004) ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		float                                                      BrakeInput;                                              // 0x01F0(0x0004) ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		float                                                      HandbrakeInput;                                          // 0x01F4(0x0004) ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		float                                                      IdleBrakeInput;                                          // 0x01F8(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      StopThreshold;                                           // 0x01FC(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      WrongDirectionThreshold;                                 // 0x0200(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		struct FVehicleInputRate                                   ThrottleInputRate;                                       // 0x0204(0x0008) Edit, AdvancedDisplay
		struct FVehicleInputRate                                   BrakeInputRate;                                          // 0x020C(0x0008) Edit, AdvancedDisplay
		struct FVehicleInputRate                                   HandbrakeInputRate;                                      // 0x0214(0x0008) Edit, AdvancedDisplay
		struct FVehicleInputRate                                   SteeringInputRate;                                       // 0x021C(0x0008) Edit, AdvancedDisplay
		unsigned char                                              UnknownData_N5DR[0x4];                                   // 0x0224(0x0004) MISSED OFFSET (PADDING)

	public:
		void SetUseAutoGears(bool bUseAuto);
		void SetThrottleInput(float Throttle);
		void SetTargetGear(int32_t GearNum, bool bImmediate);
		void SetSteeringInput(float Steering);
		void SetHandbrakeInput(bool bNewHandbrake);
		void SetGearUp(bool bNewGearUp);
		void SetGearDown(bool bNewGearDown);
		void ServerUpdateState(float InSteeringInput, float InThrottleInput, float InBrakeInput, float InHandbrakeInput, int32_t CurrentGear);
		bool GetUseAutoGears();
		float GetThrottleInput();
		int32_t GetTargetGear();
		float GetForwardSpeed();
		float GetEngineRotationSpeed();
		float GetEngineMaxRotationSpeed();
		int32_t GetCurrentGear();
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.WheeledVehicleMovementComponent4W
	 * Size -> 0x0150 (FullSize[0x0378] - InheritedSize[0x0228])
	 */
	class UWheeledVehicleMovementComponent4W : public UWheeledVehicleMovementComponent
	{
	public:
		struct FVehicleEngineData                                  EngineSetup;                                             // 0x0228(0x0088) Edit
		struct FVehicleDifferential4WData                          DifferentialSetup;                                       // 0x02B0(0x001C) Edit
		unsigned char                                              UnknownData_4Q4J[0x4];                                   // 0x02CC(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FVehicleTransmissionData                            TransmissionSetup;                                       // 0x02D0(0x0030) Edit
		struct FRuntimeFloatCurve                                  SteeringCurve;                                           // 0x0300(0x0070) Edit
		float                                                      AckermannAccuracy;                                       // 0x0370(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay
		unsigned char                                              UnknownData_LQXK[0x4];                                   // 0x0374(0x0004) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.ProjectileMovementComponent
	 * Size -> 0x0078 (FullSize[0x0190] - InheritedSize[0x0118])
	 */
	class UProjectileMovementComponent : public UMovementComponent
	{
	public:
		float                                                      MinLifespanToUpdate;                                     // 0x0118(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      InitialSpeed;                                            // 0x011C(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      MaxSpeed;                                                // 0x0120(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              bRotationFollowsVelocity : 1;                            // 0x0124(0x0001) BIT_FIELD Edit, BlueprintVisible, NoDestructor
		unsigned char                                              bShouldBounce : 1;                                       // 0x0124(0x0001) BIT_FIELD Edit, BlueprintVisible, NoDestructor
		unsigned char                                              bInitialVelocityInLocalSpace : 1;                        // 0x0124(0x0001) BIT_FIELD Edit, BlueprintVisible, NoDestructor
		unsigned char                                              bForceSubStepping : 1;                                   // 0x0124(0x0001) BIT_FIELD Edit, BlueprintVisible, NoDestructor
		unsigned char                                              bTriggerBounceImpactNotification : 1;                    // 0x0124(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		unsigned char                                              bIsHomingProjectile : 1;                                 // 0x0124(0x0001) BIT_FIELD Edit, BlueprintVisible, NoDestructor
		unsigned char                                              UnknownData_E34F[0x3];                                   // 0x0125(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      ProjectileDampingFactor;                                 // 0x0128(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      FallingProjectileDampingFactor;                          // 0x012C(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      ProjectileGravityScale;                                  // 0x0130(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      Buoyancy;                                                // 0x0134(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor
		struct FVector                                             PreviousVelocity;                                        // 0x0138(0x000C) ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      Bounciness;                                              // 0x0144(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      Friction;                                                // 0x0148(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      BounceVelocityStopSimulatingThreshold;                   // 0x014C(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		class FScriptMulticastDelegate                             OnProjectileBounce;                                      // 0x0150(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable
		class FScriptMulticastDelegate                             OnProjectileStop;                                        // 0x0160(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable
		float                                                      HomingAccelerationMagnitude;                             // 0x0170(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		TWeakObjectPtr<class USceneComponent>                      HomingTargetComponent;                                   // 0x0174(0x0008) Edit, BlueprintVisible, ExportObject, ZeroConstructor, DisableEditOnTemplate, EditConst, InstancedReference, IsPlainOldData, NoDestructor
		struct FVector                                             HomingTargetComponentOffset;                             // 0x017C(0x000C) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor
		float                                                      MaxSimulationTimeStep;                                   // 0x0188(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		int32_t                                                    MaxSimulationIterations;                                 // 0x018C(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay

	public:
		void StopSimulating(const struct FHitResult& HitResult);
		void SetVelocityInLocalSpace(const struct FVector& NewVelocity);
		void OnProjectileStopDelegate__DelegateSignature(const struct FHitResult& ImpactResult);
		void OnProjectileBounceDelegate__DelegateSignature(const struct FHitResult& ImpactResult, const struct FVector& ImpactVelocity);
		struct FVector LimitVelocity(const struct FVector& NewVelocity);
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.RotatingMovementComponent
	 * Size -> 0x0020 (FullSize[0x0138] - InheritedSize[0x0118])
	 */
	class URotatingMovementComponent : public UMovementComponent
	{
	public:
		struct FRotator                                            RotationRate;                                            // 0x0118(0x000C) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		struct FVector                                             PivotTranslation;                                        // 0x0124(0x000C) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              bRotationInLocalSpace : 1;                               // 0x0130(0x0001) BIT_FIELD Edit, BlueprintVisible, NoDestructor
		unsigned char                                              UnknownData_5H06[0x7];                                   // 0x0131(0x0007) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.NavRelevantComponent
	 * Size -> 0x0028 (FullSize[0x0100] - InheritedSize[0x00D8])
	 */
	class UNavRelevantComponent : public UActorComponent
	{
	public:
		unsigned char                                              UnknownData_TAHZ[0x24];                                  // 0x00D8(0x0024) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		unsigned char                                              bNavigationRelevant : 1;                                 // 0x00FC(0x0001) BIT_FIELD NoDestructor, Protected
		unsigned char                                              UnknownData_5VLN[0x3];                                   // 0x00FD(0x0003) MISSED OFFSET (PADDING)

	public:
		void SetNavigationRelevancy(bool bRelevant);
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.NavLinkCustomInterface
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class UNavLinkCustomInterface : public UInterface
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.NavLinkCustomComponent
	 * Size -> 0x0090 (FullSize[0x0190] - InheritedSize[0x0100])
	 */
	class UNavLinkCustomComponent : public UNavRelevantComponent
	{
	public:
		unsigned char                                              UnknownData_IDG2[0x8];                                   // 0x0100(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		uint32_t                                                   NavLinkUserId;                                           // 0x0108(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, Protected
		unsigned char                                              UnknownData_L4S6[0x4];                                   // 0x010C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UClass*                                              EnabledAreaClass;                                        // 0x0110(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected
		class UClass*                                              DisabledAreaClass;                                       // 0x0118(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected
		struct FVector                                             LinkRelativeStart;                                       // 0x0120(0x000C) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected
		struct FVector                                             LinkRelativeEnd;                                         // 0x012C(0x000C) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected
		ENavLinkDirection                                          LinkDirection;                                           // 0x0138(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected
		unsigned char                                              UnknownData_RBOM[0x3];                                   // 0x0139(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		unsigned char                                              bLinkEnabled : 1;                                        // 0x013C(0x0001) BIT_FIELD Edit, NoDestructor, Protected
		unsigned char                                              bNotifyWhenEnabled : 1;                                  // 0x013C(0x0001) BIT_FIELD Edit, NoDestructor, Protected
		unsigned char                                              bNotifyWhenDisabled : 1;                                 // 0x013C(0x0001) BIT_FIELD Edit, NoDestructor, Protected
		unsigned char                                              bCreateBoxObstacle : 1;                                  // 0x013C(0x0001) BIT_FIELD Edit, NoDestructor, Protected
		unsigned char                                              UnknownData_LJW8[0x3];                                   // 0x013D(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FVector                                             ObstacleOffset;                                          // 0x0140(0x000C) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected
		struct FVector                                             ObstacleExtent;                                          // 0x014C(0x000C) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected
		class UClass*                                              ObstacleAreaClass;                                       // 0x0158(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected
		float                                                      BroadcastRadius;                                         // 0x0160(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected
		float                                                      BroadcastInterval;                                       // 0x0164(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected
		ECollisionChannel                                          BroadcastChannel;                                        // 0x0168(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected
		unsigned char                                              UnknownData_57OZ[0x27];                                  // 0x0169(0x0027) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.NavModifierComponent
	 * Size -> 0x0018 (FullSize[0x0118] - InheritedSize[0x0100])
	 */
	class UNavModifierComponent : public UNavRelevantComponent
	{
	public:
		class UClass*                                              AreaClass;                                               // 0x0100(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_1TLW[0x10];                                  // 0x0108(0x0010) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.PawnNoiseEmitterComponent
	 * Size -> 0x0020 (FullSize[0x00F8] - InheritedSize[0x00D8])
	 */
	class UPawnNoiseEmitterComponent : public UActorComponent
	{
	public:
		struct FVector                                             LastRemoteNoisePosition;                                 // 0x00D8(0x000C) ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      NoiseLifetime;                                           // 0x00E4(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      LastRemoteNoiseVolume;                                   // 0x00E8(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      LastRemoteNoiseTime;                                     // 0x00EC(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      LastLocalNoiseVolume;                                    // 0x00F0(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      LastLocalNoiseTime;                                      // 0x00F4(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor

	public:
		void MakeNoise(class AActor* NoiseMaker, float Loudness, const struct FVector& NoiseLocation);
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.PhysicsHandleComponent
	 * Size -> 0x00A8 (FullSize[0x0180] - InheritedSize[0x00D8])
	 */
	class UPhysicsHandleComponent : public UActorComponent
	{
	public:
		class UPrimitiveComponent*                                 GrabbedComponent;                                        // 0x00D8(0x0008) ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_0TDC[0x10];                                  // 0x00E0(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      LinearDamping;                                           // 0x00F0(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      LinearStiffness;                                         // 0x00F4(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      AngularDamping;                                          // 0x00F8(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      AngularStiffness;                                        // 0x00FC(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_MWH5[0x60];                                  // 0x0100(0x0060) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      InterpolationSpeed;                                      // 0x0160(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_VDP6[0x1C];                                  // 0x0164(0x001C) MISSED OFFSET (PADDING)

	public:
		void SetTargetRotation(const struct FRotator& NewRotation);
		void SetTargetLocationAndRotation(const struct FVector& NewLocation, const struct FRotator& NewRotation);
		void SetTargetLocation(const struct FVector& NewLocation);
		void ReleaseComponent();
		void GrabComponent(class UPrimitiveComponent* Component, const class FName& InBoneName, const struct FVector& GrabLocation, bool bConstrainRotation);
		void GetTargetLocationAndRotation(struct FVector* TargetLocation, struct FRotator* TargetRotation);
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.AtmosphericFogComponent
	 * Size -> 0x01C8 (FullSize[0x03A0] - InheritedSize[0x01D8])
	 */
	class UAtmosphericFogComponent : public USceneComponent
	{
	public:
		unsigned char                                              UnknownData_EY2B[0x4];                                   // 0x01D8(0x0004) Fix Super Size
		float                                                      FogMultiplier;                                           // 0x01DC(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor
		float                                                      DensityMultiplier;                                       // 0x01E0(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor
		float                                                      DensityOffset;                                           // 0x01E4(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor
		float                                                      DistanceScale;                                           // 0x01E8(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor
		float                                                      AltitudeScale;                                           // 0x01EC(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor
		float                                                      DistanceOffset;                                          // 0x01F0(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor
		float                                                      GroundOffset;                                            // 0x01F4(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor
		float                                                      StartDistance;                                           // 0x01F8(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor
		float                                                      SunDiscScale;                                            // 0x01FC(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor
		float                                                      SkyInscatterScale;                                       // 0x0200(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor
		float                                                      DefaultBrightness;                                       // 0x0204(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor
		struct FColor                                              DefaultLightColor;                                       // 0x0208(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor
		unsigned char                                              bDisableSunDisk : 1;                                     // 0x020C(0x0001) BIT_FIELD Edit, BlueprintVisible, BlueprintReadOnly, Interp, NoDestructor
		unsigned char                                              bDisableGroundScattering : 1;                            // 0x020C(0x0001) BIT_FIELD Edit, BlueprintVisible, BlueprintReadOnly, Interp, NoDestructor
		unsigned char                                              bUseDayCycle : 1;                                        // 0x020C(0x0001) BIT_FIELD Edit, BlueprintVisible, BlueprintReadOnly, Interp, NoDestructor
		unsigned char                                              UnknownData_4V5O[0x3];                                   // 0x020D(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class UTexture2D*>                                  LossTextures;                                            // 0x0210(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient
		TArray<class UTexture2D*>                                  ScatterTextures;                                         // 0x0220(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient
		class UTextureRenderTarget2D*                              External_ScatterRT;                                      // 0x0230(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor
		class UTextureRenderTarget2D*                              External_LossRT;                                         // 0x0238(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor
		struct FLinearColor                                        LUT_TintScatter;                                         // 0x0240(0x0010) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor
		struct FLinearColor                                        LUT_TintLoss;                                            // 0x0250(0x0010) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor
		int32_t                                                    OvertimeIndex0;                                          // 0x0260(0x0004) Edit, ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		int32_t                                                    OvertimeIndex1;                                          // 0x0264(0x0004) Edit, ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		float                                                      OvertimeInterpolation;                                   // 0x0268(0x0004) Edit, ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		struct FAtmospherePrecomputeParameters                     PrecomputeParams;                                        // 0x026C(0x002C) Edit, BlueprintVisible, BlueprintReadOnly, Protected
		class UTexture2D*                                          TransmittanceTexture;                                    // 0x0298(0x0008) ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor
		class UTexture2D*                                          IrradianceTexture;                                       // 0x02A0(0x0008) ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_7L5Q[0xF8];                                  // 0x02A8(0x00F8) MISSED OFFSET (PADDING)

	public:
		void StartPrecompute();
		void SetSunMultiplier(float NewSunMultiplier);
		void SetStartDistance(float NewStartDistance);
		void SetPrecomputeParams(float DensityHeight, int32_t MaxScatteringOrder, int32_t InscatterAltitudeSampleNum);
		void SetFogTexturesDirectly(class UTexture2D* ScatterTexture0, class UTexture2D* ScatterTexture1, class UTexture2D* LossTexture0, class UTexture2D* LossTexture1, float InInterpolation);
		void SetFogOverTimeIndices(int32_t Texture0, int32_t Texture1, float InInterpolation);
		void SetFogMultiplier(float NewFogMultiplier);
		void SetDistanceScale(float NewDistanceScale);
		void SetDistanceOffset(float NewDistanceOffset);
		void SetDensityOffset(float NewDensityOffset);
		void SetDensityMultiplier(float NewDensityMultiplier);
		void SetDefaultLightColor(const struct FLinearColor& NewLightColor);
		void SetDefaultBrightness(float NewBrightness);
		void SetAltitudeScale(float NewAltitudeScale);
		void DisableSunDisk(bool NewSunDisk);
		void DisableGroundScattering(bool NewGroundScattering);
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.SoundAttenuation
	 * Size -> 0x0038 (FullSize[0x0060] - InheritedSize[0x0028])
	 */
	class USoundAttenuation : public UObject
	{
	public:
		struct FAttenuationSettings                                Attenuation;                                             // 0x0028(0x0034) Edit
		unsigned char                                              UnknownData_BPC2[0x4];                                   // 0x005C(0x0004) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.AudioComponent
	 * Size -> 0x00C8 (FullSize[0x02A0] - InheritedSize[0x01D8])
	 */
	class UAudioComponent : public USceneComponent
	{
	public:
		class USoundBase*                                          Sound;                                                   // 0x01D8(0x0008) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		TArray<struct FAudioComponentParam>                        InstanceParameters;                                      // 0x01E0(0x0010) Edit, BlueprintVisible, ZeroConstructor, AdvancedDisplay
		class USoundClass*                                         SoundClassOverride;                                      // 0x01F0(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay
		unsigned char                                              bAutoPlay : 1;                                           // 0x01F8(0x0001) BIT_FIELD Deprecated, NoDestructor
		unsigned char                                              bAutoDestroy : 1;                                        // 0x01F8(0x0001) BIT_FIELD NoDestructor
		unsigned char                                              bStopWhenOwnerDestroyed : 1;                             // 0x01F8(0x0001) BIT_FIELD NoDestructor
		unsigned char                                              bShouldRemainActiveIfDropped : 1;                        // 0x01F8(0x0001) BIT_FIELD Edit, BlueprintVisible, NoDestructor
		unsigned char                                              bAllowSpatialization : 1;                                // 0x01F8(0x0001) BIT_FIELD Edit, BlueprintVisible, NoDestructor
		unsigned char                                              bOverrideAttenuation : 1;                                // 0x01F8(0x0001) BIT_FIELD Edit, BlueprintVisible, NoDestructor
		unsigned char                                              bIsUISound : 1;                                          // 0x01F8(0x0001) BIT_FIELD Edit, BlueprintVisible, NoDestructor
		unsigned char                                              bIsAmbient : 1;                                          // 0x01F8(0x0001) BIT_FIELD Transient, NoDestructor
		unsigned char                                              UnknownData_Q0TX[0x3];                                   // 0x01F9(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      PitchModulationMin;                                      // 0x01FC(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      PitchModulationMax;                                      // 0x0200(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      VolumeModulationMin;                                     // 0x0204(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      VolumeModulationMax;                                     // 0x0208(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      VolumeMultiplier;                                        // 0x020C(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      PitchMultiplier;                                         // 0x0210(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      HighFrequencyGainMultiplier;                             // 0x0214(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		class USoundAttenuation*                                   AttenuationSettings;                                     // 0x0218(0x0008) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		struct FAttenuationSettings                                AttenuationOverrides;                                    // 0x0220(0x0034) Edit, BlueprintVisible
		unsigned char                                              UnknownData_9U8L[0x4];                                   // 0x0254(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FScriptMulticastDelegate                             OnAudioFinished;                                         // 0x0258(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable
		unsigned char                                              UnknownData_K8HV[0x20];                                  // 0x0268(0x0020) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FScriptDelegate                                      OnQueueSubtitles;                                        // 0x0288(0x0010) ZeroConstructor, InstancedReference, NoDestructor
		unsigned char                                              UnknownData_LJO2[0x8];                                   // 0x0298(0x0008) MISSED OFFSET (PADDING)

	public:
		void Stop();
		void SetWaveParameter(const class FName& InName, class USoundWave* InWave);
		void SetVolumeMultiplier(float NewVolumeMultiplier);
		void SetUISound(bool bInUISound);
		void SetSound(class USoundBase* NewSound);
		void SetPitchMultiplier(float NewPitchMultiplier);
		void SetIntParameter(const class FName& InName, int32_t InInt);
		void SetFloatParameter(const class FName& InName, float InFloat);
		void SetBoolParameter(const class FName& InName, bool InBool);
		void Play(float StartTime);
		void OnQueueSubtitles__DelegateSignature(TArray<struct FSubtitleCue> Subtitles, float CueDuration);
		void OnAudioFinished__DelegateSignature();
		bool IsPlaying();
		void FadeOut(float FadeOutDuration, float FadeVolumeLevel);
		void FadeIn(float FadeInDuration, float FadeVolumeLevel, float StartTime);
		void AdjustVolume(float AdjustVolumeDuration, float AdjustVolumeLevel);
		void AdjustAttenuation(const struct FAttenuationSettings& InAttenuationSettings);
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.CameraComponent
	 * Size -> 0x0378 (FullSize[0x0550] - InheritedSize[0x01D8])
	 */
	class UCameraComponent : public USceneComponent
	{
	public:
		unsigned char                                              UnknownData_O422[0x4];                                   // 0x01D8(0x0004) Fix Super Size
		float                                                      OrthoWidth;                                              // 0x01DC(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor
		float                                                      AspectRatio;                                             // 0x01E0(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor
		unsigned char                                              bConstrainAspectRatio : 1;                               // 0x01E4(0x0001) BIT_FIELD Edit, BlueprintVisible, Interp, NoDestructor
		unsigned char                                              bUsePawnControlRotation : 1;                             // 0x01E4(0x0001) BIT_FIELD Edit, BlueprintVisible, NoDestructor
		unsigned char                                              UnknownData_BGZM[0x3];                                   // 0x01E5(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		ECameraProjectionMode                                      ProjectionMode;                                          // 0x01E8(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor
		unsigned char                                              UnknownData_FTDA[0x3];                                   // 0x01E9(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      PostProcessBlendWeight;                                  // 0x01EC(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor
		struct FPostProcessSettings                                PostProcessSettings;                                     // 0x01F0(0x0358) Edit, BlueprintVisible, Interp
		unsigned char                                              bUseControllerViewRotation : 1;                          // 0x0548(0x0001) BIT_FIELD Deprecated, NoDestructor
		unsigned char                                              UnknownData_G1YR[0x7];                                   // 0x0549(0x0007) MISSED OFFSET (PADDING)

	public:
		void GetCameraView(float DeltaTime, struct FMinimalViewInfo* DesiredView);
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.ChildActorComponent
	 * Size -> 0x0028 (FullSize[0x0200] - InheritedSize[0x01D8])
	 */
	class UChildActorComponent : public USceneComponent
	{
	public:
		class UClass*                                              ChildActorClass;                                         // 0x01D8(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor
		class AActor*                                              ChildActor;                                              // 0x01E0(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, TextExportTransient
		unsigned char                                              UnknownData_JCBE[0x18];                                  // 0x01E8(0x0018) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.DecalComponent
	 * Size -> 0x0028 (FullSize[0x0200] - InheritedSize[0x01D8])
	 */
	class UDecalComponent : public USceneComponent
	{
	public:
		class UMaterialInterface*                                  DecalMaterial;                                           // 0x01D8(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor
		int32_t                                                    SortOrder;                                               // 0x01E0(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_MPFS[0x1C];                                  // 0x01E4(0x001C) MISSED OFFSET (PADDING)

	public:
		void SetSortOrder(int32_t Value);
		void SetDecalMaterial(class UMaterialInterface* NewDecalMaterial);
		class UMaterialInterface* GetDecalMaterial();
		class UMaterialInstanceDynamic* CreateDynamicMaterialInstance();
		void CheckDestructionFirst();
		void CheckDestruction();
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.ExponentialHeightFogComponent
	 * Size -> 0x0048 (FullSize[0x0220] - InheritedSize[0x01D8])
	 */
	class UExponentialHeightFogComponent : public USceneComponent
	{
	public:
		unsigned char                                              UnknownData_DMS0[0x4];                                   // 0x01D8(0x0004) Fix Super Size
		float                                                      Priority;                                                // 0x01DC(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor
		float                                                      FogDensity;                                              // 0x01E0(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor
		struct FLinearColor                                        FogInscatteringColor;                                    // 0x01E4(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor
		float                                                      DirectionalInscatteringExponent;                         // 0x01F4(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor
		float                                                      DirectionalInscatteringStartDistance;                    // 0x01F8(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor
		struct FLinearColor                                        DirectionalInscatteringColor;                            // 0x01FC(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor
		float                                                      FogHeightFalloff;                                        // 0x020C(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor
		float                                                      FogMaxOpacity;                                           // 0x0210(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor
		float                                                      StartDistance;                                           // 0x0214(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor
		float                                                      AdditionalStartDistance;                                 // 0x0218(0x0004) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_AAU1[0x4];                                   // 0x021C(0x0004) MISSED OFFSET (PADDING)

	public:
		void SetStartDistance(float Value);
		void SetFogMaxOpacity(float Value);
		void SetFogInscatteringColor(const struct FLinearColor& Value);
		void SetFogHeightFalloff(float Value);
		void SetFogDensity(float Value);
		void SetDirectionalInscatteringStartDistance(float Value);
		void SetDirectionalInscatteringExponent(float Value);
		void SetDirectionalInscatteringColor(const struct FLinearColor& Value);
		void SetAdditionalStartDistance(float Value);
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.LightComponentBase
	 * Size -> 0x0038 (FullSize[0x0210] - InheritedSize[0x01D8])
	 */
	class ULightComponentBase : public USceneComponent
	{
	public:
		struct FGuid                                               LightGuid;                                               // 0x01D8(0x0010) ZeroConstructor
		float                                                      Brightness;                                              // 0x01E8(0x0004) ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor
		float                                                      Intensity;                                               // 0x01EC(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor
		struct FColor                                              LightColor;                                              // 0x01F0(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor
		float                                                      ExtraIntensity;                                          // 0x01F4(0x0004) ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		unsigned char                                              bAffectsWorld : 1;                                       // 0x01F8(0x0001) BIT_FIELD Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor
		unsigned char                                              CastShadows : 1;                                         // 0x01F8(0x0001) BIT_FIELD Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor
		unsigned char                                              bUseShadowmapCache : 1;                                  // 0x01F8(0x0001) BIT_FIELD Edit, BlueprintVisible, NoDestructor
		unsigned char                                              bOnlyCastShadowmapsWhenCached : 1;                       // 0x01F8(0x0001) BIT_FIELD Edit, BlueprintVisible, NoDestructor
		unsigned char                                              bShadowmapCachesDynamicGeometry : 1;                     // 0x01F8(0x0001) BIT_FIELD Edit, BlueprintVisible, NoDestructor
		unsigned char                                              bAlwaysRenderInCache : 1;                                // 0x01F8(0x0001) BIT_FIELD Edit, BlueprintVisible, NoDestructor
		unsigned char                                              UnknownData_0H68[0x3];                                   // 0x01F9(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      ShadowDiscardDynamicObjectsDistance;                     // 0x01FC(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      ShadowTexelSizeMultiplier;                               // 0x0200(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		int32_t                                                    ObjectLayerMask;                                         // 0x0204(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay
		unsigned char                                              UseBlackLightBuffer : 1;                                 // 0x0208(0x0001) BIT_FIELD Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor
		unsigned char                                              AlwaysProjectShadows : 1;                                // 0x0208(0x0001) BIT_FIELD Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay
		unsigned char                                              UseAmbientLightInfo : 1;                                 // 0x0208(0x0001) BIT_FIELD Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay
		unsigned char                                              UseSpotLightInfo : 1;                                    // 0x0208(0x0001) BIT_FIELD Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay
		unsigned char                                              CastStaticShadows : 1;                                   // 0x0208(0x0001) BIT_FIELD Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay
		unsigned char                                              CastDynamicShadows : 1;                                  // 0x0208(0x0001) BIT_FIELD Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay
		unsigned char                                              bAffectTranslucentLighting : 1;                          // 0x0208(0x0001) BIT_FIELD Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay
		unsigned char                                              bPrecomputedLightingIsValid : 1;                         // 0x0208(0x0001) BIT_FIELD NoDestructor
		unsigned char                                              UnknownData_GLYJ[0x3];                                   // 0x0209(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      IndirectLightingIntensity;                               // 0x020C(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.LightComponent
	 * Size -> 0x015C (FullSize[0x036C] - InheritedSize[0x0210])
	 */
	class ULightComponent : public ULightComponentBase
	{
	public:
		int32_t                                                    ShadowMapChannel;                                        // 0x0210(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_HUH9[0x4];                                   // 0x0214(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      SourceRadius;                                            // 0x0218(0x0004) ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor
		float                                                      MinRoughness;                                            // 0x021C(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay
		float                                                      ShadowBias;                                              // 0x0220(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay
		float                                                      ShadowSharpen;                                           // 0x0224(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay
		unsigned char                                              InverseSquaredFalloff : 1;                               // 0x0228(0x0001) BIT_FIELD Deprecated, NoDestructor
		unsigned char                                              bEnabled : 1;                                            // 0x0228(0x0001) BIT_FIELD Deprecated, NoDestructor
		unsigned char                                              CastTranslucentShadows : 1;                              // 0x0228(0x0001) BIT_FIELD Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay
		unsigned char                                              bAffectDynamicIndirectLighting : 1;                      // 0x0228(0x0001) BIT_FIELD Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay
		unsigned char                                              UnknownData_TKEI[0x3];                                   // 0x0229(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		unsigned char                                              ShadowInjectionSourceMask;                               // 0x022C(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor
		unsigned char                                              ShadowInjectionTargetMask;                               // 0x022D(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor
		unsigned char                                              UnknownData_Z7BS[0x2];                                   // 0x022E(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      ShadowDistanceFadeFraction;                              // 0x0230(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor
		float                                                      TranslucencyColorMultiplier;                             // 0x0234(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor
		class UMaterialInterface*                                  LightFunctionMaterial;                                   // 0x0238(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor
		struct FVector                                             LightFunctionScale;                                      // 0x0240(0x000C) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_T3TS[0x4];                                   // 0x024C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UTextureLightProfile*                                IESTexture;                                              // 0x0250(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              bUseIESBrightness : 1;                                   // 0x0258(0x0001) BIT_FIELD Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor
		unsigned char                                              UnknownData_8FB5[0x3];                                   // 0x0259(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      IESBrightnessScale;                                      // 0x025C(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor
		float                                                      LightFunctionFadeDistance;                               // 0x0260(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      DisabledBrightness;                                      // 0x0264(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              bEnableLightShaftBloom : 1;                              // 0x0268(0x0001) BIT_FIELD Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor
		unsigned char                                              UnknownData_4MCW[0x3];                                   // 0x0269(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      BloomScale;                                              // 0x026C(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor
		float                                                      BloomThreshold;                                          // 0x0270(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor
		struct FColor                                              BloomTint;                                               // 0x0274(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor
		bool                                                       bUseRayTracedDistanceFieldShadows;                       // 0x0278(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor
		bool                                                       bUseShadowmapsWithRayTracedDFS;                          // 0x0279(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_7SRA[0x2];                                   // 0x027A(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      ShadowmapWithDFSMaxViewDistance;                         // 0x027C(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      RayStartOffsetDepthScale;                                // 0x0280(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay
		unsigned char                                              UnknownData_ODLB[0xE8];                                  // 0x0284(0x00E8) Fix size for supers

	public:
		void SetShadowDistanceFade(float NewFadeFraction);
		void SetLightFunctionScale(const struct FVector& NewLightFunctionScale);
		void SetLightFunctionMaterial(class UMaterialInterface* NewLightFunctionMaterial);
		void SetLightFunctionFadeDistance(float NewLightFunctionFadeDistance);
		void SetLightColor(const struct FLinearColor& NewLightColor);
		void SetIntensity(float NewIntensity);
		void SetIESTexture(class UTextureLightProfile* NewValue);
		void SetEnableLightShaftBloom(bool bNewValue);
		void SetCastShadows(bool bNewValue);
		void SetBloomTint(const struct FColor& NewValue);
		void SetBloomThreshold(float NewValue);
		void SetBloomScale(float NewValue);
		void SetAffectTranslucentLighting(bool bNewValue);
		void SetAffectDynamicIndirectLighting(bool bNewValue);
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.DirectionalLightComponent
	 * Size -> 0x0064 (FullSize[0x03D0] - InheritedSize[0x036C])
	 */
	class UDirectionalLightComponent : public ULightComponent
	{
	public:
		float                                                      OcclusionMaskDarkness;                                   // 0x036C(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      OcclusionDepthRange;                                     // 0x0370(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor
		struct FVector                                             LightShaftOverrideDirection;                             // 0x0374(0x000C) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay
		float                                                      WholeSceneDynamicShadowRadius;                           // 0x0380(0x0004) ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor
		float                                                      DynamicShadowDistanceMovableLight;                       // 0x0384(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      DynamicShadowDistanceStationaryLight;                    // 0x0388(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor
		int32_t                                                    DynamicShadowCascades;                                   // 0x038C(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      CascadeDistributionExponent;                             // 0x0390(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      CascadeTransitionFraction;                               // 0x0394(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      ShadowDistanceFadeoutFraction;                           // 0x0398(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              bUseInsetShadowsForMovableObjects : 1;                   // 0x039C(0x0001) BIT_FIELD Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay
		unsigned char                                              UnknownData_C4DR[0x3];                                   // 0x039D(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int32_t                                                    FarShadowCascadeCount;                                   // 0x03A0(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      FarShadowDistance;                                       // 0x03A4(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      AmbientShadowIntensityMultiplier;                        // 0x03A8(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      DistanceFieldShadowDistance;                             // 0x03AC(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      LightSourceAngle;                                        // 0x03B0(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor
		struct FLightmassDirectionalLightSettings                  LightmassSettings;                                       // 0x03B4(0x0010) Edit, BlueprintVisible, BlueprintReadOnly
		unsigned char                                              bUsedAsAtmosphereSunLight : 1;                           // 0x03C4(0x0001) BIT_FIELD Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor
		unsigned char                                              UnknownData_HU60[0xB];                                   // 0x03C5(0x000B) MISSED OFFSET (PADDING)

	public:
		void SetShadowDistanceFadeoutFraction(float NewValue);
		void SetOcclusionMaskDarkness(float NewValue);
		void SetLightShaftOverrideDirection(const struct FVector& NewValue);
		void SetEnableLightShaftOcclusion(bool bNewValue);
		void SetDynamicShadowDistanceStationaryLight(float NewValue);
		void SetDynamicShadowDistanceMovableLight(float NewValue);
		void SetDynamicShadowCascades(int32_t NewValue);
		void SetCascadeTransitionFraction(float NewValue);
		void SetCascadeDistributionExponent(float NewValue);
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.PointLightComponent
	 * Size -> 0x0024 (FullSize[0x0390] - InheritedSize[0x036C])
	 */
	class UPointLightComponent : public ULightComponent
	{
	public:
		float                                                      AttenuationRadius;                                       // 0x036C(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor
		float                                                      MaxDrawDistance;                                         // 0x0370(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              bUseInverseSquaredFalloff : 1;                           // 0x0374(0x0001) BIT_FIELD Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay
		unsigned char                                              UnknownData_UKWL[0x3];                                   // 0x0375(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      LightFalloffExponent;                                    // 0x0378(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, AdvancedDisplay
		float                                                      SourceRadius;                                            // 0x037C(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      SourceLength;                                            // 0x0380(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor
		struct FLightmassPointLightSettings                        LightmassSettings;                                       // 0x0384(0x000C) Edit, BlueprintVisible, BlueprintReadOnly

	public:
		void SetSourceRadius(float bNewValue);
		void SetLightFalloffExponent(float NewLightFalloffExponent);
		void SetAttenuationRadius(float NewRadius);
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.SpotLightComponent
	 * Size -> 0x0030 (FullSize[0x03C0] - InheritedSize[0x0390])
	 */
	class USpotLightComponent : public UPointLightComponent
	{
	public:
		float                                                      InnerConeAngle;                                          // 0x0390(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      OuterConeAngle;                                          // 0x0394(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      LightShaftConeAngle;                                     // 0x0398(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      ShadowNearScale;                                         // 0x039C(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      ShadowFarScale;                                          // 0x03A0(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      InfluenceScale;                                          // 0x03A4(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      InfluenceRange;                                          // 0x03A8(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      InfluenceExponent;                                       // 0x03AC(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      MaxInjectedWholeSceneDynamicShadowRadius;                // 0x03B0(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      MaxInjectedShadowDistanceFadeoutFraction;                // 0x03B4(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_CNUM[0x8];                                   // 0x03B8(0x0008) MISSED OFFSET (PADDING)

	public:
		void SetOuterConeAngle(float NewOuterConeAngle);
		void SetInnerConeAngle(float NewInnerConeAngle);
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.SkyLightComponent
	 * Size -> 0x01A0 (FullSize[0x03B0] - InheritedSize[0x0210])
	 */
	class USkyLightComponent : public ULightComponentBase
	{
	public:
		float                                                      AtmosphericFogIntensity;                                 // 0x0210(0x0004) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      TrueSkyBrightness;                                       // 0x0214(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor
		struct FVector                                             TrueSkyColorMultiplier;                                  // 0x0218(0x000C) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor
		ESkyLightSourceType                                        SourceType;                                              // 0x0224(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_44I8[0x3];                                   // 0x0225(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UTextureCube*                                        Cubemap;                                                 // 0x0228(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      SkyDistanceThreshold;                                    // 0x0230(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              bBakeAndStream : 1;                                      // 0x0234(0x0001) BIT_FIELD Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor
		unsigned char                                              bLockCaptureData : 1;                                    // 0x0234(0x0001) BIT_FIELD Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor
		unsigned char                                              UnknownData_BYLU[0x3];                                   // 0x0235(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       bLowerHemisphereIsBlack;                                 // 0x0238(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_SPZ9[0x3];                                   // 0x0239(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      OcclusionMaxDistance;                                    // 0x023C(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      Contrast;                                                // 0x0240(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      MinOcclusion;                                            // 0x0244(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      ContrastTangentMult;                                     // 0x0248(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      ContrastTangentShift;                                    // 0x024C(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor
		struct FColor                                              OcclusionTint;                                           // 0x0250(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_I1V7[0x15C];                                 // 0x0254(0x015C) MISSED OFFSET (PADDING)

	public:
		void SetOcclusionTint(const struct FColor& InTint);
		void SetMinOcclusion(float InMinOcclusion);
		void SetLightColor(const struct FLinearColor& NewLightColor);
		void SetIntensity(float NewIntensity);
		void SetCubemap(class UTextureCube* NewCubemap);
		void RecaptureSky();
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.NavigationGraphNodeComponent
	 * Size -> 0x0028 (FullSize[0x0200] - InheritedSize[0x01D8])
	 */
	class UNavigationGraphNodeComponent : public USceneComponent
	{
	public:
		struct FNavGraphNode                                       Node;                                                    // 0x01D8(0x0018)
		class UNavigationGraphNodeComponent*                       NextNodeComponent;                                       // 0x01F0(0x0008) ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor
		class UNavigationGraphNodeComponent*                       PrevNodeComponent;                                       // 0x01F8(0x0008) ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.PhysicsThrusterComponent
	 * Size -> 0x0008 (FullSize[0x01E0] - InheritedSize[0x01D8])
	 */
	class UPhysicsThrusterComponent : public USceneComponent
	{
	public:
		unsigned char                                              UnknownData_KOUV[0x4];                                   // 0x01D8(0x0004) Fix Super Size
		float                                                      ThrustStrength;                                          // 0x01DC(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.PostProcessComponent
	 * Size -> 0x0378 (FullSize[0x0550] - InheritedSize[0x01D8])
	 */
	class UPostProcessComponent : public USceneComponent
	{
	public:
		unsigned char                                              UnknownData_8832[0x8];                                   // 0x01D8(0x0008) Fix Super Size
		struct FPostProcessSettings                                Settings;                                                // 0x01E0(0x0358) Edit, BlueprintVisible, Interp
		float                                                      Priority;                                                // 0x0538(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      BlendRadius;                                             // 0x053C(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor
		float                                                      BlendWeight;                                             // 0x0540(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor
		unsigned char                                              bEnabled : 1;                                            // 0x0544(0x0001) BIT_FIELD Edit, BlueprintVisible, NoDestructor
		unsigned char                                              bUnbound : 1;                                            // 0x0544(0x0001) BIT_FIELD Edit, BlueprintVisible, NoDestructor
		unsigned char                                              bWaterPP : 1;                                            // 0x0544(0x0001) BIT_FIELD Edit, BlueprintVisible, NoDestructor
		unsigned char                                              UnknownData_4ZHW[0xB];                                   // 0x0545(0x000B) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.ArrowComponent
	 * Size -> 0x0018 (FullSize[0x0680] - InheritedSize[0x0668])
	 */
	class UArrowComponent : public UPrimitiveComponent
	{
	public:
		unsigned char                                              UnknownData_YALC[0x4];                                   // 0x0668(0x0004) Fix Super Size
		float                                                      ArrowSize;                                               // 0x066C(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		bool                                                       bIsScreenSizeScaled;                                     // 0x0670(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_8F9W[0x3];                                   // 0x0671(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      ScreenSize;                                              // 0x0674(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              bTreatAsASprite : 1;                                     // 0x0678(0x0001) BIT_FIELD Edit, BlueprintVisible, NoDestructor
		unsigned char                                              UnknownData_46TK[0x7];                                   // 0x0679(0x0007) MISSED OFFSET (PADDING)

	public:
		void SetArrowColor_New(const struct FLinearColor& NewColor);
		void SetArrowColor_DEPRECATED(const struct FColor& NewColor);
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.BillboardComponent
	 * Size -> 0x0028 (FullSize[0x0690] - InheritedSize[0x0668])
	 */
	class UBillboardComponent : public UPrimitiveComponent
	{
	public:
		class UTexture2D*                                          Sprite;                                                  // 0x0668(0x0008) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              bIsScreenSizeScaled : 1;                                 // 0x0670(0x0001) BIT_FIELD Edit, BlueprintVisible, NoDestructor
		unsigned char                                              UnknownData_MUEJ[0x3];                                   // 0x0671(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      ScreenSize;                                              // 0x0674(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      U;                                                       // 0x0678(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      UL;                                                      // 0x067C(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      V;                                                       // 0x0680(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      VL;                                                      // 0x0684(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_6OOD[0x8];                                   // 0x0688(0x0008) MISSED OFFSET (PADDING)

	public:
		void SetUV(int32_t NewU, int32_t NewUL, int32_t NewV, int32_t NewVL);
		void SetSpriteAndUV(class UTexture2D* NewSprite, int32_t NewU, int32_t NewUL, int32_t NewV, int32_t NewVL);
		void SetSprite(class UTexture2D* NewSprite);
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.BrushComponent
	 * Size -> 0x0028 (FullSize[0x0690] - InheritedSize[0x0668])
	 */
	class UBrushComponent : public UPrimitiveComponent
	{
	public:
		class UModel*                                              Brush;                                                   // 0x0668(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor
		class UBodySetup*                                          BrushBodySetup;                                          // 0x0670(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              bBodySetupLocked : 1;                                    // 0x0678(0x0001) BIT_FIELD NoDestructor
		unsigned char                                              bSolidWhenShownInGame : 1;                               // 0x0678(0x0001) BIT_FIELD Transient, NoDestructor
		unsigned char                                              UnknownData_4AMG[0x3];                                   // 0x0679(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FVector                                             PrePivot;                                                // 0x067C(0x000C) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_VE2D[0x8];                                   // 0x0688(0x0008) MISSED OFFSET (PADDING)

	public:
		struct FVector GetBoxBrushXYZ();
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.DrawFrustumComponent
	 * Size -> 0x0028 (FullSize[0x0690] - InheritedSize[0x0668])
	 */
	class UDrawFrustumComponent : public UPrimitiveComponent
	{
	public:
		unsigned char                                              UnknownData_U6SL[0x4];                                   // 0x0668(0x0004) Fix Super Size
		float                                                      FrustumAngle;                                            // 0x066C(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      FrustumAspectRatio;                                      // 0x0670(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      FrustumStartDist;                                        // 0x0674(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      FrustumEndDist;                                          // 0x0678(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_AW0N[0x4];                                   // 0x067C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UTexture*                                            Texture;                                                 // 0x0680(0x0008) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_8ARR[0x8];                                   // 0x0688(0x0008) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.LandscapeComponent
	 * Size -> 0x0158 (FullSize[0x07C0] - InheritedSize[0x0668])
	 */
	class ULandscapeComponent : public UPrimitiveComponent
	{
	public:
		unsigned char                                              UnknownData_SMX4[0x4];                                   // 0x0668(0x0004) Fix Super Size
		int32_t                                                    SectionBaseY;                                            // 0x066C(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor
		int32_t                                                    ComponentSizeQuads;                                      // 0x0670(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor
		int32_t                                                    SubsectionSizeQuads;                                     // 0x0674(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor
		int32_t                                                    NumSubsections;                                          // 0x0678(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_VVVE[0x4];                                   // 0x067C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UMaterialInterface*                                  OverrideMaterial;                                        // 0x0680(0x0008) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		class UMaterialInterface*                                  OverrideHoleMaterial;                                    // 0x0688(0x0008) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		class UMaterialInstance*                                   MaterialInstance;                                        // 0x0690(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, TextExportTransient
		TArray<struct FWeightmapLayerAllocationInfo>               WeightmapLayerAllocations;                               // 0x0698(0x0010) ZeroConstructor
		TArray<class UTexture2D*>                                  WeightmapTextures;                                       // 0x06A8(0x0010) ZeroConstructor, TextExportTransient
		class UTexture2D*                                          XYOffsetmapTexture;                                      // 0x06B8(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, TextExportTransient
		struct FVector4                                            WeightmapScaleBias;                                      // 0x06C0(0x0010) ZeroConstructor
		float                                                      WeightmapSubsectionOffset;                               // 0x06D0(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_JXZ0[0xC];                                   // 0x06D4(0x000C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FVector4                                            HeightmapScaleBias;                                      // 0x06E0(0x0010) ZeroConstructor
		class UTexture2D*                                          HeightmapTexture;                                        // 0x06F0(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, TextExportTransient
		struct FBoxSphereBounds                                    CachedBoxSphereBounds;                                   // 0x06F8(0x001C) ZeroConstructor, Deprecated
		struct FBox                                                CachedLocalBox;                                          // 0x0714(0x001C) ZeroConstructor, IsPlainOldData, NoDestructor
		TLazyObjectPtr<class ULandscapeHeightfieldCollisionComponent> CollisionComponent;                                      // 0x0730(0x001C) ExportObject, InstancedReference, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_QHY8[0x4];                                   // 0x074C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<struct FGuid>                                       IrrelevantLights;                                        // 0x0750(0x0010) ZeroConstructor
		unsigned char                                              UnknownData_SJT2[0x10];                                  // 0x0760(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int32_t                                                    CollisionMipLevel;                                       // 0x0770(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      StaticLightingResolution;                                // 0x0774(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		int32_t                                                    ForcedLOD;                                               // 0x0778(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              NeighborLOD[0x8];                                        // 0x077C(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor
		int32_t                                                    LODBias;                                                 // 0x0784(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              NeighborLODBias[0x8];                                    // 0x0788(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor
		struct FGuid                                               StateId;                                                 // 0x0790(0x0010) ZeroConstructor
		unsigned char                                              UnknownData_CWXN[0x20];                                  // 0x07A0(0x0020) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.LandscapeGizmoRenderComponent
	 * Size -> 0x0008 (FullSize[0x0670] - InheritedSize[0x0668])
	 */
	class ULandscapeGizmoRenderComponent : public UPrimitiveComponent
	{
	public:
		unsigned char                                              UnknownData_WE6G[0x8];                                   // 0x0668(0x0008) Fix Super Size

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.LandscapeHeightfieldCollisionComponent
	 * Size -> 0x0160 (FullSize[0x07C8] - InheritedSize[0x0668])
	 */
	class ULandscapeHeightfieldCollisionComponent : public UPrimitiveComponent
	{
	public:
		TArray<class FName>                                        ComponentLayers;                                         // 0x0668(0x0010) ZeroConstructor, Deprecated
		TArray<class ULandscapeLayerInfoObject*>                   ComponentLayerInfos;                                     // 0x0678(0x0010) ZeroConstructor
		int32_t                                                    SectionBaseX;                                            // 0x0688(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor
		int32_t                                                    SectionBaseY;                                            // 0x068C(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor
		int32_t                                                    CollisionSizeQuads;                                      // 0x0690(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      CollisionScale;                                          // 0x0694(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor
		TArray<unsigned char>                                      CollisionQuadFlags;                                      // 0x0698(0x0010) ZeroConstructor
		struct FGuid                                               HeightfieldGuid;                                         // 0x06A8(0x0010) ZeroConstructor
		struct FBoxSphereBounds                                    CachedBoxSphereBounds;                                   // 0x06B8(0x001C) ZeroConstructor, Deprecated
		struct FBox                                                CachedLocalBox;                                          // 0x06D4(0x001C) ZeroConstructor, IsPlainOldData, NoDestructor
		TLazyObjectPtr<class ULandscapeComponent>                  RenderComponent;                                         // 0x06F0(0x001C) ExportObject, InstancedReference, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_FQ2B[0xA4];                                  // 0x070C(0x00A4) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class UPhysicalMaterial*>                           CookedPhysicalMaterials;                                 // 0x07B0(0x0010) ZeroConstructor, Transient
		unsigned char                                              UnknownData_61F7[0x8];                                   // 0x07C0(0x0008) Fix size for supers

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.LandscapeMeshCollisionComponent
	 * Size -> 0x0068 (FullSize[0x0830] - InheritedSize[0x07C8])
	 */
	class ULandscapeMeshCollisionComponent : public ULandscapeHeightfieldCollisionComponent
	{
	public:
		struct FGuid                                               MeshGuid;                                                // 0x07C8(0x0010) ZeroConstructor
		unsigned char                                              UnknownData_NDKR[0x58];                                  // 0x07D8(0x0058) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.LandscapeSplinesComponent
	 * Size -> 0x0028 (FullSize[0x0690] - InheritedSize[0x0668])
	 */
	class ULandscapeSplinesComponent : public UPrimitiveComponent
	{
	public:
		TArray<class ULandscapeSplineControlPoint*>                ControlPoints;                                           // 0x0668(0x0010) ZeroConstructor, TextExportTransient
		TArray<class ULandscapeSplineSegment*>                     Segments;                                                // 0x0678(0x0010) ZeroConstructor, TextExportTransient
		unsigned char                                              UnknownData_NCO4[0x8];                                   // 0x0688(0x0008) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.LineBatchComponent
	 * Size -> 0x0038 (FullSize[0x06A0] - InheritedSize[0x0668])
	 */
	class ULineBatchComponent : public UPrimitiveComponent
	{
	public:
		unsigned char                                              UnknownData_XVOI[0x8];                                   // 0x0668(0x0008) Fix Super Size
		unsigned char                                              UnknownData_B30G[0x30];                                  // 0x0670(0x0030) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.MaterialBillboardComponent
	 * Size -> 0x0018 (FullSize[0x0680] - InheritedSize[0x0668])
	 */
	class UMaterialBillboardComponent : public UPrimitiveComponent
	{
	public:
		TArray<struct FMaterialSpriteElement>                      Elements;                                                // 0x0668(0x0010) Edit, BlueprintVisible, ZeroConstructor
		unsigned char                                              UnknownData_0849[0x8];                                   // 0x0678(0x0008) MISSED OFFSET (PADDING)

	public:
		void AddElement(class UMaterialInterface* Material, class UCurveFloat* DistanceToOpacityCurve, bool bSizeIsInScreenSpace, float BaseSizeX, float BaseSizeY, class UCurveFloat* DistanceToSizeCurve);
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.DestructibleComponent
	 * Size -> 0x00C0 (FullSize[0x0860] - InheritedSize[0x07A0])
	 */
	class UDestructibleComponent : public USkinnedMeshComponent
	{
	public:
		TArray<struct FFractureEffect>                             FractureEffects;                                         // 0x07A0(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, EditFixedSize, ZeroConstructor
		bool                                                       bEnableHardSleeping;                                     // 0x07B0(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_0ZOY[0x3];                                   // 0x07B1(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      LargeChunkThreshold;                                     // 0x07B4(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_9A00[0x10];                                  // 0x07B8(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FScriptMulticastDelegate                             OnComponentFracture;                                     // 0x07C8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable
		unsigned char                                              UnknownData_PLBF[0x88];                                  // 0x07D8(0x0088) MISSED OFFSET (PADDING)

	public:
		void SetDestructibleMesh(class UDestructibleMesh* NewMesh);
		class UDestructibleMesh* GetDestructibleMesh();
		void ComponentFractureSignature__DelegateSignature(const struct FVector& HitPoint, const struct FVector& HitDirection);
		void ApplyRadiusDamage(float BaseDamage, const struct FVector& HurtOrigin, float DamageRadius, float ImpulseStrength, bool bFullDamage);
		void ApplyDamage(float DamageAmount, const struct FVector& HitLocation, const struct FVector& ImpulseDir, float ImpulseStrength);
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.PoseableMeshComponent
	 * Size -> 0x0080 (FullSize[0x0820] - InheritedSize[0x07A0])
	 */
	class UPoseableMeshComponent : public USkinnedMeshComponent
	{
	public:
		unsigned char                                              UnknownData_5REQ[0x80];                                  // 0x07A0(0x0080) MISSED OFFSET (PADDING)

	public:
		void SetBoneTransformByName(const class FName& BoneName, const struct UObject_FTransform& InTransform, EBoneSpaces BoneSpace);
		void SetBoneScaleByName(const class FName& BoneName, const struct FVector& InScale3D, EBoneSpaces BoneSpace);
		void SetBoneRotationByName(const class FName& BoneName, const struct FRotator& InRotation, EBoneSpaces BoneSpace);
		void SetBoneLocationByName(const class FName& BoneName, const struct FVector& InLocation, EBoneSpaces BoneSpace);
		void ResetBoneTransformByName(const class FName& BoneName);
		struct UObject_FTransform GetBoneTransformByName(const class FName& BoneName, EBoneSpaces BoneSpace);
		struct FVector GetBoneScaleByName(const class FName& BoneName, EBoneSpaces BoneSpace);
		struct FRotator GetBoneRotationByName(const class FName& BoneName, EBoneSpaces BoneSpace);
		struct FVector GetBoneLocationByName(const class FName& BoneName, EBoneSpaces BoneSpace);
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.StaticMeshComponent
	 * Size -> 0x0088 (FullSize[0x0700] - InheritedSize[0x0678])
	 */
	class UStaticMeshComponent : public UMeshComponent
	{
	public:
		unsigned char                                              UnknownData_1U4F[0x4];                                   // 0x0678(0x0004) Fix Super Size
		int32_t                                                    PreviousLODLevel;                                        // 0x067C(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor
		class UStaticMesh*                                         StaticMesh;                                              // 0x0680(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor
		bool                                                       bOverrideWireframeColor;                                 // 0x0688(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_CJ4X[0x3];                                   // 0x0689(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FColor                                              WireframeColorOverride;                                  // 0x068C(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay
		unsigned char                                              bIgnoreInstanceForTextureStreaming : 1;                  // 0x0690(0x0001) BIT_FIELD Edit, BlueprintVisible, NoDestructor, AdvancedDisplay
		unsigned char                                              bOverrideLightMapRes : 1;                                // 0x0690(0x0001) BIT_FIELD BlueprintVisible, BlueprintReadOnly, NoDestructor
		unsigned char                                              bRenderLandscapeInfo : 1;                                // 0x0690(0x0001) BIT_FIELD Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor
		unsigned char                                              bUseDirectionalShadowDistanceLimit : 1;                  // 0x0690(0x0001) BIT_FIELD Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor
		unsigned char                                              bForcedAllowInstancedVertexColor : 1;                    // 0x0690(0x0001) BIT_FIELD Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor
		unsigned char                                              UnknownData_DIJL[0x3];                                   // 0x0691(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int32_t                                                    LandscapeInfoMask;                                       // 0x0694(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor
		int32_t                                                    OverriddenLightMapRes;                                   // 0x0698(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      DirectionalShadowDistanceLimit;                          // 0x069C(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      StreamingDistanceMultiplier;                             // 0x06A0(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay
		int32_t                                                    SubDivisionStepSize;                                     // 0x06A4(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              bUseSubDivisions : 1;                                    // 0x06A8(0x0001) BIT_FIELD NoDestructor
		unsigned char                                              UnknownData_5GYU[0x7];                                   // 0x06A9(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<struct FGuid>                                       IrrelevantLights;                                        // 0x06B0(0x0010) ZeroConstructor
		TArray<struct FStaticMeshComponentLODInfo>                 LODData;                                                 // 0x06C0(0x0010) ZeroConstructor, Transient
		struct FLightmassPrimitiveSettings                         LightmassSettings;                                       // 0x06D0(0x0018) Edit, BlueprintVisible
		unsigned char                                              UnknownData_6400[0x18];                                  // 0x06E8(0x0018) MISSED OFFSET (PADDING)

	public:
		bool SetStaticMesh(class UStaticMesh* NewMesh);
		void OnRep_StaticMesh(class UStaticMesh* OldStaticMesh);
		void GetLocalBounds(struct FVector* Min, struct FVector* Max);
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.ControlPointMeshComponent
	 * Size -> 0x0000 (FullSize[0x0700] - InheritedSize[0x0700])
	 */
	class UControlPointMeshComponent : public UStaticMeshComponent
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.GroundClutterComponent
	 * Size -> 0x0040 (FullSize[0x0740] - InheritedSize[0x0700])
	 */
	class UGroundClutterComponent : public UStaticMeshComponent
	{
	public:
		TArray<struct FClutterData>                                ClutterLayers;                                           // 0x0700(0x0010) Edit, ZeroConstructor
		TArray<struct FClutterData>                                ActiveClutterLayers;                                     // 0x0710(0x0010) ZeroConstructor
		int32_t                                                    LayerID;                                                 // 0x0720(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		bool                                                       bDrawDebugInfo;                                          // 0x0724(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_5KQH[0x1B];                                  // 0x0725(0x001B) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.InstancedStaticMeshComponent
	 * Size -> 0x0120 (FullSize[0x0820] - InheritedSize[0x0700])
	 */
	class UInstancedStaticMeshComponent : public UStaticMeshComponent
	{
	public:
		TArray<struct FInstancedStaticMeshInstanceData>            PerInstanceSMData;                                       // 0x0700(0x0010) Edit, ZeroConstructor, Transient, DuplicateTransient
		int32_t                                                    InstancingRandomSeed;                                    // 0x0710(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		int32_t                                                    InstanceStartCullDistance;                               // 0x0714(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor
		int32_t                                                    InstanceEndCullDistance;                                 // 0x0718(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_B7J6[0x4];                                   // 0x071C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<int32_t>                                            InstanceReorderTable;                                    // 0x0720(0x0010) ZeroConstructor
		unsigned char                                              UnknownData_L46Q[0x10];                                  // 0x0730(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<int32_t>                                            RemovedInstances;                                        // 0x0740(0x0010) ZeroConstructor
		float                                                      LargestSingleBounds;                                     // 0x0750(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_0P92[0x4];                                   // 0x0754(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UClass*                                              AttachedComponentClass;                                  // 0x0758(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor
		class UDestructibleMesh*                                   DestroyedMesh;                                           // 0x0760(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		class UClass*                                              DestroyedMeshActorClass;                                 // 0x0768(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      OverrideWalkableFloorZ;                                  // 0x0770(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      PlayerOverrideWalkableFloorZ;                            // 0x0774(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              bReplicateThisComponent : 1;                             // 0x0778(0x0001) BIT_FIELD Edit, SaveGame, NoDestructor
		unsigned char                                              bIsFallingTree : 1;                                      // 0x0778(0x0001) BIT_FIELD Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor
		unsigned char                                              bIgnoreVisibilityCheck : 1;                              // 0x0778(0x0001) BIT_FIELD Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor
		unsigned char                                              UnknownData_4UA4[0x7];                                   // 0x0779(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class USoundBase*                                          DestroyedSound;                                          // 0x0780(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_L3YO : 3;                                    // 0x0788(0x0001) BIT_FIELD (PADDING)
		unsigned char                                              bDontScaleAttachedComponent : 1;                         // 0x0788(0x0001) BIT_FIELD NoDestructor
		unsigned char                                              UnknownData_UUNG[0x3];                                   // 0x0789(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      ScaleMaxX;                                               // 0x078C(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      ScaleMinX;                                               // 0x0790(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      AttachedComponentScaleFactor;                            // 0x0794(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      MaxScaleForAttachedComponent;                            // 0x0798(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      MinScaleForAttachedComponent;                            // 0x079C(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      MeshUnscaledBounds;                                      // 0x07A0(0x0004) ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_2LN0[0x4];                                   // 0x07A4(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UClass*                                              DamageFXActorToSpawn;                                    // 0x07A8(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		TArray<class UMaterialInterface*>                          OverrideDestructionMaterials;                            // 0x07B0(0x0010) Edit, BlueprintVisible, ZeroConstructor
		unsigned char                                              UnknownData_3UED[0x30];                                  // 0x07C0(0x0030) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class UActorComponent*>                             ReferencedAttachedComponentObjects;                      // 0x07F0(0x0010) ExportObject, ZeroConstructor, Transient, ContainsInstancedReference
		unsigned char                                              UnknownData_HWZW[0x8];                                   // 0x0800(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<uint32_t>                                           InstancesVisibility;                                     // 0x0808(0x0010) Net, ZeroConstructor, SaveGame
		unsigned char                                              UnknownData_4Y8T[0x8];                                   // 0x0818(0x0008) MISSED OFFSET (PADDING)

	public:
		bool UpdateInstanceTransform(int32_t InstanceIndex, const struct UObject_FTransform& NewInstanceTransform, bool bWorldSpace);
		void ShowInstance(int32_t originalIndex);
		void SetCullDistances(int32_t StartCullDistance, int32_t EndCullDistance);
		bool RemoveInstance(int32_t InstanceIndex, const struct FVector& HitDirection);
		void MulticastShowInstances(TArray<int32_t> Indices, bool bMarkRenderStateDirty);
		void MulticastShowInstance(int32_t originalIndex);
		void MulticastHideInstance(int32_t originalIndex, const struct FVector& HitDirection);
		struct FVector GetPositionOfInstance(int32_t index);
		bool GetInstanceTransform(int32_t InstanceIndex, struct UObject_FTransform* OutInstanceTransform, bool bWorldSpace);
		int32_t GetInstanceCount();
		void DealDirectDamage(class APlayerController* ForPC, float DamageAmount, class UClass* DamageTypeClass, int32_t HitBodyIndex);
		void ClearInstances();
		int32_t AddInstanceWorldSpace(const struct UObject_FTransform& WorldTransform);
		int32_t AddInstance(const struct UObject_FTransform& InstanceTransform);
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.HierarchicalInstancedStaticMeshComponent
	 * Size -> 0x0080 (FullSize[0x08A0] - InheritedSize[0x0820])
	 */
	class UHierarchicalInstancedStaticMeshComponent : public UInstancedStaticMeshComponent
	{
	public:
		unsigned char                                              UnknownData_SC44[0x18];                                  // 0x0820(0x0018) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<int32_t>                                            SortedInstances;                                         // 0x0838(0x0010) ZeroConstructor
		unsigned char                                              UnknownData_XYGV[0x10];                                  // 0x0848(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int32_t                                                    NumBuiltInstances;                                       // 0x0858(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor
		struct FBox                                                UnbuiltInstanceBounds;                                   // 0x085C(0x001C) ZeroConstructor, IsPlainOldData, NoDestructor
		int32_t                                                    OcclusionLayerNumNodes;                                  // 0x0878(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_TWSW[0x24];                                  // 0x087C(0x0024) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.InteractiveFoliageComponent
	 * Size -> 0x0010 (FullSize[0x0710] - InheritedSize[0x0700])
	 */
	class UInteractiveFoliageComponent : public UStaticMeshComponent
	{
	public:
		unsigned char                                              UnknownData_PRTR[0x10];                                  // 0x0700(0x0010) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.SplineMeshComponent
	 * Size -> 0x0080 (FullSize[0x0780] - InheritedSize[0x0700])
	 */
	class USplineMeshComponent : public UStaticMeshComponent
	{
	public:
		unsigned char                                              UnknownData_L4OX[0x8];                                   // 0x0700(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FSplineMeshParams                                   SplineParams;                                            // 0x0708(0x0058) Edit
		struct FVector                                             SplineUpDir;                                             // 0x0760(0x000C) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              bSmoothInterpRollScale : 1;                              // 0x076C(0x0001) BIT_FIELD Edit, NoDestructor, AdvancedDisplay
		unsigned char                                              UnknownData_C9WT[0x3];                                   // 0x076D(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		ESplineMeshAxis                                            ForwardAxis;                                             // 0x0770(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_P58E[0x7];                                   // 0x0771(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UBodySetup*                                          BodySetup;                                               // 0x0778(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor

	public:
		void SetStartTangent(const struct FVector& StartTangent);
		void SetStartScale(const struct FVector2D& StartScale);
		void SetStartRoll(float StartRoll);
		void SetStartPosition(const struct FVector& StartPos);
		void SetStartOffset(const struct FVector2D& StartOffset);
		void SetStartAndEnd(const struct FVector& StartPos, const struct FVector& StartTangent, const struct FVector& EndPos, const struct FVector& EndTangent);
		void SetEndTangent(const struct FVector& EndTangent);
		void SetEndScale(const struct FVector2D& EndScale);
		void SetEndRoll(float EndRoll);
		void SetEndPosition(const struct FVector& EndPos);
		void SetEndOffset(const struct FVector2D& EndOffset);
		struct FVector GetStartTangent();
		struct FVector2D GetStartScale();
		float GetStartRoll();
		struct FVector GetStartPosition();
		struct FVector2D GetStartOffset();
		struct FVector GetEndTangent();
		struct FVector2D GetEndScale();
		float GetEndRoll();
		struct FVector GetEndPosition();
		struct FVector2D GetEndOffset();
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.ModelComponent
	 * Size -> 0x0048 (FullSize[0x06B0] - InheritedSize[0x0668])
	 */
	class UModelComponent : public UPrimitiveComponent
	{
	public:
		unsigned char                                              UnknownData_QGBH[0x8];                                   // 0x0668(0x0008) Fix Super Size
		unsigned char                                              UnknownData_90AZ[0x10];                                  // 0x0670(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UBodySetup*                                          ModelBodySetup;                                          // 0x0680(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_69HG[0x28];                                  // 0x0688(0x0028) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.NavLinkRenderingComponent
	 * Size -> 0x0008 (FullSize[0x0670] - InheritedSize[0x0668])
	 */
	class UNavLinkRenderingComponent : public UPrimitiveComponent
	{
	public:
		unsigned char                                              UnknownData_9SQK[0x8];                                   // 0x0668(0x0008) Fix Super Size

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.NavMeshRenderingComponent
	 * Size -> 0x0008 (FullSize[0x0670] - InheritedSize[0x0668])
	 */
	class UNavMeshRenderingComponent : public UPrimitiveComponent
	{
	public:
		unsigned char                                              UnknownData_95J8[0x8];                                   // 0x0668(0x0008) Fix Super Size

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.NavTestRenderingComponent
	 * Size -> 0x0008 (FullSize[0x0670] - InheritedSize[0x0668])
	 */
	class UNavTestRenderingComponent : public UPrimitiveComponent
	{
	public:
		unsigned char                                              UnknownData_R56T[0x8];                                   // 0x0668(0x0008) Fix Super Size

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.NiagaraComponent
	 * Size -> 0x0038 (FullSize[0x06A0] - InheritedSize[0x0668])
	 */
	class UNiagaraComponent : public UPrimitiveComponent
	{
	public:
		unsigned char                                              UnknownData_I2B7[0x8];                                   // 0x0668(0x0008) Fix Super Size
		class UNiagaraScript*                                      UpdateScript;                                            // 0x0670(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		class UNiagaraScript*                                      SpawnScript;                                             // 0x0678(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		ERenderModuleType                                          RenderModuleType;                                        // 0x0680(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_MLKE[0x7];                                   // 0x0681(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UMaterialInterface*                                  Material;                                                // 0x0688(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      SpawnRate;                                               // 0x0690(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_VRIX[0xC];                                   // 0x0694(0x000C) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.BlendableInterface
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class UBlendableInterface : public UInterface
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.ParticleSystem
	 * Size -> 0x0100 (FullSize[0x0128] - InheritedSize[0x0028])
	 */
	class UParticleSystem : public UObject
	{
	public:
		EParticleSystemUpdateMode                                  SystemUpdateMode;                                        // 0x0028(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable
		unsigned char                                              UnknownData_NSR3[0x3];                                   // 0x0029(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      UpdateTime_FPS;                                          // 0x002C(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      UpdateTime_Delta;                                        // 0x0030(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      WarmupTime;                                              // 0x0034(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      WarmupTickRate;                                          // 0x0038(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      CustomTimeDilation;                                      // 0x003C(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		TArray<class UParticleEmitter*>                            Emitters;                                                // 0x0040(0x0010) ExportObject, ZeroConstructor, ContainsInstancedReference
		class UParticleSystemComponent*                            PreviewComponent;                                        // 0x0050(0x0008) ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor
		unsigned char                                              bLit : 1;                                                // 0x0058(0x0001) BIT_FIELD Deprecated, NoDestructor
		unsigned char                                              UnknownData_TK8Y[0x7];                                   // 0x0059(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UInterpCurveEdSetup*                                 CurveEdSetup;                                            // 0x0060(0x0008) ExportObject, ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              bOrientZAxisTowardCamera : 1;                            // 0x0068(0x0001) BIT_FIELD Edit, NoDestructor
		unsigned char                                              bAllowLOD : 1;                                           // 0x0068(0x0001) BIT_FIELD Edit, NoDestructor
		unsigned char                                              bForceHighQualityEmitter : 1;                            // 0x0068(0x0001) BIT_FIELD Edit, NoDestructor
		unsigned char                                              bForcePreventInactiveLoopReset : 1;                      // 0x0068(0x0001) BIT_FIELD Edit, NoDestructor
		unsigned char                                              UnknownData_7UPV[0x3];                                   // 0x0069(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      LODDistanceCheckTime;                                    // 0x006C(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		EParticleSystemLODMethod                                   LODMethod;                                               // 0x0070(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_JHN0[0x7];                                   // 0x0071(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<float>                                              LODDistances;                                            // 0x0078(0x0010) Edit, EditFixedSize, ZeroConstructor
		unsigned char                                              bRegenerateLODDuplicate : 1;                             // 0x0088(0x0001) BIT_FIELD NoDestructor
		unsigned char                                              UnknownData_4TVB[0x7];                                   // 0x0089(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<struct FParticleSystemLOD>                          LODSettings;                                             // 0x0090(0x0010) Edit, ZeroConstructor
		unsigned char                                              bUseFixedRelativeBoundingBox : 1;                        // 0x00A0(0x0001) BIT_FIELD Edit, NoDestructor
		unsigned char                                              UnknownData_YH0I[0x3];                                   // 0x00A1(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FBox                                                FixedRelativeBoundingBox;                                // 0x00A4(0x001C) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      OverrideMaxDrawDistance;                                 // 0x00C0(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      SecondsBeforeInactive;                                   // 0x00C4(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              bShouldResetPeakCounts : 1;                              // 0x00C8(0x0001) BIT_FIELD NoDestructor
		unsigned char                                              bHasPhysics : 1;                                         // 0x00C8(0x0001) BIT_FIELD Transient, NoDestructor
		unsigned char                                              bUseRealtimeThumbnail : 1;                               // 0x00C8(0x0001) BIT_FIELD Edit, NoDestructor
		unsigned char                                              ThumbnailImageOutOfDate : 1;                             // 0x00C8(0x0001) BIT_FIELD NoDestructor
		unsigned char                                              bIsLooping : 1;                                          // 0x00C8(0x0001) BIT_FIELD Edit, Transient, EditConst, NoDestructor
		unsigned char                                              bUsesGPUParticles : 1;                                   // 0x00C8(0x0001) BIT_FIELD Edit, Transient, EditConst, NoDestructor
		unsigned char                                              UnknownData_GXGV[0x3];                                   // 0x00C9(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      Delay;                                                   // 0x00CC(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable
		float                                                      DelayLow;                                                // 0x00D0(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              bUseDelayRange : 1;                                      // 0x00D4(0x0001) BIT_FIELD Edit, NoDestructor
		unsigned char                                              UnknownData_747H[0x3];                                   // 0x00D5(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FVector                                             MacroUVPosition;                                         // 0x00D8(0x000C) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      MacroUVRadius;                                           // 0x00E4(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		EParticleSystemOcclusionBoundsMethod                       OcclusionBoundsMethod;                                   // 0x00E8(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_9IJA[0x3];                                   // 0x00E9(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FBox                                                CustomOcclusionBounds;                                   // 0x00EC(0x001C) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		TArray<struct FLODSoloTrack>                               SoloTracking;                                            // 0x0108(0x0010) ZeroConstructor, Transient
		TArray<struct FNamedEmitterMaterial>                       NamedMaterialSlots;                                      // 0x0118(0x0010) Edit, ZeroConstructor

	public:
		bool ContainsEmitterType(class UClass* TypeData);
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.ShapeComponent
	 * Size -> 0x0020 (FullSize[0x0688] - InheritedSize[0x0668])
	 */
	class UShapeComponent : public UPrimitiveComponent
	{
	public:
		unsigned char                                              UnknownData_Z2MT[0x8];                                   // 0x0668(0x0008) Fix Super Size
		class UBodySetup*                                          ShapeBodySetup;                                          // 0x0670(0x0008) ZeroConstructor, Transient, DuplicateTransient, IsPlainOldData, NoDestructor
		class UMaterialInterface*                                  ShapeMaterial;                                           // 0x0678(0x0008) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay
		unsigned char                                              bDrawOnlyIfSelected : 1;                                 // 0x0680(0x0001) BIT_FIELD NoDestructor
		unsigned char                                              bShouldCollideWhenPlacing : 1;                           // 0x0680(0x0001) BIT_FIELD NoDestructor
		unsigned char                                              UnknownData_GYIW[0x7];                                   // 0x0681(0x0007) Fix size for supers

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.BoxComponent
	 * Size -> 0x0018 (FullSize[0x06A0] - InheritedSize[0x0688])
	 */
	class UBoxComponent : public UShapeComponent
	{
	public:
		struct FVector                                             BoxExtent;                                               // 0x0688(0x000C) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected
		unsigned char                                              UnknownData_O6WR[0xC];                                   // 0x0694(0x000C) MISSED OFFSET (PADDING)

	public:
		void SetBoxExtent(const struct FVector& InBoxExtent, bool bUpdateOverlaps);
		struct FVector GetUnscaledBoxExtent();
		struct FVector GetScaledBoxExtent();
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.CapsuleComponent
	 * Size -> 0x0018 (FullSize[0x06A0] - InheritedSize[0x0688])
	 */
	class UCapsuleComponent : public UShapeComponent
	{
	public:
		unsigned char                                              UnknownData_AZRJ[0x4];                                   // 0x0688(0x0004) Fix Super Size
		float                                                      CapsuleRadius;                                           // 0x068C(0x0004) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected
		float                                                      CapsuleHeight;                                           // 0x0690(0x0004) ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, Protected
		unsigned char                                              UnknownData_IHIK[0xC];                                   // 0x0694(0x000C) MISSED OFFSET (PADDING)

	public:
		void SetCapsuleSize(float InRadius, float InHalfHeight, bool bUpdateOverlaps);
		void SetCapsuleRadius(float Radius, bool bUpdateOverlaps);
		void SetCapsuleHalfHeight(float HalfHeight, bool bUpdateOverlaps);
		void GetUnscaledCapsuleSize(float* outRadius, float* OutHalfHeight);
		float GetUnscaledCapsuleRadius();
		float GetUnscaledCapsuleHalfHeight();
		float GetShapeScale();
		void GetScaledCapsuleSize(float* outRadius, float* OutHalfHeight);
		float GetScaledCapsuleRadius();
		float GetScaledCapsuleHalfHeight();
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.SphereComponent
	 * Size -> 0x0008 (FullSize[0x0690] - InheritedSize[0x0688])
	 */
	class USphereComponent : public UShapeComponent
	{
	public:
		unsigned char                                              UnknownData_O15Y[0x8];                                   // 0x0688(0x0008) Fix Super Size

	public:
		void SetSphereRadius(float InSphereRadius, bool bUpdateOverlaps);
		float GetUnscaledSphereRadius();
		float GetShapeScale();
		float GetScaledSphereRadius();
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.DrawSphereComponent
	 * Size -> 0x0000 (FullSize[0x0690] - InheritedSize[0x0690])
	 */
	class UDrawSphereComponent : public USphereComponent
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.TextRenderComponent
	 * Size -> 0x0048 (FullSize[0x06B0] - InheritedSize[0x0668])
	 */
	class UTextRenderComponent : public UPrimitiveComponent
	{
	public:
		class FString                                              Text;                                                    // 0x0668(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor
		class UMaterialInterface*                                  TextMaterial;                                            // 0x0678(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor
		class UFont*                                               Font;                                                    // 0x0680(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor
		EHorizTextAligment                                         HorizontalAlignment;                                     // 0x0688(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor
		EVerticalTextAligment                                      VerticalAlignment;                                       // 0x0689(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_PLBY[0x2];                                   // 0x068A(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FColor                                              TextRenderColor;                                         // 0x068C(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      XScale;                                                  // 0x0690(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      YScale;                                                  // 0x0694(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      WorldSize;                                               // 0x0698(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      InvDefaultSize;                                          // 0x069C(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      HorizSpacingAdjust;                                      // 0x06A0(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              bAlwaysRenderAsText : 1;                                 // 0x06A4(0x0001) BIT_FIELD Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor
		unsigned char                                              UnknownData_BVFR[0xB];                                   // 0x06A5(0x000B) MISSED OFFSET (PADDING)

	public:
		void SetYScale(float Value);
		void SetXScale(float Value);
		void SetWorldSize(float Value);
		void SetVerticalAlignment(EVerticalTextAligment Value);
		void SetTextRenderColor(const struct FColor& Value);
		void SetTextMaterial(class UMaterialInterface* Material);
		void SetText(const class FString& Value);
		void SetHorizSpacingAdjust(float Value);
		void SetHorizontalAlignment(EHorizTextAligment Value);
		void SetFont(class UFont* Value);
		struct FVector GetTextWorldSize();
		struct FVector GetTextLocalSize();
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.VectorFieldComponent
	 * Size -> 0x0028 (FullSize[0x0690] - InheritedSize[0x0668])
	 */
	class UVectorFieldComponent : public UPrimitiveComponent
	{
	public:
		class UVectorField*                                        VectorField;                                             // 0x0668(0x0008) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      Intensity;                                               // 0x0670(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor
		float                                                      Tightness;                                               // 0x0674(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              bPreviewVectorField : 1;                                 // 0x0678(0x0001) BIT_FIELD Transient, NoDestructor
		unsigned char                                              UnknownData_VZ9W[0x17];                                  // 0x0679(0x0017) MISSED OFFSET (PADDING)

	public:
		void SetIntensity(float NewIntensity);
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.RadialForceComponent
	 * Size -> 0x0038 (FullSize[0x0210] - InheritedSize[0x01D8])
	 */
	class URadialForceComponent : public USceneComponent
	{
	public:
		unsigned char                                              UnknownData_2JQD[0x8];                                   // 0x01D8(0x0008) Fix Super Size
		float                                                      ImpulseStrength;                                         // 0x01E0(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              bImpulseVelChange : 1;                                   // 0x01E4(0x0001) BIT_FIELD Edit, BlueprintVisible, NoDestructor
		unsigned char                                              UnknownData_OQO6[0x3];                                   // 0x01E5(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      ForceStrength;                                           // 0x01E8(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      DestructibleDamage;                                      // 0x01EC(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              bForceEnabled : 1;                                       // 0x01F0(0x0001) BIT_FIELD Deprecated, NoDestructor
		unsigned char                                              UnknownData_HB11[0x7];                                   // 0x01F1(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<EObjectTypeQuery>                                   ObjectTypesToAffect;                                     // 0x01F8(0x0010) Edit, ZeroConstructor, Protected
		unsigned char                                              UnknownData_WGQJ[0x8];                                   // 0x0208(0x0008) MISSED OFFSET (PADDING)

	public:
		void RemoveObjectTypeToAffect(EObjectTypeQuery ObjectType);
		void FireImpulse();
		void AddObjectTypeToAffect(EObjectTypeQuery ObjectType);
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.ReflectionCaptureComponent
	 * Size -> 0x01C8 (FullSize[0x03A0] - InheritedSize[0x01D8])
	 */
	class UReflectionCaptureComponent : public USceneComponent
	{
	public:
		unsigned char                                              UnknownData_8ZSL[0x4];                                   // 0x01D8(0x0004) Fix Super Size
		float                                                      CaptureBrightness;                                       // 0x01DC(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor
		class AReflectionCapture*                                  CaptureParent;                                           // 0x01E0(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor
		class FName                                                PresistentCaptureParent;                                 // 0x01E8(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor
		class UTextureCube*                                        AmbientCubemap;                                          // 0x01F0(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor
		struct FLinearColor                                        SkyColor;                                                // 0x01F8(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor
		struct FLinearColor                                        GroundColor;                                             // 0x0208(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor
		float                                                      SkyIBLIntensity;                                         // 0x0218(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      FadeOutDistanceStart;                                    // 0x021C(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      FadeOutDistanceEnd;                                      // 0x0220(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor
		bool                                                       bUseSeperateShadowFadeOut;                               // 0x0224(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_LVDS[0x3];                                   // 0x0225(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      ShadowFadeOutDistanceStart;                              // 0x0228(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      ShadowFadeOutDistanceEnd;                                // 0x022C(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor
		int32_t                                                    Bounces;                                                 // 0x0230(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_X1WR[0x4];                                   // 0x0234(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<float>                                              BouncesIntensity;                                        // 0x0238(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor
		float                                                      AtmosphericFogIntensity;                                 // 0x0248(0x0004) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      TheTrueSkyBrightness;                                    // 0x024C(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor
		struct FVector                                             TrueSkyColorMultiplier;                                  // 0x0250(0x000C) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              bBakeAndStream : 1;                                      // 0x025C(0x0001) BIT_FIELD Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor
		unsigned char                                              bUseGlobalBrightness : 1;                                // 0x025C(0x0001) BIT_FIELD Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor
		unsigned char                                              bLockCaptureData : 1;                                    // 0x025C(0x0001) BIT_FIELD Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor
		unsigned char                                              bUseGlobalGroundColorMultiplier : 1;                     // 0x025C(0x0001) BIT_FIELD Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor
		unsigned char                                              bUseGlobalSkyColorMultiplier : 1;                        // 0x025C(0x0001) BIT_FIELD Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor
		unsigned char                                              bUseGlobalSkyIntensityMultiplier : 1;                    // 0x025C(0x0001) BIT_FIELD Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor
		unsigned char                                              bUseParentBrightness : 1;                                // 0x025C(0x0001) BIT_FIELD Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor
		unsigned char                                              UnknownData_KCNF[0x3];                                   // 0x025D(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      ParentBrightnessMultiplier;                              // 0x0260(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      SelfAndChildBrightnessMultiplier;                        // 0x0264(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              bUseParentAmbientLightInfo : 1;                          // 0x0268(0x0001) BIT_FIELD Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor
		unsigned char                                              bCaptureAmbientShadow : 1;                               // 0x0268(0x0001) BIT_FIELD Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor
		unsigned char                                              UnknownData_MOG1[0x3];                                   // 0x0269(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      AmbientShadowIntensity;                                  // 0x026C(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      AmbientLightInfluence;                                   // 0x0270(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      AmbientShadowNear;                                       // 0x0274(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      AmbientShadowFar;                                        // 0x0278(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      AmbientShadowFadeDistanceFraction;                       // 0x027C(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor
		struct FLinearColor                                        AmbientTranslucencyColor;                                // 0x0280(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor
		int32_t                                                    AmbientShadowCaptureObjectLayerMask;                     // 0x0290(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      AmbientShadowCaptureScale;                               // 0x0294(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor
		int32_t                                                    MaxAmbientShadowCaptureSize;                             // 0x0298(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor
		EReflectionDFAOOption                                      DFAOOption;                                              // 0x029C(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_HNX6[0xBB];                                  // 0x029D(0x00BB) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FGuid                                               StateId;                                                 // 0x0358(0x0010) ZeroConstructor
		unsigned char                                              UnknownData_8CL3[0x38];                                  // 0x0368(0x0038) MISSED OFFSET (PADDING)

	public:
		void SetBrightness(float NewBrightness);
		void ForceUpdateReflectionCapture();
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.BoxReflectionCaptureComponent
	 * Size -> 0x0020 (FullSize[0x03C0] - InheritedSize[0x03A0])
	 */
	class UBoxReflectionCaptureComponent : public UReflectionCaptureComponent
	{
	public:
		float                                                      BoxTransitionDistance;                                   // 0x03A0(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_QYOC[0x4];                                   // 0x03A4(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UBoxComponent*                                       PreviewInfluenceBox;                                     // 0x03A8(0x0008) ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor
		class UBoxComponent*                                       PreviewCaptureBox;                                       // 0x03B0(0x0008) ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_XVLW[0x8];                                   // 0x03B8(0x0008) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.PlaneReflectionCaptureComponent
	 * Size -> 0x0020 (FullSize[0x03C0] - InheritedSize[0x03A0])
	 */
	class UPlaneReflectionCaptureComponent : public UReflectionCaptureComponent
	{
	public:
		float                                                      InfluenceRadiusScale;                                    // 0x03A0(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_AFG1[0x4];                                   // 0x03A4(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UDrawSphereComponent*                                PreviewInfluenceRadius;                                  // 0x03A8(0x0008) ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor
		class UBoxComponent*                                       PreviewCaptureBox;                                       // 0x03B0(0x0008) ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_2AVQ[0x8];                                   // 0x03B8(0x0008) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.SphereReflectionCaptureComponent
	 * Size -> 0x0020 (FullSize[0x03C0] - InheritedSize[0x03A0])
	 */
	class USphereReflectionCaptureComponent : public UReflectionCaptureComponent
	{
	public:
		float                                                      InfluenceRadius;                                         // 0x03A0(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      UsedWithDFAOInfluenceRadiusMultiplier;                   // 0x03A4(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      Falloff;                                                 // 0x03A8(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      ShadowFallOff;                                           // 0x03AC(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      PercentOfRadiusToStartFalloff;                           // 0x03B0(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      CaptureDistanceScale;                                    // 0x03B4(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor
		class UDrawSphereComponent*                                PreviewInfluenceRadius;                                  // 0x03B8(0x0008) ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.SceneCaptureComponent
	 * Size -> 0x0018 (FullSize[0x01F0] - InheritedSize[0x01D8])
	 */
	class USceneCaptureComponent : public USceneComponent
	{
	public:
		TArray<TWeakObjectPtr<class UPrimitiveComponent>>          HiddenComponents;                                        // 0x01D8(0x0010) ExportObject, ZeroConstructor, ContainsInstancedReference
		bool                                                       bCaptureEveryFrame;                                      // 0x01E8(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_QZ55[0x3];                                   // 0x01E9(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      MaxViewDistanceOverride;                                 // 0x01EC(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor

	public:
		void HideComponent(class UPrimitiveComponent* InComponent);
		void HideActorComponents(class AActor* InActor);
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.SceneCaptureComponent2D
	 * Size -> 0x0380 (FullSize[0x0570] - InheritedSize[0x01F0])
	 */
	class USceneCaptureComponent2D : public USceneCaptureComponent
	{
	public:
		float                                                      FOVAngle;                                                // 0x01F0(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor
		unsigned char                                              UnknownData_VILN[0x4];                                   // 0x01F4(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UTextureRenderTarget2D*                              TextureTarget;                                           // 0x01F8(0x0008) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		struct FVector2D                                           DesiredTargetSize;                                       // 0x0200(0x0008) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		ESceneCaptureSource                                        CaptureSource;                                           // 0x0208(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor
		unsigned char                                              UnknownData_WWWQ[0x7];                                   // 0x0209(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FPostProcessSettings                                PostProcessSettings;                                     // 0x0210(0x0358) Edit, BlueprintVisible, Interp
		float                                                      PostProcessBlendWeight;                                  // 0x0568(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor
		unsigned char                                              UnknownData_VWT0[0x4];                                   // 0x056C(0x0004) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.SceneCaptureComponentCube
	 * Size -> 0x0010 (FullSize[0x0200] - InheritedSize[0x01F0])
	 */
	class USceneCaptureComponentCube : public USceneCaptureComponent
	{
	public:
		class UTextureRenderTargetCube*                            TextureTarget;                                           // 0x01F0(0x0008) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_GFJE[0x8];                                   // 0x01F8(0x0008) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.SplineComponent
	 * Size -> 0x0048 (FullSize[0x0220] - InheritedSize[0x01D8])
	 */
	class USplineComponent : public USceneComponent
	{
	public:
		struct FInterpCurveVector                                  SplineInfo;                                              // 0x01D8(0x0010) ZeroConstructor
		struct FInterpCurveFloat                                   SplineReparamTable;                                      // 0x01E8(0x0010) ZeroConstructor, Transient, TextExportTransient
		bool                                                       bAllowSplineEditingPerInstance;                          // 0x01F8(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		bool                                                       bShowSplineDirectionOnAllPoints;                         // 0x01F9(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay
		bool                                                       bAlwaysDrawSplineInEditorViewport;                       // 0x01FA(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay
		unsigned char                                              UnknownData_NT8E[0x1];                                   // 0x01FB(0x0001) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      SplineDirectionArrowSize;                                // 0x01FC(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay
		struct FLinearColor                                        SplineDrawColor;                                         // 0x0200(0x0010) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay
		int32_t                                                    ReparamStepsPerSegment;                                  // 0x0210(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay
		float                                                      Duration;                                                // 0x0214(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		bool                                                       bStationaryEndpoints;                                    // 0x0218(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay
		unsigned char                                              UnknownData_ITTW[0x7];                                   // 0x0219(0x0007) MISSED OFFSET (PADDING)

	public:
		void SetWorldSplinePointsAndType(TArray<struct FVector> Points, ESplinePointType Type);
		void SetWorldLocationAtSplinePoint(int32_t PointIndex, const struct FVector& InLocation);
		void SetTangentAtSplinePoint(int32_t PointIndex, const struct FVector& InTangent, ESplineCoordinateSpace CoordinateSpace);
		void SetSplineWorldPoints(TArray<struct FVector> Points);
		void SetSplinePointTypeAllPoints(ESplinePointType Type);
		void SetSplinePointType(int32_t PointIndex, ESplinePointType Type);
		void SetSplineLocalPoints(TArray<struct FVector> Points);
		struct FVector GetWorldTangentAtDistanceAlongSpline(float Distance);
		struct FRotator GetWorldRotationAtTime(float Time, bool bUseConstantVelocity);
		struct FRotator GetWorldRotationAtDistanceAlongSpline(float Distance);
		struct FVector GetWorldLocationAtTime(float Time, bool bUseConstantVelocity);
		struct FVector GetWorldLocationAtSplinePoint(int32_t PointIndex);
		struct FVector GetWorldLocationAtDistanceAlongSpline(float Distance);
		struct FVector GetWorldDirectionAtTime(float Time, bool bUseConstantVelocity);
		struct FVector GetWorldDirectionAtDistanceAlongSpline(float Distance);
		ESplinePointType GetSplinePointType(int32_t PointIndex);
		float GetSplineLength();
		int32_t GetNumSplinePoints();
		void GetLocalLocationAndTangentAtSplinePoint(int32_t PointIndex, struct FVector* LocalLocation, struct FVector* LocalTangent);
		float GetInputKeyAtDistanceAlongSpline(float Distance);
		float GetDistanceAlongSplineAtSplinePoint(int32_t PointIndex);
		struct FVector FindLocationClosestToWorldLocation(const struct FVector& WorldLocation, ESplineCoordinateSpace CoordinateSpace);
		float FindInputKeyClosestToWorldLocation(const struct FVector& WorldLocation);
		struct FVector FindDirectionClosestToWorldLocation(const struct FVector& WorldLocation, ESplineCoordinateSpace CoordinateSpace);
		void ClearSplinePoints();
		void AddSplineWorldPoint(const struct FVector& Position);
		void AddSplineLocalPoint(const struct FVector& Position);
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.SpringArmComponent
	 * Size -> 0x0078 (FullSize[0x0250] - InheritedSize[0x01D8])
	 */
	class USpringArmComponent : public USceneComponent
	{
	public:
		unsigned char                                              UnknownData_N37N[0x4];                                   // 0x01D8(0x0004) Fix Super Size
		struct FVector                                             SocketOffset;                                            // 0x01DC(0x000C) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		struct FVector                                             TargetOffset;                                            // 0x01E8(0x000C) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      ProbeSize;                                               // 0x01F4(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		ECollisionChannel                                          ProbeChannel;                                            // 0x01F8(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_B2PV[0x3];                                   // 0x01F9(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		unsigned char                                              bDoCollisionTest : 1;                                    // 0x01FC(0x0001) BIT_FIELD Edit, BlueprintVisible, NoDestructor
		unsigned char                                              bUsePawnControlRotation : 1;                             // 0x01FC(0x0001) BIT_FIELD Edit, BlueprintVisible, NoDestructor
		unsigned char                                              bInheritPitch : 1;                                       // 0x01FC(0x0001) BIT_FIELD Edit, BlueprintVisible, NoDestructor
		unsigned char                                              bInheritYaw : 1;                                         // 0x01FC(0x0001) BIT_FIELD Edit, BlueprintVisible, NoDestructor
		unsigned char                                              bInheritRoll : 1;                                        // 0x01FC(0x0001) BIT_FIELD Edit, BlueprintVisible, NoDestructor
		unsigned char                                              bEnableCameraLag : 1;                                    // 0x01FC(0x0001) BIT_FIELD Edit, BlueprintVisible, NoDestructor
		unsigned char                                              bEnableCameraRotationLag : 1;                            // 0x01FC(0x0001) BIT_FIELD Edit, BlueprintVisible, NoDestructor
		unsigned char                                              UnknownData_JEI1[0x3];                                   // 0x01FD(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      CameraLagSpeed;                                          // 0x0200(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      CameraRotationLagSpeed;                                  // 0x0204(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_Q9BP[0x48];                                  // 0x0208(0x0048) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.WindDirectionalSourceComponent
	 * Size -> 0x0018 (FullSize[0x01F0] - InheritedSize[0x01D8])
	 */
	class UWindDirectionalSourceComponent : public USceneComponent
	{
	public:
		unsigned char                                              UnknownData_1NOP[0x4];                                   // 0x01D8(0x0004) Fix Super Size
		float                                                      Speed;                                                   // 0x01DC(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor
		unsigned char                                              UnknownData_20G9[0x10];                                  // 0x01E0(0x0010) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.TimelineComponent
	 * Size -> 0x0098 (FullSize[0x0170] - InheritedSize[0x00D8])
	 */
	class UTimelineComponent : public UActorComponent
	{
	public:
		struct FTimeline                                           TheTimeline;                                             // 0x00D8(0x0098) Net, RepNotify, ContainsInstancedReference

	public:
		void Stop();
		void SetTimelineLengthMode(ETimelineLengthMode NewLengthMode);
		void SetTimelineLength(float NewLength);
		void SetPlayRate(float NewRate);
		void SetPlaybackPosition(float NewPosition, bool bFireEvents);
		void SetNewTime(float NewTime);
		void SetLooping(bool bNewLooping);
		void ReverseFromEnd();
		void Reverse();
		void PlayFromStart();
		void Play();
		void OnTimelineVector__DelegateSignature(const struct FVector& Output);
		void OnTimelineLinearColor__DelegateSignature(const struct FLinearColor& Output);
		void OnTimelineFloat__DelegateSignature(float Output);
		void OnTimelineEvent__DelegateSignature();
		void OnRep_Timeline();
		bool IsReversing();
		bool IsPlaying();
		bool IsLooping();
		float GetTimelineLength();
		float GetPlayRate();
		float GetPlaybackPosition();
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.AnimSequenceBase
	 * Size -> 0x0028 (FullSize[0x0068] - InheritedSize[0x0040])
	 */
	class UAnimSequenceBase : public UAnimationAsset
	{
	public:
		TArray<struct FAnimNotifyEvent>                            Notifies;                                                // 0x0040(0x0010) ZeroConstructor
		float                                                      SequenceLength;                                          // 0x0050(0x0004) Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, AssetRegistrySearchable
		float                                                      RateScale;                                               // 0x0054(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		struct FRawCurveTracks                                     RawCurveData;                                            // 0x0058(0x0010)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.AnimCompositeBase
	 * Size -> 0x0000 (FullSize[0x0068] - InheritedSize[0x0068])
	 */
	class UAnimCompositeBase : public UAnimSequenceBase
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.AnimComposite
	 * Size -> 0x0010 (FullSize[0x0078] - InheritedSize[0x0068])
	 */
	class UAnimComposite : public UAnimCompositeBase
	{
	public:
		struct FAnimTrack                                          AnimationTrack;                                          // 0x0068(0x0010)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.AnimSequence
	 * Size -> 0x00E8 (FullSize[0x0150] - InheritedSize[0x0068])
	 */
	class UAnimSequence : public UAnimSequenceBase
	{
	public:
		int32_t                                                    NumFrames;                                               // 0x0068(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable
		unsigned char                                              UnknownData_7I7W[0x4];                                   // 0x006C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<struct FTrackToSkeletonMap>                         TrackToSkeletonMapTable;                                 // 0x0070(0x0010) ZeroConstructor
		unsigned char                                              UnknownData_YJKA[0x10];                                  // 0x0080(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<struct FTranslationTrack>                           TranslationData;                                         // 0x0090(0x0010) ZeroConstructor, Transient
		TArray<struct FRotationTrack>                              RotationData;                                            // 0x00A0(0x0010) ZeroConstructor, Transient
		TArray<struct FScaleTrack>                                 ScaleData;                                               // 0x00B0(0x0010) ZeroConstructor, Transient
		TArray<struct FCurveTrack>                                 CurveData;                                               // 0x00C0(0x0010) ZeroConstructor, Deprecated
		EAnimationCompressionFormat                                TranslationCompressionFormat;                            // 0x00D0(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor
		EAnimationCompressionFormat                                RotationCompressionFormat;                               // 0x00D1(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor
		EAnimationCompressionFormat                                ScaleCompressionFormat;                                  // 0x00D2(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_U3MJ[0x5];                                   // 0x00D3(0x0005) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<int32_t>                                            CompressedTrackOffsets;                                  // 0x00D8(0x0010) ZeroConstructor
		struct FCompressedOffsetData                               CompressedScaleOffsets;                                  // 0x00E8(0x0018)
		unsigned char                                              UnknownData_9HZ6[0x10];                                  // 0x0100(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		EAnimationKeyFormat                                        KeyEncodingFormat;                                       // 0x0110(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_TU79[0x1F];                                  // 0x0111(0x001F) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		EAdditiveAnimationType                                     AdditiveAnimType;                                        // 0x0130(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable
		EAdditiveBasePoseType                                      RefPoseType;                                             // 0x0131(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_66M9[0x6];                                   // 0x0132(0x0006) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UAnimSequence*                                       RefPoseSeq;                                              // 0x0138(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		int32_t                                                    RefFrameIndex;                                           // 0x0140(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		int32_t                                                    EncodingPkgVersion;                                      // 0x0144(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor
		class FName                                                RetargetSource;                                          // 0x0148(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.AnimMontage
	 * Size -> 0x0048 (FullSize[0x00B0] - InheritedSize[0x0068])
	 */
	class UAnimMontage : public UAnimCompositeBase
	{
	public:
		float                                                      BlendInTime;                                             // 0x0068(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      BlendOutTime;                                            // 0x006C(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		bool                                                       bClientPlayWhenNotRendered;                              // 0x0070(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		bool                                                       bForceTickPoseAndServerUpdateMesh;                       // 0x0071(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		bool                                                       bAnimPauseOnFinish;                                      // 0x0072(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_SEC8[0x5];                                   // 0x0073(0x0005) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<struct FCompositeSection>                           CompositeSections;                                       // 0x0078(0x0010) ZeroConstructor
		TArray<struct FSlotAnimationTrack>                         SlotAnimTracks;                                          // 0x0088(0x0010) ZeroConstructor
		TArray<struct FBranchingPoint>                             BranchingPoints;                                         // 0x0098(0x0010) ZeroConstructor
		bool                                                       bEnableRootMotionTranslation;                            // 0x00A8(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		bool                                                       bEnableRootMotionRotation;                               // 0x00A9(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		ERootMotionRootLock                                        RootMotionRootLock;                                      // 0x00AA(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_4RST[0x5];                                   // 0x00AB(0x0005) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.BlendSpaceBase
	 * Size -> 0x00B8 (FullSize[0x00F8] - InheritedSize[0x0040])
	 */
	class UBlendSpaceBase : public UAnimationAsset
	{
	public:
		struct FBlendParameter                                     BlendParameters[0x3];                                    // 0x0040(0x0060) Protected
		struct FInterpolationParameter                             InterpolationParam[0x3];                                 // 0x00A0(0x0018) Edit, Protected
		float                                                      TargetWeightInterpolationSpeedPerSec;                    // 0x00B8(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected
		ENotifyTriggerMode                                         NotifyTriggerMode;                                       // 0x00BC(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected
		bool                                                       bRotationBlendInMeshSpace;                               // 0x00BD(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_GPQY[0x2];                                   // 0x00BE(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int32_t                                                    NumOfDimension;                                          // 0x00C0(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      AnimLength;                                              // 0x00C4(0x0004) ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		TArray<struct FPerBoneInterpolation>                       PerBoneBlend;                                            // 0x00C8(0x0010) Edit, ZeroConstructor
		TArray<struct FBlendSample>                                SampleData;                                              // 0x00D8(0x0010) ZeroConstructor
		TArray<struct FEditorElement>                              GridSamples;                                             // 0x00E8(0x0010) ZeroConstructor

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.BlendSpace
	 * Size -> 0x0008 (FullSize[0x0100] - InheritedSize[0x00F8])
	 */
	class UBlendSpace : public UBlendSpaceBase
	{
	public:
		EBlendSpaceAxis                                            AxisToScaleAnimation;                                    // 0x00F8(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_WYEP[0x7];                                   // 0x00F9(0x0007) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.AimOffsetBlendSpace
	 * Size -> 0x0000 (FullSize[0x0100] - InheritedSize[0x0100])
	 */
	class UAimOffsetBlendSpace : public UBlendSpace
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.BlendSpace1D
	 * Size -> 0x0008 (FullSize[0x0100] - InheritedSize[0x00F8])
	 */
	class UBlendSpace1D : public UBlendSpaceBase
	{
	public:
		bool                                                       bScaleAnimation;                                         // 0x00F8(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_TLTR[0x7];                                   // 0x00F9(0x0007) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.AimOffsetBlendSpace1D
	 * Size -> 0x0000 (FullSize[0x0100] - InheritedSize[0x0100])
	 */
	class UAimOffsetBlendSpace1D : public UBlendSpace1D
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.AnimCompress
	 * Size -> 0x0018 (FullSize[0x0040] - InheritedSize[0x0028])
	 */
	class UAnimCompress : public UObject
	{
	public:
		class FString                                              Description;                                             // 0x0028(0x0010) ZeroConstructor
		unsigned char                                              bNeedsSkeleton : 1;                                      // 0x0038(0x0001) BIT_FIELD NoDestructor
		unsigned char                                              UnknownData_0PWJ[0x3];                                   // 0x0039(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		EAnimationCompressionFormat                                TranslationCompressionFormat;                            // 0x003C(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor
		EAnimationCompressionFormat                                RotationCompressionFormat;                               // 0x003D(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor
		EAnimationCompressionFormat                                ScaleCompressionFormat;                                  // 0x003E(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_1BA8[0x1];                                   // 0x003F(0x0001) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.AnimCompress_Automatic
	 * Size -> 0x0008 (FullSize[0x0048] - InheritedSize[0x0040])
	 */
	class UAnimCompress_Automatic : public UAnimCompress
	{
	public:
		float                                                      MaxEndEffectorError;                                     // 0x0040(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              bTryFixedBitwiseCompression : 1;                         // 0x0044(0x0001) BIT_FIELD Edit, NoDestructor
		unsigned char                                              bTryPerTrackBitwiseCompression : 1;                      // 0x0044(0x0001) BIT_FIELD Edit, NoDestructor
		unsigned char                                              bTryLinearKeyRemovalCompression : 1;                     // 0x0044(0x0001) BIT_FIELD Edit, NoDestructor
		unsigned char                                              bTryIntervalKeyRemoval : 1;                              // 0x0044(0x0001) BIT_FIELD Edit, NoDestructor
		unsigned char                                              bRunCurrentDefaultCompressor : 1;                        // 0x0044(0x0001) BIT_FIELD Edit, NoDestructor
		unsigned char                                              bAutoReplaceIfExistingErrorTooGreat : 1;                 // 0x0044(0x0001) BIT_FIELD Edit, NoDestructor
		unsigned char                                              bRaiseMaxErrorToExisting : 1;                            // 0x0044(0x0001) BIT_FIELD Edit, NoDestructor
		unsigned char                                              UnknownData_YEHT[0x3];                                   // 0x0045(0x0003) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.AnimCompress_BitwiseCompressOnly
	 * Size -> 0x0000 (FullSize[0x0040] - InheritedSize[0x0040])
	 */
	class UAnimCompress_BitwiseCompressOnly : public UAnimCompress
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.AnimCompress_LeastDestructive
	 * Size -> 0x0000 (FullSize[0x0040] - InheritedSize[0x0040])
	 */
	class UAnimCompress_LeastDestructive : public UAnimCompress
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.AnimCompress_RemoveEverySecondKey
	 * Size -> 0x0008 (FullSize[0x0048] - InheritedSize[0x0040])
	 */
	class UAnimCompress_RemoveEverySecondKey : public UAnimCompress
	{
	public:
		int32_t                                                    MinKeys;                                                 // 0x0040(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              bStartAtSecondKey : 1;                                   // 0x0044(0x0001) BIT_FIELD Edit, NoDestructor
		unsigned char                                              UnknownData_O06I[0x3];                                   // 0x0045(0x0003) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.AnimCompress_RemoveLinearKeys
	 * Size -> 0x0020 (FullSize[0x0060] - InheritedSize[0x0040])
	 */
	class UAnimCompress_RemoveLinearKeys : public UAnimCompress
	{
	public:
		float                                                      MaxPosDiff;                                              // 0x0040(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      MaxAngleDiff;                                            // 0x0044(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      MaxScaleDiff;                                            // 0x0048(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      MaxEffectorDiff;                                         // 0x004C(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      MinEffectorDiff;                                         // 0x0050(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      EffectorDiffSocket;                                      // 0x0054(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      ParentKeyScale;                                          // 0x0058(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              bRetarget : 1;                                           // 0x005C(0x0001) BIT_FIELD Edit, NoDestructor
		unsigned char                                              bActuallyFilterLinearKeys : 1;                           // 0x005C(0x0001) BIT_FIELD Edit, NoDestructor
		unsigned char                                              UnknownData_KHUN[0x3];                                   // 0x005D(0x0003) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.AnimCompress_PerTrackCompression
	 * Size -> 0x0080 (FullSize[0x00E0] - InheritedSize[0x0060])
	 */
	class UAnimCompress_PerTrackCompression : public UAnimCompress_RemoveLinearKeys
	{
	public:
		float                                                      MaxZeroingThreshold;                                     // 0x0060(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      MaxPosDiffBitwise;                                       // 0x0064(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      MaxAngleDiffBitwise;                                     // 0x0068(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      MaxScaleDiffBitwise;                                     // 0x006C(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		TArray<EAnimationCompressionFormat>                        AllowedRotationFormats;                                  // 0x0070(0x0010) Edit, ZeroConstructor
		TArray<EAnimationCompressionFormat>                        AllowedTranslationFormats;                               // 0x0080(0x0010) Edit, ZeroConstructor
		TArray<EAnimationCompressionFormat>                        AllowedScaleFormats;                                     // 0x0090(0x0010) Edit, ZeroConstructor
		unsigned char                                              bResampleAnimation : 1;                                  // 0x00A0(0x0001) BIT_FIELD Edit, NoDestructor
		unsigned char                                              UnknownData_BXDS[0x3];                                   // 0x00A1(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      ResampledFramerate;                                      // 0x00A4(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		int32_t                                                    MinKeysForResampling;                                    // 0x00A8(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              bUseAdaptiveError : 1;                                   // 0x00AC(0x0001) BIT_FIELD Edit, NoDestructor
		unsigned char                                              bUseOverrideForEndEffectors : 1;                         // 0x00AC(0x0001) BIT_FIELD Edit, NoDestructor
		unsigned char                                              UnknownData_P925[0x3];                                   // 0x00AD(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int32_t                                                    TrackHeightBias;                                         // 0x00B0(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      ParentingDivisor;                                        // 0x00B4(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      ParentingDivisorExponent;                                // 0x00B8(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              bUseAdaptiveError2 : 1;                                  // 0x00BC(0x0001) BIT_FIELD Edit, NoDestructor
		unsigned char                                              UnknownData_DN0L[0x3];                                   // 0x00BD(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      RotationErrorSourceRatio;                                // 0x00C0(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      TranslationErrorSourceRatio;                             // 0x00C4(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      ScaleErrorSourceRatio;                                   // 0x00C8(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      MaxErrorPerTrackRatio;                                   // 0x00CC(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      PerturbationProbeSize;                                   // 0x00D0(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_7PZQ[0xC];                                   // 0x00D4(0x000C) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.AnimCompress_RemoveTrivialKeys
	 * Size -> 0x0010 (FullSize[0x0050] - InheritedSize[0x0040])
	 */
	class UAnimCompress_RemoveTrivialKeys : public UAnimCompress
	{
	public:
		float                                                      MaxPosDiff;                                              // 0x0040(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      MaxAngleDiff;                                            // 0x0044(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      MaxScaleDiff;                                            // 0x0048(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_2PJB[0x4];                                   // 0x004C(0x0004) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.AnimCompress_RevertToRaw
	 * Size -> 0x0000 (FullSize[0x0040] - InheritedSize[0x0040])
	 */
	class UAnimCompress_RevertToRaw : public UAnimCompress
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.AnimSingleNodeInstance
	 * Size -> 0x00E0 (FullSize[0x0420] - InheritedSize[0x0340])
	 */
	class UAnimSingleNodeInstance : public UAnimInstance
	{
	public:
		class UAnimationAsset*                                     CurrentAsset;                                            // 0x0340(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		class UVertexAnimation*                                    CurrentVertexAnim;                                       // 0x0348(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		struct FVector                                             BlendSpaceInput;                                         // 0x0350(0x000C) ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_H581[0x4];                                   // 0x035C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<struct FBlendSampleData>                            BlendSampleData;                                         // 0x0360(0x0010) ZeroConstructor, Transient
		struct FBlendFilter                                        BlendFilter;                                             // 0x0370(0x0090) Transient
		float                                                      CurrentTime;                                             // 0x0400(0x0004) ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		float                                                      PlayRate;                                                // 0x0404(0x0004) ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		class FScriptDelegate                                      PostEvaluateAnimEvent;                                   // 0x0408(0x0010) ZeroConstructor, Transient, InstancedReference, NoDestructor
		unsigned char                                              bLooping : 1;                                            // 0x0418(0x0001) BIT_FIELD Transient, NoDestructor
		unsigned char                                              bPlaying : 1;                                            // 0x0418(0x0001) BIT_FIELD Transient, NoDestructor
		unsigned char                                              bReverse : 1;                                            // 0x0418(0x0001) BIT_FIELD Transient, NoDestructor
		unsigned char                                              UnknownData_TBO4[0x7];                                   // 0x0419(0x0007) MISSED OFFSET (PADDING)

	public:
		void StopAnim();
		void SetVertexAnimation(class UVertexAnimation* NewVertexAnim, bool bIsLooping, float InPlayRate);
		void SetReverse(bool bInReverse);
		void SetPosition(float InPosition, bool bFireNotifies, bool bReallyFireNotifies);
		void SetPlayRate(float InPlayRate);
		void SetPlaying(bool bIsPlaying);
		void SetLooping(bool bIsLooping);
		void SetBlendSpaceInput(const struct FVector& InBlendInput);
		void SetAnimationAsset(class UAnimationAsset* NewAsset, bool bIsLooping, float InPlayRate);
		void PostEvaluateAnimEvent__DelegateSignature();
		void PlayAnim(bool bIsLooping, float InPlayRate, float InStartPosition);
		float GetLength();
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.VehicleAnimInstance
	 * Size -> 0x0000 (FullSize[0x0340] - InheritedSize[0x0340])
	 */
	class UVehicleAnimInstance : public UAnimInstance
	{
	public:
		class AWheeledVehicle* GetVehicle();
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.AnimNotifyState_TimedParticleEffect
	 * Size -> 0x0030 (FullSize[0x0060] - InheritedSize[0x0030])
	 */
	class UAnimNotifyState_TimedParticleEffect : public UAnimNotifyState
	{
	public:
		class UParticleSystem*                                     PSTemplate;                                              // 0x0030(0x0008) Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor
		class FName                                                SocketName;                                              // 0x0038(0x0008) Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor
		struct FVector                                             LocationOffset;                                          // 0x0040(0x000C) Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor
		struct FRotator                                            RotationOffset;                                          // 0x004C(0x000C) Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor
		bool                                                       bDestroyAtEnd;                                           // 0x0058(0x0001) Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_UNQ2[0x7];                                   // 0x0059(0x0007) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.AnimNotifyState_Trail
	 * Size -> 0x0028 (FullSize[0x0058] - InheritedSize[0x0030])
	 */
	class UAnimNotifyState_Trail : public UAnimNotifyState
	{
	public:
		class UParticleSystem*                                     PSTemplate;                                              // 0x0030(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor
		class FName                                                FirstSocketName;                                         // 0x0038(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor
		class FName                                                SecondSocketName;                                        // 0x0040(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor
		ETrailWidthMode                                            WidthScaleMode;                                          // 0x0048(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_VYHR[0x3];                                   // 0x0049(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FName                                                WidthScaleCurve;                                         // 0x004C(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_E4W5[0x4];                                   // 0x0054(0x0004) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.AnimSet
	 * Size -> 0x00C8 (FullSize[0x00F0] - InheritedSize[0x0028])
	 */
	class UAnimSet : public UObject
	{
	public:
		unsigned char                                              bAnimRotationOnly : 1;                                   // 0x0028(0x0001) BIT_FIELD Edit, NoDestructor
		unsigned char                                              UnknownData_PVHE[0x7];                                   // 0x0029(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class FName>                                        TrackBoneNames;                                          // 0x0030(0x0010) ZeroConstructor
		TArray<struct FAnimSetMeshLinkup>                          LinkupCache;                                             // 0x0040(0x0010) ZeroConstructor, Transient
		TArray<unsigned char>                                      BoneUseAnimTranslation;                                  // 0x0050(0x0010) ZeroConstructor, Transient
		TArray<unsigned char>                                      ForceUseMeshTranslation;                                 // 0x0060(0x0010) ZeroConstructor, Transient
		TArray<class FName>                                        UseTranslationBoneNames;                                 // 0x0070(0x0010) Edit, ZeroConstructor
		TArray<class FName>                                        ForceMeshTranslationBoneNames;                           // 0x0080(0x0010) Edit, ZeroConstructor
		class FName                                                PreviewSkelMeshName;                                     // 0x0090(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor
		class FName                                                BestRatioSkelMeshName;                                   // 0x0098(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_M7IY[0x50];                                  // 0x00A0(0x0050) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.AnimStateMachineTypes
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class UAnimStateMachineTypes : public UObject
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.AssetImportData
	 * Size -> 0x0028 (FullSize[0x0050] - InheritedSize[0x0028])
	 */
	class UAssetImportData : public UObject
	{
	public:
		class FString                                              SourceFilePath;                                          // 0x0028(0x0010) Edit, ZeroConstructor
		class FString                                              SourceFileTimestamp;                                     // 0x0038(0x0010) Edit, ZeroConstructor, EditConst
		unsigned char                                              bDirty : 1;                                              // 0x0048(0x0001) BIT_FIELD NoDestructor
		unsigned char                                              UnknownData_W0V0[0x7];                                   // 0x0049(0x0007) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.AssetUserData
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class UAssetUserData : public UObject
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.AudioSettings
	 * Size -> 0x0038 (FullSize[0x0060] - InheritedSize[0x0028])
	 */
	class UAudioSettings : public UObject
	{
	public:
		struct FStringAssetReference                               DefaultSoundClassName;                                   // 0x0028(0x0010) Edit, ZeroConstructor, Config
		struct FStringAssetReference                               DefaultBaseSoundMix;                                     // 0x0038(0x0010) Edit, ZeroConstructor, Config
		struct FStringAssetReference                               VoiPSoundClass;                                          // 0x0048(0x0010) Edit, ZeroConstructor, Config
		float                                                      LowPassFilterResonance;                                  // 0x0058(0x0004) Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, AdvancedDisplay
		int32_t                                                    MaximumConcurrentStreams;                                // 0x005C(0x0004) Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.AutomationTestSettings
	 * Size -> 0x02B0 (FullSize[0x02D8] - InheritedSize[0x0028])
	 */
	class UAutomationTestSettings : public UObject
	{
	public:
		TArray<class FString>                                      AutoRunConsoleCommands;                                  // 0x0028(0x0010) Edit, ZeroConstructor, Config
		TArray<class FString>                                      AutoRunMapFilterWhitelist;                               // 0x0038(0x0010) Edit, ZeroConstructor, Config
		struct FFilePath                                           AutomationTestmap;                                       // 0x0048(0x0010) Edit, Config
		TArray<struct FEditorMapPerformanceTestDefinition>         EditorPerformanceTestMaps;                               // 0x0058(0x0010) Edit, ZeroConstructor, Config
		struct FBuildPromotionTestSettings                         BuildPromotionTest;                                      // 0x0068(0x0210) Edit, Config
		TArray<class FString>                                      EngineTestModules;                                       // 0x0278(0x0010) Edit, ZeroConstructor, Config
		TArray<class FString>                                      EditorTestModules;                                       // 0x0288(0x0010) Edit, ZeroConstructor, Config
		TArray<class FString>                                      TestLevelFolders;                                        // 0x0298(0x0010) Edit, ZeroConstructor, Config
		TArray<struct FOpenTestAsset>                              TestAssetsToOpen;                                        // 0x02A8(0x0010) Edit, ZeroConstructor, Config
		TArray<struct FExternalToolDefinition>                     ExternalTools;                                           // 0x02B8(0x0010) Edit, ZeroConstructor, Config
		TArray<struct FEditorImportExportTestDefinition>           ImportExportTestDefinitions;                             // 0x02C8(0x0010) Edit, ZeroConstructor, Config

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.AvoidanceManager
	 * Size -> 0x00A0 (FullSize[0x00C8] - InheritedSize[0x0028])
	 */
	class UAvoidanceManager : public UObject
	{
	public:
		unsigned char                                              UnknownData_VGOG[0x8];                                   // 0x0028(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      DefaultTimeToLive;                                       // 0x0030(0x0004) Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor
		float                                                      LockTimeAfterAvoid;                                      // 0x0034(0x0004) Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor
		float                                                      LockTimeAfterClean;                                      // 0x0038(0x0004) Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor
		float                                                      DeltaTimeToPredict;                                      // 0x003C(0x0004) Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor
		float                                                      ArtificialRadiusExpansion;                               // 0x0040(0x0004) Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor
		float                                                      TestRadius2D;                                            // 0x0044(0x0004) Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor
		float                                                      TestHeightDifference;                                    // 0x0048(0x0004) Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_ZOY5[0x7C];                                  // 0x004C(0x007C) MISSED OFFSET (PADDING)

	public:
		bool RegisterMovementComponent(class UCharacterMovementComponent* MovementComp, float AvoidanceWeight);
		int32_t GetObjectCount();
		int32_t GetNewAvoidanceUID();
		struct FVector GetAvoidanceVelocityIgnoringUID(const struct FNavAvoidanceData& AvoidanceData, float DeltaTime, int32_t IgnoreThisUID);
		struct FVector GetAvoidanceVelocity(const struct FNavAvoidanceData& AvoidanceData, float DeltaTime);
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.BadObject
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class UBadObject : public UObject
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.BlueprintCore
	 * Size -> 0x0028 (FullSize[0x0050] - InheritedSize[0x0028])
	 */
	class UBlueprintCore : public UObject
	{
	public:
		class UClass*                                              SkeletonGeneratedClass;                                  // 0x0028(0x0008) ZeroConstructor, Transient, IsPlainOldData, NonTransactional, NoDestructor
		class UClass*                                              GeneratedClass;                                          // 0x0030(0x0008) ZeroConstructor, IsPlainOldData, NonTransactional, NoDestructor
		bool                                                       bLegacyNeedToPurgeSkelRefs;                              // 0x0038(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor
		bool                                                       bLegacyGeneratedClassIsAuthoritative;                    // 0x0039(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_L0Q4[0x2];                                   // 0x003A(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FGuid                                               BlueprintGuid;                                           // 0x003C(0x0010) ZeroConstructor
		unsigned char                                              UnknownData_P0Y8[0x4];                                   // 0x004C(0x0004) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.EdGraphNode
	 * Size -> 0x0068 (FullSize[0x0090] - InheritedSize[0x0028])
	 */
	class UEdGraphNode : public UObject
	{
	public:
		TArray<class UEdGraphPin*>                                 Pins;                                                    // 0x0028(0x0010) ZeroConstructor
		int32_t                                                    NodePosX;                                                // 0x0038(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor
		int32_t                                                    NodePosY;                                                // 0x003C(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor
		int32_t                                                    NodeWidth;                                               // 0x0040(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor
		int32_t                                                    NodeHeight;                                              // 0x0044(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              bHasCompilerMessage : 1;                                 // 0x0048(0x0001) BIT_FIELD NoDestructor
		unsigned char                                              UnknownData_1AOD[0x7];                                   // 0x0049(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FString                                              NodeComment;                                             // 0x0050(0x0010) ZeroConstructor
		int32_t                                                    ErrorType;                                               // 0x0060(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_Y2BN[0x4];                                   // 0x0064(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FString                                              ErrorMsg;                                                // 0x0068(0x0010) ZeroConstructor
		struct FGuid                                               NodeGuid;                                                // 0x0078(0x0010) ZeroConstructor
		ENodeAdvancedPins                                          AdvancedPinDisplay;                                      // 0x0088(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_8JVP[0x7];                                   // 0x0089(0x0007) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.EdGraphPin
	 * Size -> 0x0118 (FullSize[0x0140] - InheritedSize[0x0028])
	 */
	class UEdGraphPin : public UObject
	{
	public:
		class FString                                              PinName;                                                 // 0x0028(0x0010) ZeroConstructor
		class FText                                                PinFriendlyName;                                         // 0x0038(0x0018) ELEMENT_SIZE_MISMATCH
		unsigned char                                              UnknownData_0EGT[0x10];                                  // 0x0050(0x0010) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY
		class FString                                              PinToolTip;                                              // 0x0060(0x0010) ZeroConstructor
		EEdGraphPinDirection                                       Direction;                                               // 0x0070(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_GC6G[0x7];                                   // 0x0071(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FEdGraphPinType                                     PinType;                                                 // 0x0078(0x0050)
		class FString                                              DefaultValue;                                            // 0x00C8(0x0010) ZeroConstructor
		class FString                                              AutogeneratedDefaultValue;                               // 0x00D8(0x0010) ZeroConstructor
		class UObject*                                             DefaultObject;                                           // 0x00E8(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor
		class FText                                                DefaultTextValue;                                        // 0x00F0(0x0018) ELEMENT_SIZE_MISMATCH
		unsigned char                                              UnknownData_41SX[0x10];                                  // 0x0108(0x0010) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY
		TArray<class UEdGraphPin*>                                 LinkedTo;                                                // 0x0118(0x0010) ZeroConstructor
		TArray<class UEdGraphPin*>                                 SubPins;                                                 // 0x0128(0x0010) ZeroConstructor
		class UEdGraphPin*                                         ParentPin;                                               // 0x0138(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.Blueprint
	 * Size -> 0x0070 (FullSize[0x00C0] - InheritedSize[0x0050])
	 */
	class UBlueprint : public UBlueprintCore
	{
	public:
		unsigned char                                              bRecompileOnLoad : 1;                                    // 0x0050(0x0001) BIT_FIELD Config, NoDestructor
		unsigned char                                              UnknownData_4UKA[0x7];                                   // 0x0051(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UClass*                                              ParentClass;                                             // 0x0058(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable
		class UObject*                                             PRIVATE_InnermostPreviousCDO;                            // 0x0060(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		unsigned char                                              bHasBeenRegenerated : 1;                                 // 0x0068(0x0001) BIT_FIELD Transient, NoDestructor
		unsigned char                                              bIsRegeneratingOnLoad : 1;                               // 0x0068(0x0001) BIT_FIELD Transient, NoDestructor
		unsigned char                                              UnknownData_7T2Y[0x7];                                   // 0x0069(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class USimpleConstructionScript*                           SimpleConstructionScript;                                // 0x0070(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor
		TArray<class UActorComponent*>                             ComponentTemplates;                                      // 0x0078(0x0010) ExportObject, ZeroConstructor, ContainsInstancedReference
		TArray<class UTimelineTemplate*>                           Timelines;                                               // 0x0088(0x0010) ZeroConstructor
		EBlueprintType                                             BlueprintType;                                           // 0x0098(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable
		unsigned char                                              UnknownData_T9I0[0x3];                                   // 0x0099(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int32_t                                                    BlueprintSystemVersion;                                  // 0x009C(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_0IK0[0x20];                                  // 0x00A0(0x0020) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.AnimBlueprint
	 * Size -> 0x0018 (FullSize[0x00D8] - InheritedSize[0x00C0])
	 */
	class UAnimBlueprint : public UBlueprint
	{
	public:
		class USkeleton*                                           TargetSkeleton;                                          // 0x00C0(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable
		TArray<struct FAnimGroupInfo>                              Groups;                                                  // 0x00C8(0x0010) ZeroConstructor

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.LevelScriptBlueprint
	 * Size -> 0x0000 (FullSize[0x00C0] - InheritedSize[0x00C0])
	 */
	class ULevelScriptBlueprint : public UBlueprint
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.DataTable
	 * Size -> 0x0068 (FullSize[0x0090] - InheritedSize[0x0028])
	 */
	class UDataTable : public UObject
	{
	public:
		class UScriptStruct*                                       RowStruct;                                               // 0x0028(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor
		class FString                                              ImportPath;                                              // 0x0030(0x0010) ZeroConstructor
		unsigned char                                              UnknownData_ZKHW[0x50];                                  // 0x0040(0x0050) MISSED OFFSET (PADDING)

	public:
		std::vector<FName> GetRowNames() const;
		/*template<class T>
		inline T* FindRow(const CG::FName& rowName) const
		{
			for (int32_t i = 0; i < RowMap.Data.Count(); ++i)
			{
				CG::TPair<CG::FName, unsigned char*> curRowPair = RowMap.Data[i].Value;
				CG::FName& curRowName = curRowPair.First;
				if (curRowName.ComparisonIndex == rowName.ComparisonIndex && curRowName.Number == rowName.Number)
				{
					#ifdef FNAME_POOL_WITH_CASE_PRESERVING_NAME
					if (curRowName.DisplayIndex == rowName.DisplayIndex)
					#endif
						return reinterpret_cast<T*>(curRowPair.Second);
				}
			}
			
			return nullptr;
		}*/

		static UClass* StaticClass();
	};

	/**
	 * Class Engine.DataTableFunctionLibrary
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class UDataTableFunctionLibrary : public UBlueprintFunctionLibrary
	{
	public:
		bool STATIC_GetDataTableRowFromName(class UDataTable* Table, const class FName& RowName, struct FTableRowBase* OutRow);
		void STATIC_EvaluateCurveTableRow(class UCurveTable* CurveTable, const class FName& RowName, float InXY, EEvaluateCurveTableResult* OutResult, float* OutXY);
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.DebugDrawService
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class UDebugDrawService : public UBlueprintFunctionLibrary
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.DialogueTypes
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class UDialogueTypes : public UObject
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.GameplayStatics
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class UGameplayStatics : public UBlueprintFunctionLibrary
	{
	public:
		void STATIC_UnloadStreamLevel(class UObject* WorldContextObject, const class FName& LevelName, const struct FLatentActionInfo& LatentInfo);
		class UParticleSystemComponent* STATIC_SpawnEmitterAttached(class UParticleSystem* EmitterTemplate, class USceneComponent* attachToComponent, const class FName& AttachPointName, const struct FVector& Location, const struct FRotator& Rotation, EAttachLocation LocationType, bool bAutoDestroy, bool bDontSpawnOutOfView, bool bAllowSpawnLoopingFX, float OverrideSecondsBeforeInactive);
		class UParticleSystemComponent* STATIC_SpawnEmitterAtLocation(class UObject* WorldContextObject, class UParticleSystem* EmitterTemplate, const struct FVector& Location, const struct FRotator& Rotation, bool bAutoDestroy, bool bDontSpawnOutOfView, float DontSpawnOutOfViewCheckRadius, bool bAllowSpawnLoopingFX, float OverrideSecondsBeforeInactive);
		class UDecalComponent* STATIC_SpawnDecalAttached(class UMaterialInterface* DecalMaterial, const struct FVector& DecalSize, class USceneComponent* attachToComponent, const class FName& AttachPointName, const struct FVector& Location, const struct FRotator& Rotation, EAttachLocation LocationType, float LifeSpan);
		class UDecalComponent* STATIC_SpawnDecalAtLocation(class UObject* WorldContextObject, class UMaterialInterface* DecalMaterial, const struct FVector& DecalSize, const struct FVector& Location, const struct FRotator& Rotation, float LifeSpan);
		void STATIC_SetWorldOriginLocation(class UObject* WorldContextObject, const struct FIntVector& NewLocation);
		void STATIC_SetSoundMode(const class FName& SoundModeName);
		void STATIC_SetGlobalTimeDilation(class UObject* WorldContextObject, float TimeDilation);
		bool STATIC_SetGamePaused(class UObject* WorldContextObject, bool bPaused);
		void STATIC_SetBaseSoundMix(class USoundMix* InSoundMix);
		bool STATIC_SaveGameToSlot(class USaveGame* SaveGameObject, const class FString& SlotName, int32_t UserIndex);
		void STATIC_PushSoundMixModifier(class USoundMix* InSoundMixModifier);
		void STATIC_PopSoundMixModifier(class USoundMix* InSoundMixModifier);
		void STATIC_PlayWorldCameraShake(class UObject* WorldContextObject, class UClass* Shake, const struct FVector& Epicenter, float InnerRadius, float OuterRadius, float Falloff, bool bOrientShakeTowardsEpicenter, float ScaleMultiplier);
		class UAudioComponent* STATIC_PlaySoundAttached(class USoundBase* Sound, class USceneComponent* attachToComponent, const class FName& AttachPointName, const struct FVector& Location, EAttachLocation LocationType, bool bStopWhenAttachedToDestroyed, float VolumeMultiplier, float PitchMultiplier, float StartTime, class USoundAttenuation* AttenuationSettings, bool bAlwaysPlay);
		void STATIC_PlaySoundAtLocation(class UObject* WorldContextObject, class USoundBase* Sound, const struct FVector& Location, float VolumeMultiplier, float PitchMultiplier, float StartTime, class USoundAttenuation* AttenuationSettings, bool bAlwaysPlay);
		void STATIC_PlaySound(class UObject* WorldContextObject, class USoundCue* InSoundCue, class USceneComponent* AttachComponent, const class FName& AttachName, bool bFollow, float VolumeMultiplier, float PitchMultiplier);
		class UAudioComponent* STATIC_PlayDialogueAttached(class UDialogueWave* Dialogue, const struct FDialogueContext& Context, class USceneComponent* attachToComponent, const class FName& AttachPointName, const struct FVector& Location, EAttachLocation LocationType, bool bStopWhenAttachedToDestroyed, float VolumeMultiplier, float PitchMultiplier, float StartTime, class USoundAttenuation* AttenuationSettings);
		void STATIC_PlayDialogueAtLocation(class UObject* WorldContextObject, class UDialogueWave* Dialogue, const struct FDialogueContext& Context, const struct FVector& Location, float VolumeMultiplier, float PitchMultiplier, float StartTime, class USoundAttenuation* AttenuationSettings);
		void STATIC_OpenLevel(class UObject* WorldContextObject, const class FName& LevelName, bool bAbsolute, const class FString& Options);
		void STATIC_LoadStreamLevel(class UObject* WorldContextObject, const class FName& LevelName, bool bMakeVisibleAfterLoad, bool bShouldBlockOnLoad, const struct FLatentActionInfo& LatentInfo);
		class USaveGame* STATIC_LoadGameFromSlot(const class FString& SlotName, int32_t UserIndex);
		bool STATIC_IsGameWorld(class UObject* WorldContextObject);
		bool STATIC_IsGamePaused(class UObject* WorldContextObject);
		struct FIntVector STATIC_GetWorldOriginLocation(class UObject* WorldContextObject);
		float STATIC_GetWorldDeltaSeconds(class UObject* WorldContextObject);
		EPhysicalSurface STATIC_GetSurfaceType(const struct FHitResult& Hit);
		class ULevelStreaming* STATIC_GetStreamingLevel(class UObject* WorldContextObject, const class FName& PackageName);
		float STATIC_GetRealTimeSeconds(class UObject* WorldContextObject);
		class APawn* STATIC_GetPlayerPawn(class UObject* WorldContextObject, int32_t PlayerIndex);
		class APlayerController* STATIC_GetPlayerController(class UObject* WorldContextObject, int32_t PlayerIndex);
		class ACharacter* STATIC_GetPlayerCharacter(class UObject* WorldContextObject, int32_t PlayerIndex);
		class APlayerCameraManager* STATIC_GetPlayerCameraManager(class UObject* WorldContextObject, int32_t PlayerIndex);
		class FString STATIC_GetPlatformName();
		class UClass* STATIC_GetObjectClass(class UObject* Object);
		float STATIC_GetGlobalTimeDilation(class UObject* WorldContextObject);
		class AGameState* STATIC_GetGameState(class UObject* WorldContextObject);
		class AGameMode* STATIC_GetGameMode(class UObject* WorldContextObject);
		class UGameInstance* STATIC_GetGameInstance(class UObject* WorldContextObject);
		float STATIC_GetAudioTimeSeconds(class UObject* WorldContextObject);
		void STATIC_GetAllActorsWithInterface(class UObject* WorldContextObject, class UClass* Interface, TArray<class AActor*>* OutActors);
		void STATIC_GetAllActorsOfClass(class UObject* WorldContextObject, class UClass* ActorClass, TArray<class AActor*>* OutActors);
		void STATIC_GetActorArrayBounds(TArray<class AActor*> actors, bool bOnlyCollidingComponents, struct FVector* Center, struct FVector* BoxExtent);
		struct FVector STATIC_GetActorArrayAverageLocation(TArray<class AActor*> actors);
		void STATIC_GetAccurateRealTime(class UObject* WorldContextObject, int32_t* Seconds, float* PartialSeconds);
		class AActor* STATIC_FinishSpawningActor(class AActor* Actor, const struct UObject_FTransform& SpawnTransform);
		void STATIC_EnableLiveStreaming(bool Enable);
		bool STATIC_DoesSaveGameExist(const class FString& SlotName, int32_t UserIndex);
		bool STATIC_DeleteGameInSlot(const class FString& SlotName, int32_t UserIndex);
		void STATIC_DeactivateReverbEffect(const class FName& TagName);
		class USaveGame* STATIC_CreateSaveGameObjectFromBlueprint(class UBlueprint* SaveGameBlueprint);
		class USaveGame* STATIC_CreateSaveGameObject(class UClass* SaveGameClass);
		class APlayerController* STATIC_CreatePlayer(class UObject* WorldContextObject, int32_t ControllerId, bool bSpawnPawn);
		void STATIC_ClearSoundMixModifiers();
		void STATIC_BreakHitResult_OLD(const struct FHitResult& Hit, struct FVector* Location, struct FVector* Normal, struct FVector* ImpactPoint, struct FVector* ImpactNormal, class UPhysicalMaterial** PhysMat, class AActor** HitActor, class UPrimitiveComponent** HitComponent, class FName* HitBoneName, int32_t* HitItem);
		void STATIC_BreakHitResult(const struct FHitResult& Hit, struct FVector* Location, struct FVector* Normal, struct FVector* ImpactPoint, struct FVector* ImpactNormal, class UPhysicalMaterial** PhysMat, class AActor** HitActor, class UPrimitiveComponent** HitComponent, class FName* HitBoneName, int32_t* HitItem, bool* BlockingHit);
		struct FVector STATIC_BPPointPlaneProject(const struct FVector& Point, const struct FVector& PlaneBase, const struct FVector& PlaneNorm);
		float STATIC_BPPointPlaneDist(const struct FVector& Point, const struct FVector& PlaneBase, const struct FVector& PlaneNorm);
		bool STATIC_BlueprintSuggestProjectileVelocity(class UObject* WorldContextObject, struct FVector* TossVelocity, const struct FVector& StartLocation, const struct FVector& EndLocation, float LaunchSpeed, float OverrideGravityZ, ESuggestProjVelocityTraceOption TraceOption, float CollisionRadius, bool bFavorHighArc, bool bDrawDebug);
		class AActor* STATIC_BeginSpawningActorFromClass(class UObject* WorldContextObject, class UClass* ActorClass, const struct UObject_FTransform& SpawnTransform, bool bNoCollisionFail);
		class AActor* STATIC_BeginSpawningActorFromBlueprint(class UObject* WorldContextObject, class UBlueprint* Blueprint, const struct UObject_FTransform& SpawnTransform, bool bNoCollisionFail);
		bool STATIC_AreAnyListenersWithinRange(const struct FVector& Location, float MaximumRange);
		bool STATIC_ApplyRadialDamageIgnoreDamageActors(class UObject* WorldContextObject, float BaseDamage, const struct FVector& Origin, float DamageRadius, class UClass* DamageTypeClass, TArray<class AActor*> IgnoreActors, TArray<class AActor*> IgnoreDamageActors, class AActor* DamageCauser, class AController* InstigatedByController, bool bDoFullDamage, ECollisionChannel DamagePreventionChannel, float Impulse);
		bool STATIC_ApplyRadialDamage(class UObject* WorldContextObject, float BaseDamage, const struct FVector& Origin, float DamageRadius, class UClass* DamageTypeClass, TArray<class AActor*> IgnoreActors, class AActor* DamageCauser, class AController* InstigatedByController, bool bDoFullDamage, ECollisionChannel DamagePreventionChannel, float Impulse);
		void STATIC_ApplyPointDamage(class AActor* DamagedActor, float BaseDamage, const struct FVector& HitFromDirection, const struct FHitResult& HitInfo, class AController* EventInstigator, class AActor* DamageCauser, class UClass* DamageTypeClass, float Impulse, bool bForceCollisionCheck, ECollisionChannel ForceCollisionCheckTraceChannel);
		void STATIC_ApplyDamage(class AActor* DamagedActor, float BaseDamage, class AController* EventInstigator, class AActor* DamageCauser, class UClass* DamageTypeClass, float Impulse);
		void STATIC_ActivateReverbEffect(class UReverbEffect* ReverbEffect, const class FName& TagName, float Priority, float Volume, float FadeTime);
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.HeadMountedDisplayFunctionLibrary
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class UHeadMountedDisplayFunctionLibrary : public UBlueprintFunctionLibrary
	{
	public:
		void STATIC_ResetOrientationAndPosition(float Yaw);
		bool STATIC_IsInLowPersistenceMode();
		bool STATIC_IsHeadMountedDisplayEnabled();
		bool STATIC_HasValidTrackingPosition();
		float STATIC_GetScreenPercentage();
		void STATIC_GetPositionalTrackingCameraParameters(struct FVector* CameraOrigin, struct FRotator* CameraRotation, float* HFOV, float* VFOV, float* CameraDistance, float* NearPlane, float* FarPlane);
		void STATIC_GetOrientationAndPosition(struct FRotator* DeviceRotation, struct FVector* DevicePosition);
		void STATIC_EnableLowPersistenceMode(bool bEnable);
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.KismetArrayLibrary
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class UKismetArrayLibrary : public UBlueprintFunctionLibrary
	{
	public:
		void STATIC_SetArrayPropertyByName(class UObject* Object, const class FName& PropertyName, TArray<int32_t> Value);
		void STATIC_FilterArray(TArray<class AActor*> TargetArray, class UClass* FilterClass, TArray<class AActor*>* FilteredArray);
		void STATIC_Array_Shuffle(TArray<int32_t> TargetArray, class UArrayProperty* ArrayProperty);
		void STATIC_Array_Set(TArray<int32_t> TargetArray, class UArrayProperty* ArrayProperty, int32_t index, int32_t Item, bool bSizeToFit);
		void STATIC_Array_Resize(TArray<int32_t> TargetArray, class UArrayProperty* ArrayProperty, int32_t Size);
		bool STATIC_Array_RemoveItem(TArray<int32_t> TargetArray, class UArrayProperty* ArrayProperty, int32_t Item);
		void STATIC_Array_Remove(TArray<int32_t> TargetArray, class UArrayProperty* ArrayProperty, int32_t IndexToRemove);
		int32_t STATIC_Array_Length(TArray<int32_t> TargetArray, class UArrayProperty* ArrayProperty);
		int32_t STATIC_Array_LastIndex(TArray<int32_t> TargetArray, class UArrayProperty* ArrayProperty);
		bool STATIC_Array_IsValidIndex(TArray<int32_t> TargetArray, int32_t IndexToTest);
		void STATIC_Array_Insert(TArray<int32_t> TargetArray, class UArrayProperty* ArrayProperty, int32_t newItem, int32_t index);
		void STATIC_Array_Get(TArray<int32_t> TargetArray, class UArrayProperty* ArrayProperty, int32_t index, int32_t* Item);
		int32_t STATIC_Array_Find(TArray<int32_t> TargetArray, class UArrayProperty* ArrayProperty, int32_t ItemToFind);
		bool STATIC_Array_Contains(TArray<int32_t> TargetArray, class UArrayProperty* ArrayProperty, int32_t ItemToFind);
		void STATIC_Array_Clear(TArray<int32_t> TargetArray, class UArrayProperty* ArrayProperty);
		void STATIC_Array_Append(TArray<int32_t> TargetArray, class UArrayProperty* TargetArrayProperty, TArray<int32_t> SourceArray, class UArrayProperty* SourceArrayProperty);
		int32_t STATIC_Array_AddUnique(TArray<int32_t> TargetArray, class UArrayProperty* ArrayProperty, int32_t newItem);
		int32_t STATIC_Array_Add(TArray<int32_t> TargetArray, class UArrayProperty* ArrayProperty, int32_t newItem);
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.KismetInputLibrary
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class UKismetInputLibrary : public UBlueprintFunctionLibrary
	{
	public:
		bool STATIC_PointerEvent_IsTouchEvent(const struct FPointerEvent& Input);
		bool STATIC_PointerEvent_IsMouseButtonDown(const struct FPointerEvent& Input, const struct FKey& MouseButton);
		float STATIC_PointerEvent_GetWheelDelta(const struct FPointerEvent& Input);
		int32_t STATIC_PointerEvent_GetUserIndex(const struct FPointerEvent& Input);
		int32_t STATIC_PointerEvent_GetTouchpadIndex(const struct FPointerEvent& Input);
		struct FVector2D STATIC_PointerEvent_GetScreenSpacePosition(const struct FPointerEvent& Input);
		int32_t STATIC_PointerEvent_GetPointerIndex(const struct FPointerEvent& Input);
		struct FVector2D STATIC_PointerEvent_GetLastScreenSpacePosition(const struct FPointerEvent& Input);
		struct FVector2D STATIC_PointerEvent_GetGestureDelta(const struct FPointerEvent& Input);
		struct FKey STATIC_PointerEvent_GetEffectingButton(const struct FPointerEvent& Input);
		struct FVector2D STATIC_PointerEvent_GetCursorDelta(const struct FPointerEvent& Input);
		bool STATIC_InputEvent_IsShiftDown(const struct FInputEvent& Input);
		bool STATIC_InputEvent_IsRightShiftDown(const struct FInputEvent& Input);
		bool STATIC_InputEvent_IsRightControlDown(const struct FInputEvent& Input);
		bool STATIC_InputEvent_IsRightCommandDown(const struct FInputEvent& Input);
		bool STATIC_InputEvent_IsRightAltDown(const struct FInputEvent& Input);
		bool STATIC_InputEvent_IsRepeat(const struct FInputEvent& Input);
		bool STATIC_InputEvent_IsLeftShiftDown(const struct FInputEvent& Input);
		bool STATIC_InputEvent_IsLeftControlDown(const struct FInputEvent& Input);
		bool STATIC_InputEvent_IsLeftCommandDown(const struct FInputEvent& Input);
		bool STATIC_InputEvent_IsLeftAltDown(const struct FInputEvent& Input);
		bool STATIC_InputEvent_IsControlDown(const struct FInputEvent& Input);
		bool STATIC_InputEvent_IsCommandDown(const struct FInputEvent& Input);
		bool STATIC_InputEvent_IsAltDown(const struct FInputEvent& Input);
		struct FKey STATIC_GetKey(const struct FKeyboardEvent& Input);
		bool STATIC_EqualEqual_KeyKey(const struct FKey& A, const struct FKey& B);
		int32_t STATIC_ControllerEvent_GetUserIndex(const struct FControllerEvent& Input);
		struct FKey STATIC_ControllerEvent_GetEffectingButton(const struct FControllerEvent& Input);
		float STATIC_ControllerEvent_GetAnalogValue(const struct FControllerEvent& Input);
		void STATIC_CalibrateTilt();
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.KismetMaterialLibrary
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class UKismetMaterialLibrary : public UBlueprintFunctionLibrary
	{
	public:
		void STATIC_SetVectorParameterValue(class UObject* WorldContextObject, class UMaterialParameterCollection* Collection, const class FName& ParameterName, const struct FLinearColor& ParameterValue);
		void STATIC_SetScalarParameterValue(class UObject* WorldContextObject, class UMaterialParameterCollection* Collection, const class FName& ParameterName, float ParameterValue);
		void STATIC_ResetMaterialParameterCollectionInstance(class UObject* WorldContextObject, class UMaterialParameterCollection* Collection);
		struct FLinearColor STATIC_GetVectorParameterValue(class UObject* WorldContextObject, class UMaterialParameterCollection* Collection, const class FName& ParameterName);
		float STATIC_GetScalarParameterValue(class UObject* WorldContextObject, class UMaterialParameterCollection* Collection, const class FName& ParameterName);
		class UMaterialInstanceDynamic* STATIC_CreateDynamicMaterialInstance(class UObject* WorldContextObject, class UMaterialInterface* Parent);
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.KismetMathLibrary
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class UKismetMathLibrary : public UBlueprintFunctionLibrary
	{
	public:
		int32_t STATIC_Xor_IntInt(int32_t A, int32_t B);
		float STATIC_WrapAngle(float degrees);
		float STATIC_VSizeSquared2D(const struct FVector2D& A);
		float STATIC_VSizeSquared(const struct FVector& A);
		float STATIC_VSize2D(const struct FVector2D& A);
		float STATIC_VSize(const struct FVector& A);
		struct FVector STATIC_VLerp(const struct FVector& A, const struct FVector& B, float Alpha);
		struct FVector STATIC_VInterpTo_SnapWithinDist(const struct FVector& current, const struct FVector& Target, float DeltaTime, float InterpSpeed, float SnapWithinDist);
		struct FVector STATIC_VInterpTo_SnapPastDist(const struct FVector& current, const struct FVector& Target, float DeltaTime, float InterpSpeed, float SnapPastDist);
		struct FVector STATIC_VInterpTo_Constant_SnapWithinDist(const struct FVector& current, const struct FVector& Target, float DeltaTime, float InterpSpeed, float SnapWithinDist);
		struct FVector STATIC_VInterpTo_Constant_SnapPastDist(const struct FVector& current, const struct FVector& Target, float DeltaTime, float InterpSpeed, float SnapPastDist);
		struct FVector STATIC_VInterpTo_Constant_ClampDist(const struct FVector& current, const struct FVector& Target, float DeltaTime, float InterpSpeed, float ClampDist);
		struct FVector STATIC_VInterpTo_Constant(const struct FVector& current, const struct FVector& Target, float DeltaTime, float InterpSpeed);
		struct FVector STATIC_VInterpTo_ClampDist(const struct FVector& current, const struct FVector& Target, float DeltaTime, float InterpSpeed, float ClampDist);
		struct FVector STATIC_VInterpTo(const struct FVector& current, const struct FVector& Target, float DeltaTime, float InterpSpeed);
		struct FVector STATIC_VEase(const struct FVector& A, const struct FVector& B, float Alpha, EEasingFunc EasingFunc, float BlendExp, int32_t Steps);
		struct FDateTime STATIC_UtcNow();
		struct FVector STATIC_TransformLocation(const struct UObject_FTransform& T, const struct FVector& Location);
		struct FVector STATIC_TransformDirection(const struct UObject_FTransform& T, const struct FVector& Direction);
		struct FDateTime STATIC_Today();
		struct UObject_FTransform STATIC_TLerp(const struct UObject_FTransform& A, const struct UObject_FTransform& B, float Alpha);
		struct UObject_FTransform STATIC_TInterpTo(const struct UObject_FTransform& current, const struct UObject_FTransform& Target, float DeltaTime, float InterpSpeed);
		struct FTimespan STATIC_TimespanZeroValue();
		float STATIC_TimespanRatio(const struct FTimespan& A, const struct FTimespan& B);
		struct FTimespan STATIC_TimespanMinValue();
		struct FTimespan STATIC_TimespanMaxValue();
		struct UObject_FTransform STATIC_TEase(const struct UObject_FTransform& A, const struct UObject_FTransform& B, float Alpha, EEasingFunc EasingFunc, float BlendExp, int32_t Steps);
		float STATIC_Tan(float A);
		struct FVector STATIC_Subtract_VectorVector(const struct FVector& A, const struct FVector& B);
		struct FVector STATIC_Subtract_VectorFloat(const struct FVector& A, float B);
		struct FVector2D STATIC_Subtract_Vector2DVector2D(const struct FVector2D& A, const struct FVector2D& B);
		struct FVector2D STATIC_Subtract_Vector2DFloat(const struct FVector2D& A, float B);
		struct FTimespan STATIC_Subtract_TimespanTimespan(const struct FTimespan& A, const struct FTimespan& B);
		int32_t STATIC_Subtract_IntInt(int32_t A, int32_t B);
		float STATIC_Subtract_FloatFloat(float A, float B);
		double STATIC_Subtract_DoubleFloat(double A, float B);
		double STATIC_Subtract_DoubleDouble(double A, double B);
		struct FDateTime STATIC_Subtract_DateTimeTimespan(const struct FDateTime& A, const struct FTimespan& B);
		unsigned char STATIC_Subtract_ByteByte(unsigned char A, unsigned char B);
		float STATIC_Square(float A);
		float STATIC_Sqrt(float A);
		float STATIC_Sin(float A);
		int32_t STATIC_SignOfInteger(int32_t A);
		float STATIC_SignOfFloat(float A);
		void STATIC_SetRandomStreamSeed(struct FRandomStream* Stream, int32_t NewSeed);
		struct FVector STATIC_SelectVector(const struct FVector& A, const struct FVector& B, bool bPickA);
		struct UObject_FTransform STATIC_SelectTransform(const struct UObject_FTransform& A, const struct UObject_FTransform& B, bool bPickA);
		class FString STATIC_SelectString(const class FString& A, const class FString& B, bool bPickA);
		struct FRotator STATIC_SelectRotator(const struct FRotator& A, const struct FRotator& B, bool bPickA);
		class UObject* STATIC_SelectObject(class UObject* A, class UObject* B, bool bSelectA);
		int32_t STATIC_SelectInt(int32_t A, int32_t B, bool bPickA);
		float STATIC_SelectFloat(float A, float B, bool bPickA);
		struct FLinearColor STATIC_SelectColor(const struct FLinearColor& A, const struct FLinearColor& B, bool bPickA);
		void STATIC_SeedRandomStream(struct FRandomStream* Stream);
		int32_t STATIC_Round(float A);
		struct FRotator STATIC_RotatorFromAxisAndAngle(const struct FVector& Axis, float Angle);
		struct FVector STATIC_RotateAngleAxis(const struct FVector& InVect, float AngleDeg, const struct FVector& Axis);
		struct FRotator STATIC_RLerp(const struct FRotator& A, const struct FRotator& B, float Alpha, bool bShortestPath);
		struct FRotator STATIC_RInterpTo_PerAxis(const struct FRotator& current, const struct FRotator& Target, float DeltaTime, const struct FRotator& InterpSpeedPerAxis);
		struct FRotator STATIC_RInterpTo_Constant_PerAxis(const struct FRotator& current, const struct FRotator& Target, float DeltaTime, const struct FRotator& InterpSpeedPerAxis);
		struct FRotator STATIC_RInterpTo_Constant(const struct FRotator& current, const struct FRotator& Target, float DeltaTime, float InterpSpeed);
		struct FRotator STATIC_RInterpTo(const struct FRotator& current, const struct FRotator& Target, float DeltaTime, float InterpSpeed);
		void STATIC_RGBToHSV_Vector(const struct FLinearColor& RGB, struct FLinearColor* HSV);
		void STATIC_RGBToHSV(const struct FLinearColor& InColor, float* H, float* S, float* V, float* A);
		void STATIC_ResetRandomStream(const struct FRandomStream& Stream);
		struct FRotator STATIC_REase(const struct FRotator& A, const struct FRotator& B, float Alpha, bool bShortestPath, EEasingFunc EasingFunc, float BlendExp, int32_t Steps);
		struct FVector STATIC_RandomUnitVectorInCone(const struct FVector& ConeDir, float ConeHalfAngle);
		struct FVector STATIC_RandomUnitVectorFromStream(const struct FRandomStream& Stream);
		struct FVector STATIC_RandomUnitVector();
		struct FRotator STATIC_RandomRotatorFromStream(bool bRoll, const struct FRandomStream& Stream);
		struct FRotator STATIC_RandomRotator(bool bRoll);
		struct FVector STATIC_RandomPointInBoundingBox(const struct FVector& Origin, const struct FVector& BoxExtent);
		int32_t STATIC_RandomIntegerInRangeFromStream(int32_t Min, int32_t Max, const struct FRandomStream& Stream);
		int32_t STATIC_RandomIntegerInRange(int32_t Min, int32_t Max);
		int32_t STATIC_RandomIntegerFromStream(int32_t Max, const struct FRandomStream& Stream);
		int32_t STATIC_RandomInteger(int32_t Max);
		float STATIC_RandomFloatInRangeFromStream(float Min, float Max, const struct FRandomStream& Stream);
		float STATIC_RandomFloatInRange(float Min, float Max);
		float STATIC_RandomFloatFromStream(const struct FRandomStream& Stream);
		float STATIC_RandomFloat();
		bool STATIC_RandomBoolFromStream(const struct FRandomStream& Stream);
		bool STATIC_RandomBool();
		float STATIC_RadiansToDegrees(float A);
		struct FRotator STATIC_QInterpTo(const struct FRotator& current, const struct FRotator& Target, float DeltaTime, float InterpSpeed);
		struct FVector STATIC_ProjectVectorOnToPlane(const struct FVector& V, const struct FVector& PlaneNormal);
		struct FVector STATIC_ProjectOnTo(const struct FVector& X, const struct FVector& Y);
		bool STATIC_PointsAreCoplanar(TArray<struct FVector> Points, float Tolerance);
		int32_t STATIC_Percent_IntInt(int32_t A, int32_t B);
		float STATIC_Percent_FloatFloat(float A, float B);
		double STATIC_Percent_DoubleDouble(double A, double B);
		unsigned char STATIC_Percent_ByteByte(unsigned char A, unsigned char B);
		int32_t STATIC_Or_IntInt(int32_t A, int32_t B);
		struct FDateTime STATIC_Now();
		bool STATIC_NotEqual_VectorVector(const struct FVector& A, const struct FVector& B);
		bool STATIC_NotEqual_TimespanTimespan(const struct FTimespan& A, const struct FTimespan& B);
		bool STATIC_NotEqual_RotatorRotator(const struct FRotator& A, const struct FRotator& B);
		bool STATIC_NotEqual_ObjectObject(class UObject* A, class UObject* B);
		bool STATIC_NotEqual_NameName(const class FName& A, const class FName& B);
		bool STATIC_NotEqual_IntInt(int32_t A, int32_t B);
		bool STATIC_NotEqual_FloatFloat(float A, float B);
		bool STATIC_NotEqual_DoubleDouble(double A, double B);
		bool STATIC_NotEqual_DateTimeDateTime(const struct FDateTime& A, const struct FDateTime& B);
		bool STATIC_NotEqual_ClassClass(class UClass* A, class UClass* B);
		bool STATIC_NotEqual_ByteByte(unsigned char A, unsigned char B);
		bool STATIC_NotEqual_BoolBool(bool A, bool B);
		bool STATIC_Not_PreBool(bool A);
		int32_t STATIC_Not_Int(int32_t A);
		float STATIC_NormalizeToRange(float Value, float RangeMin, float RangeMax);
		struct FRotator STATIC_NormalizedDeltaRotator(const struct FRotator& A, const struct FRotator& B);
		struct FVector2D STATIC_Normal2D(const struct FVector2D& A);
		struct FVector STATIC_Normal(const struct FVector& A);
		struct FVector STATIC_NegateVector(const struct FVector& A);
		struct FRotator STATIC_NegateRotator(const struct FRotator& A);
		bool STATIC_NearlyEqual_VectorVector(const struct FVector& A, const struct FVector& B, float ErrorTolerance);
		bool STATIC_NearlyEqual_FloatFloat(float A, float B, float ErrorTolerance);
		bool STATIC_NearlyEqual_DoubleDouble(double A, double B, float ErrorTolerance);
		int32_t STATIC_MultiplyMultiply_IntInt(int32_t Base, int32_t Exp);
		float STATIC_MultiplyMultiply_FloatFloat(float Base, float Exp);
		float STATIC_MultiplyByPi(float Value);
		struct FVector STATIC_Multiply_VectorVector(const struct FVector& A, const struct FVector& B);
		struct FVector STATIC_Multiply_VectorFloat(const struct FVector& A, float B);
		struct FVector2D STATIC_Multiply_Vector2DFloat(const struct FVector2D& A, float B);
		struct FTimespan STATIC_Multiply_TimespanFloat(const struct FTimespan& A, float Scalar);
		struct FRotator STATIC_Multiply_RotatorFloat(const struct FRotator& A, float B);
		struct FLinearColor STATIC_Multiply_LinearColorLinearColor(const struct FLinearColor& A, const struct FLinearColor& B);
		struct FLinearColor STATIC_Multiply_LinearColorFloat(const struct FLinearColor& A, float B);
		int32_t STATIC_Multiply_IntInt(int32_t A, int32_t B);
		float STATIC_Multiply_IntFloat(int32_t A, float B);
		float STATIC_Multiply_FloatFloat(float A, float B);
		double STATIC_Multiply_DoubleFloat(double A, float B);
		double STATIC_Multiply_DoubleDouble(double A, double B);
		unsigned char STATIC_Multiply_ByteByte(unsigned char A, unsigned char B);
		struct FVector STATIC_MirrorVectorByNormal(const struct FVector& InVect, const struct FVector& InNormal);
		void STATIC_MinOfIntArray(TArray<int32_t> IntArray, int32_t* IndexOfMinValue, int32_t* MinValue);
		void STATIC_MinOfFloatArray(TArray<float> FloatArray, int32_t* IndexOfMinValue, float* MinValue);
		void STATIC_MinOfByteArray(TArray<unsigned char> ByteArray, int32_t* IndexOfMinValue, unsigned char* MinValue);
		void STATIC_MinimumAreaRectangle(class UObject* WorldContextObject, TArray<struct FVector> InVerts, const struct FVector& SampleSurfaceNormal, struct FVector* OutRectCenter, struct FRotator* OutRectRotation, float* OutSideLengthX, float* OutSideLengthY, bool bDebugDraw);
		int32_t STATIC_Min(int32_t A, int32_t B);
		void STATIC_MaxOfIntArray(TArray<int32_t> IntArray, int32_t* IndexOfMaxValue, int32_t* MaxValue);
		void STATIC_MaxOfFloatArray(TArray<float> FloatArray, int32_t* IndexOfMaxValue, float* MaxValue);
		void STATIC_MaxOfByteArray(TArray<unsigned char> ByteArray, int32_t* IndexOfMaxValue, unsigned char* MaxValue);
		int32_t STATIC_Max(int32_t A, int32_t B);
		float STATIC_MapRange(float Value, float InRangeA, float InRangeB, float OutRangeA, float OutRangeB);
		struct FVector2D STATIC_MakeVector2D(float X, float Y);
		struct FVector STATIC_MakeVector(float X, float Y, float Z);
		struct UObject_FTransform STATIC_MakeTransform(const struct FVector& Location, const struct FRotator& Rotation, const struct FVector& Scale);
		struct FRotator STATIC_MakeRotFromZY(const struct FVector& Z, const struct FVector& Y);
		struct FRotator STATIC_MakeRotFromZX(const struct FVector& Z, const struct FVector& X);
		struct FRotator STATIC_MakeRotFromZ(const struct FVector& Z);
		struct FRotator STATIC_MakeRotFromYZ(const struct FVector& Y, const struct FVector& Z);
		struct FRotator STATIC_MakeRotFromYX(const struct FVector& Y, const struct FVector& X);
		struct FRotator STATIC_MakeRotFromY(const struct FVector& Y);
		struct FRotator STATIC_MakeRotFromXZ(const struct FVector& X, const struct FVector& Z);
		struct FRotator STATIC_MakeRotFromXY(const struct FVector& X, const struct FVector& Y);
		struct FRotator STATIC_MakeRotFromX(const struct FVector& X);
		struct FRotator STATIC_MakeRotationFromAxes(const struct FVector& Forward, const struct FVector& Right, const struct FVector& Up);
		struct FRotator STATIC_MakeRot(float Pitch, float Yaw, float Roll);
		struct FLinearColor STATIC_MakeColor(float R, float G, float B, float A);
		float STATIC_Loge(float A);
		bool STATIC_LinePlaneIntersection_OriginNormal(const struct FVector& LineStart, const struct FVector& LineEnd, const struct FVector& PlaneOrigin, const struct FVector& PlaneNormal, float* T, struct FVector* Intersection);
		bool STATIC_LinePlaneIntersection(const struct FVector& LineStart, const struct FVector& LineEnd, const struct FPlane& APlane, float* T, struct FVector* Intersection);
		struct FLinearColor STATIC_LinearColorLerp(const struct FLinearColor& A, const struct FLinearColor& B, float Alpha);
		struct FVector STATIC_LessLess_VectorRotator(const struct FVector& A, const struct FRotator& B);
		bool STATIC_LessEqual_TimespanTimespan(const struct FTimespan& A, const struct FTimespan& B);
		bool STATIC_LessEqual_IntInt(int32_t A, int32_t B);
		bool STATIC_LessEqual_FloatFloat(float A, float B);
		bool STATIC_LessEqual_DoubleDouble(double A, double B);
		bool STATIC_LessEqual_DateTimeDateTime(const struct FDateTime& A, const struct FDateTime& B);
		bool STATIC_LessEqual_ByteByte(unsigned char A, unsigned char B);
		bool STATIC_Less_TimespanTimespan(const struct FTimespan& A, const struct FTimespan& B);
		bool STATIC_Less_IntInt(int32_t A, int32_t B);
		bool STATIC_Less_FloatFloat(float A, float B);
		bool STATIC_Less_DoubleDouble(double A, double B);
		bool STATIC_Less_DateTimeDateTime(const struct FDateTime& A, const struct FDateTime& B);
		bool STATIC_Less_ByteByte(unsigned char A, unsigned char B);
		float STATIC_LerpAngle(float startDegrees, float endDegrees, float Alpha);
		float STATIC_Lerp(float A, float B, float Alpha);
		bool STATIC_IsRotatorInfiniteOrNaN(const struct FRotator& A);
		bool STATIC_IsPointInBox(const struct FVector& Point, const struct FVector& BoxOrigin, const struct FVector& BoxExtent);
		bool STATIC_IsMorning(const struct FDateTime& A);
		bool STATIC_IsLeapYear(int32_t Year);
		bool STATIC_IsInfiniteOrNaN(const struct FVector& A);
		bool STATIC_IsAfternoon(const struct FDateTime& A);
		struct FVector STATIC_InverseTransformLocation(const struct UObject_FTransform& T, const struct FVector& Location);
		struct FVector STATIC_InverseTransformDirection(const struct UObject_FTransform& T, const struct FVector& Direction);
		bool STATIC_InRange_FloatFloat(float Value, float Min, float Max, bool InclusiveMin, bool InclusiveMax);
		void STATIC_HSVToRGB_Vector(const struct FLinearColor& HSV, struct FLinearColor* RGB);
		struct FLinearColor STATIC_HSVToRGB(float H, float S, float V, float A);
		struct FVector STATIC_GreaterGreater_VectorRotator(const struct FVector& A, const struct FRotator& B);
		bool STATIC_GreaterEqual_TimespanTimespan(const struct FTimespan& A, const struct FTimespan& B);
		bool STATIC_GreaterEqual_IntInt(int32_t A, int32_t B);
		bool STATIC_GreaterEqual_FloatFloat(float A, float B);
		bool STATIC_GreaterEqual_DoubleDouble(double A, double B);
		bool STATIC_GreaterEqual_DateTimeDateTime(const struct FDateTime& A, const struct FDateTime& B);
		bool STATIC_GreaterEqual_ByteByte(unsigned char A, unsigned char B);
		bool STATIC_Greater_TimespanTimespan(const struct FTimespan& A, const struct FTimespan& B);
		bool STATIC_Greater_IntInt(int32_t A, int32_t B);
		bool STATIC_Greater_FloatFloat(float A, float B);
		bool STATIC_Greater_DoubleDouble(double A, double B);
		bool STATIC_Greater_DateTimeDateTime(const struct FDateTime& A, const struct FDateTime& B);
		bool STATIC_Greater_ByteByte(unsigned char A, unsigned char B);
		int32_t STATIC_GetYear(const struct FDateTime& A);
		struct FVector STATIC_GetVectorArrayAverage(TArray<struct FVector> Vectors);
		struct FVector STATIC_GetUpVector(const struct FRotator& InRot);
		float STATIC_GetTotalSeconds(const struct FTimespan& A);
		float STATIC_GetTotalMinutes(const struct FTimespan& A);
		float STATIC_GetTotalMilliseconds(const struct FTimespan& A);
		float STATIC_GetTotalHours(const struct FTimespan& A);
		float STATIC_GetTotalDays(const struct FTimespan& A);
		struct FTimespan STATIC_GetTimeOfDay(const struct FDateTime& A);
		int32_t STATIC_GetSeconds(const struct FTimespan& A);
		int32_t STATIC_GetSecond(const struct FDateTime& A);
		struct FVector STATIC_GetRightVector(const struct FRotator& InRot);
		float STATIC_GetPI();
		int32_t STATIC_GetMonth(const struct FDateTime& A);
		int32_t STATIC_GetMinutes(const struct FTimespan& A);
		int32_t STATIC_GetMinute(const struct FDateTime& A);
		float STATIC_GetMinElement(const struct FVector& A);
		int32_t STATIC_GetMilliseconds(const struct FTimespan& A);
		int32_t STATIC_GetMillisecond(const struct FDateTime& A);
		float STATIC_GetMaxElement(const struct FVector& A);
		int32_t STATIC_GetHours(const struct FTimespan& A);
		int32_t STATIC_GetHour12(const struct FDateTime& A);
		int32_t STATIC_GetHour(const struct FDateTime& A);
		struct FVector STATIC_GetForwardVector(const struct FRotator& InRot);
		struct FTimespan STATIC_GetDuration(const struct FTimespan& A);
		struct FVector STATIC_GetDirectionVector(const struct FVector& From, const struct FVector& To);
		int32_t STATIC_GetDays(const struct FTimespan& A);
		int32_t STATIC_GetDayOfYear(const struct FDateTime& A);
		int32_t STATIC_GetDay(const struct FDateTime& A);
		struct FDateTime STATIC_GetDate(const struct FDateTime& A);
		void STATIC_GetAxes(const struct FRotator& A, struct FVector* X, struct FVector* Y, struct FVector* Z);
		struct FTimespan STATIC_FromSeconds(float Seconds);
		struct FTimespan STATIC_FromMinutes(float Minutes);
		struct FTimespan STATIC_FromMilliseconds(float Milliseconds);
		struct FTimespan STATIC_FromHours(float Hours);
		struct FTimespan STATIC_FromDays(float Days);
		float STATIC_Fraction(float A);
		int32_t STATIC_FMod(float Dividend, float Divisor, float* Remainder);
		float STATIC_FMin(float A, float B);
		float STATIC_FMax(float A, float B);
		struct FVector STATIC_FlattenVectorNormal(const struct FVector& A);
		struct FVector STATIC_FlattenVector(const struct FVector& A);
		float STATIC_FInterpTo_Constant(float current, float Target, float DeltaTime, float InterpSpeed);
		float STATIC_FInterpTo(float current, float Target, float DeltaTime, float InterpSpeed);
		float STATIC_FInterpEaseInOut(float A, float B, float Alpha, float Exponent);
		struct FRotator STATIC_FindLookAtRotation(const struct FVector& Start, const struct FVector& Target);
		int32_t STATIC_FFloor(float A);
		float STATIC_FClamp(float Value, float Min, float Max);
		int32_t STATIC_FCeil(float A);
		float STATIC_FAngleInterpTo(float CurrentDegrees, float TargetDegrees, float DeltaTime, float InterpSpeed);
		float STATIC_FAngleInterpEaseOut(float startAngle, float endAngle, float Alpha, float BlendExp);
		float STATIC_FAngleInterpEaseInOut(float startAngle, float endAngle, float Alpha, float BlendExp);
		float STATIC_FAngleInterpEaseIn(float startAngle, float endAngle, float Alpha, float BlendExp);
		float STATIC_Exp(float A);
		bool STATIC_EqualEqual_VectorVector(const struct FVector& A, const struct FVector& B);
		bool STATIC_EqualEqual_TimespanTimespan(const struct FTimespan& A, const struct FTimespan& B);
		bool STATIC_EqualEqual_RotatorRotator(const struct FRotator& A, const struct FRotator& B);
		bool STATIC_EqualEqual_ObjectObject(class UObject* A, class UObject* B);
		bool STATIC_EqualEqual_NameName(const class FName& A, const class FName& B);
		bool STATIC_EqualEqual_IntInt(int32_t A, int32_t B);
		bool STATIC_EqualEqual_FloatFloat(float A, float B);
		bool STATIC_EqualEqual_DoubleDouble(double A, double B);
		bool STATIC_EqualEqual_DateTimeDateTime(const struct FDateTime& A, const struct FDateTime& B);
		bool STATIC_EqualEqual_ClassClass(class UClass* A, class UClass* B);
		bool STATIC_EqualEqual_ByteByte(unsigned char A, unsigned char B);
		bool STATIC_EqualEqual_BoolBool(bool A, bool B);
		float STATIC_EaseAngle(float startAngle, float endAngle, float Alpha, EEasingFunc EasingFunc, float BlendExp, int32_t Steps);
		float STATIC_Ease(float A, float B, float Alpha, EEasingFunc EasingFunc, float BlendExp, int32_t Steps);
		float STATIC_Dot_VectorVector(const struct FVector& A, const struct FVector& B);
		struct FVector STATIC_Divide_VectorVector(const struct FVector& A, const struct FVector& B);
		struct FVector STATIC_Divide_VectorFloat(const struct FVector& A, float B);
		struct FVector2D STATIC_Divide_Vector2DFloat(const struct FVector2D& A, float B);
		int32_t STATIC_Divide_IntInt(int32_t A, int32_t B);
		float STATIC_Divide_FloatFloat(float A, float B);
		double STATIC_Divide_DoubleFloat(double A, float B);
		double STATIC_Divide_DoubleDouble(double A, double B);
		unsigned char STATIC_Divide_ByteByte(unsigned char A, unsigned char B);
		float STATIC_DegTan(float A);
		float STATIC_DegSin(float A);
		float STATIC_DegreesToRadians(float A);
		float STATIC_DegCos(float A);
		float STATIC_DegAtan2(float A, float B);
		float STATIC_DegAsin(float A);
		float STATIC_DegAcos(float A);
		int32_t STATIC_DaysInYear(int32_t Year);
		int32_t STATIC_DaysInMonth(int32_t Year, int32_t Month);
		struct FDateTime STATIC_DateTimeMinValue();
		struct FDateTime STATIC_DateTimeMaxValue();
		struct FVector STATIC_Cross_VectorVector(const struct FVector& A, const struct FVector& B);
		float STATIC_Cos(float A);
		struct UObject_FTransform STATIC_ConvertTransformToRelative(const struct UObject_FTransform& WorldTransform, const struct UObject_FTransform& LocalTransform);
		struct FVector2D STATIC_Conv_VectorToVector2D(const struct FVector& InVector);
		struct UObject_FTransform STATIC_Conv_VectorToTransform(const struct FVector& InLocation);
		struct FRotator STATIC_Conv_VectorToRotator(const struct FVector& inVec);
		struct FLinearColor STATIC_Conv_VectorToLinearColor(const struct FVector& inVec);
		struct FVector STATIC_Conv_Vector2DToVector(const struct FVector2D& InVector2D, float Z);
		struct FVector STATIC_Conv_RotatorToVector(const struct FRotator& InRot);
		struct FVector STATIC_Conv_LinearColorToVector(const struct FLinearColor& InLinearColor);
		struct FColor STATIC_Conv_LinearColorToColor(const struct FLinearColor& InLinearColor);
		float STATIC_Conv_IntToFloat(int32_t InInt);
		unsigned char STATIC_Conv_IntToByte(int32_t InInt);
		bool STATIC_Conv_IntToBool(int32_t InInt);
		struct FVector STATIC_Conv_FloatToVector(float InFloat);
		struct FLinearColor STATIC_Conv_FloatToLinearColor(float InFloat);
		double STATIC_Conv_FloatToDouble(float InFloat);
		float STATIC_Conv_DoubleToFloat(double InDouble);
		struct FLinearColor STATIC_Conv_ColorToLinearColor(const struct FColor& InColor);
		int32_t STATIC_Conv_ByteToInt(unsigned char InByte);
		float STATIC_Conv_ByteToFloat(unsigned char InByte);
		int32_t STATIC_Conv_BoolToInt(bool InBool);
		float STATIC_Conv_BoolToFloat(bool InBool);
		unsigned char STATIC_Conv_BoolToByte(bool InBool);
		struct UObject_FTransform STATIC_ComposeTransforms(const struct UObject_FTransform& A, const struct UObject_FTransform& B);
		struct FRotator STATIC_ComposeRotators(const struct FRotator& A, const struct FRotator& B);
		bool STATIC_ClassIsChildOf(class UClass* TestClass, class UClass* ParentClass);
		struct FVector STATIC_ClampVectorSize(const struct FVector& A, float Min, float Max);
		float STATIC_ClampAngle(float AngleDegrees, float MinAngleDegrees, float MaxAngleDegrees);
		int32_t STATIC_Clamp(int32_t Value, int32_t Min, int32_t Max);
		struct FLinearColor STATIC_CInterpTo(const struct FLinearColor& current, const struct FLinearColor& Target, float DeltaTime, float InterpSpeed);
		void STATIC_BreakVector2D(const struct FVector2D& inVec, float* X, float* Y);
		void STATIC_BreakVector(const struct FVector& inVec, float* X, float* Y, float* Z);
		void STATIC_BreakTransform(const struct UObject_FTransform& InTransform, struct FVector* Location, struct FRotator* Rotation, struct FVector* Scale);
		void STATIC_BreakRotIntoAxes(const struct FRotator& InRot, struct FVector* X, struct FVector* Y, struct FVector* Z);
		void STATIC_BreakRot(const struct FRotator& InRot, float* Pitch, float* Yaw, float* Roll);
		void STATIC_BreakColor(const struct FLinearColor& InColor, float* R, float* G, float* B, float* A);
		struct FVector STATIC_BoundToCube(const struct FVector& A, float Radius);
		bool STATIC_BooleanXOR(bool A, bool B);
		bool STATIC_BooleanOR(bool A, bool B);
		bool STATIC_BooleanAND(bool A, bool B);
		float STATIC_Atan2(float A, float B);
		float STATIC_Asin(float A);
		int32_t STATIC_And_IntInt(int32_t A, int32_t B);
		struct FVector STATIC_Add_VectorVector(const struct FVector& A, const struct FVector& B);
		struct FVector STATIC_Add_VectorFloat(const struct FVector& A, float B);
		struct FVector2D STATIC_Add_Vector2DVector2D(const struct FVector2D& A, const struct FVector2D& B);
		struct FVector2D STATIC_Add_Vector2DFloat(const struct FVector2D& A, float B);
		struct FTimespan STATIC_Add_TimespanTimespan(const struct FTimespan& A, const struct FTimespan& B);
		int32_t STATIC_Add_IntInt(int32_t A, int32_t B);
		float STATIC_Add_FloatFloat(float A, float B);
		double STATIC_Add_DoubleFloat(double A, float B);
		double STATIC_Add_DoubleDouble(double A, double B);
		struct FDateTime STATIC_Add_DateTimeTimespan(const struct FDateTime& A, const struct FTimespan& B);
		unsigned char STATIC_Add_ByteByte(unsigned char A, unsigned char B);
		float STATIC_Acos(float A);
		int32_t STATIC_Abs_Int(int32_t A);
		float STATIC_Abs(float A);
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.KismetNodeHelperLibrary
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class UKismetNodeHelperLibrary : public UBlueprintFunctionLibrary
	{
	public:
		void STATIC_MarkBit(int32_t* Data, int32_t index);
		bool STATIC_HasUnmarkedBit(int32_t Data, int32_t NumBits);
		bool STATIC_HasMarkedBit(int32_t Data, int32_t NumBits);
		unsigned char STATIC_GetValidIndex(class UEnum* Enum, unsigned char EnumeratorIndex);
		int32_t STATIC_GetUnmarkedBit(int32_t Data, int32_t StartIdx, int32_t NumBits, bool bRandom);
		int32_t STATIC_GetRandomUnmarkedBit(int32_t Data, int32_t StartIdx, int32_t NumBits);
		int32_t STATIC_GetFirstUnmarkedBit(int32_t Data, int32_t StartIdx, int32_t NumBits);
		class FString STATIC_GetEnumeratorUserFriendlyName(class UEnum* Enum, unsigned char EnumeratorIndex);
		class FName STATIC_GetEnumeratorName(class UEnum* Enum, unsigned char EnumeratorIndex);
		void STATIC_ClearBit(int32_t* Data, int32_t index);
		void STATIC_ClearAllBits(int32_t* Data);
		bool STATIC_BitIsMarked(int32_t Data, int32_t index);
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.Texture
	 * Size -> 0x0088 (FullSize[0x00B0] - InheritedSize[0x0028])
	 */
	class UTexture : public UObject
	{
	public:
		class FString                                              BulkDataFilePath;                                        // 0x0028(0x0010) ZeroConstructor
		int32_t                                                    LODBias;                                                 // 0x0038(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable
		int32_t                                                    NumCinematicMipLevels;                                   // 0x003C(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay
		unsigned char                                              SRGB : 1;                                                // 0x0040(0x0001) BIT_FIELD Edit, BlueprintVisible, NoDestructor, AssetRegistrySearchable
		unsigned char                                              NeverStream : 1;                                         // 0x0040(0x0001) BIT_FIELD Edit, BlueprintVisible, NoDestructor, AssetRegistrySearchable, AdvancedDisplay
		unsigned char                                              bNoTiling : 1;                                           // 0x0040(0x0001) BIT_FIELD NoDestructor
		unsigned char                                              bUseCinematicMipLevels : 1;                              // 0x0040(0x0001) BIT_FIELD Transient, NoDestructor
		unsigned char                                              bBulkDataOverrideBasePath : 1;                           // 0x0040(0x0001) BIT_FIELD NoDestructor
		unsigned char                                              UnknownData_OGNH[0x3];                                   // 0x0041(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int32_t                                                    CachedCombinedLODBias;                                   // 0x0044(0x0004) ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		int32_t                                                    CachedStreamingLODBias;                                  // 0x0048(0x0004) ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		unsigned char                                              bAsyncResourceReleaseHasBeenStarted : 1;                 // 0x004C(0x0001) BIT_FIELD Transient, NoDestructor
		unsigned char                                              UnknownData_GYEB[0x3];                                   // 0x004D(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		ETextureCompressionSettings                                CompressionSettings;                                     // 0x0050(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable
		ETextureFilter                                             Filter;                                                  // 0x0051(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, AdvancedDisplay
		ETextureGroup                                              LODGroup;                                                // 0x0052(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable
		unsigned char                                              UnknownData_Y6S7[0x5D];                                  // 0x0053(0x005D) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.TextureRenderTarget
	 * Size -> 0x0008 (FullSize[0x00B8] - InheritedSize[0x00B0])
	 */
	class UTextureRenderTarget : public UTexture
	{
	public:
		float                                                      TargetGamma;                                             // 0x00B0(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_CRWY[0x4];                                   // 0x00B4(0x0004) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.TextureRenderTarget2D
	 * Size -> 0x0040 (FullSize[0x00F8] - InheritedSize[0x00B8])
	 */
	class UTextureRenderTarget2D : public UTextureRenderTarget
	{
	public:
		int32_t                                                    SizeX;                                                   // 0x00B8(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable
		int32_t                                                    SizeY;                                                   // 0x00BC(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable
		struct FLinearColor                                        ClearColor;                                              // 0x00C0(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable
		ETextureAddress                                            AddressX;                                                // 0x00D0(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable
		ETextureAddress                                            AddressY;                                                // 0x00D1(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable
		unsigned char                                              UnknownData_HX8R[0x2];                                   // 0x00D2(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		unsigned char                                              bForceLinearGamma : 1;                                   // 0x00D4(0x0001) BIT_FIELD NoDestructor
		unsigned char                                              bHDR : 1;                                                // 0x00D4(0x0001) BIT_FIELD Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AssetRegistrySearchable
		unsigned char                                              UnknownData_OI2T[0x3];                                   // 0x00D5(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		unsigned char                                              bAutoGenerateMips : 1;                                   // 0x00D8(0x0001) BIT_FIELD Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AssetRegistrySearchable
		ETextureRenderTargetFormat                                 RenderTargetFormat;                                      // 0x00D9(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable
		EPixelFormat                                               OverrideFormat;                                          // 0x00DA(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_62OO[0x1D];                                  // 0x00DB(0x001D) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.KismetRenderingLibrary
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class UKismetRenderingLibrary : public UBlueprintFunctionLibrary
	{
	public:
		class UTexture2D* STATIC_RenderTargetCreateStaticTexture2DEditorOnly(class UTextureRenderTarget2D* RenderTarget, const class FString& Name, ETextureCompressionSettings CompressionSettings, ETextureMipGenSettings MipSettings);
		void STATIC_ReleaseRenderTarget2D(class UTextureRenderTarget2D* TextureRenderTarget);
		struct FColor STATIC_ReadRenderTargetUV(class UObject* WorldContextObject, class UTextureRenderTarget2D* TextureRenderTarget, float U, float V);
		struct FLinearColor STATIC_ReadRenderTargetRawUV(class UObject* WorldContextObject, class UTextureRenderTarget2D* TextureRenderTarget, float U, float V);
		struct FLinearColor STATIC_ReadRenderTargetRawPixel(class UObject* WorldContextObject, class UTextureRenderTarget2D* TextureRenderTarget, int32_t X, int32_t Y);
		struct FColor STATIC_ReadRenderTargetPixel(class UObject* WorldContextObject, class UTextureRenderTarget2D* TextureRenderTarget, int32_t X, int32_t Y);
		class UTexture2D* STATIC_ImportFileAsTexture2D(class UObject* WorldContextObject, const class FString& filename);
		void STATIC_ExportTexture2D(class UObject* WorldContextObject, class UTexture2D* Texture, const class FString& FilePath, const class FString& filename);
		void STATIC_ExportRenderTarget(class UObject* WorldContextObject, class UTextureRenderTarget2D* TextureRenderTarget, const class FString& FilePath, const class FString& filename);
		void STATIC_EndDrawCanvasToRenderTarget(class UObject* WorldContextObject, const struct FDrawToRenderTargetContext& Context);
		void STATIC_DrawMaterialToRenderTarget(class UObject* WorldContextObject, class UTextureRenderTarget2D* TextureRenderTarget, class UMaterialInterface* Material);
		class UTextureRenderTarget2D* STATIC_CreateRenderTarget2D(class UObject* WorldContextObject, int32_t Width, int32_t Height, ETextureRenderTargetFormat Format);
		void STATIC_ConvertRenderTargetToTexture2DEditorOnly(class UObject* WorldContextObject, class UTextureRenderTarget2D* RenderTarget, class UTexture2D* Texture);
		void STATIC_ClearRenderTarget2D(class UObject* WorldContextObject, class UTextureRenderTarget2D* TextureRenderTarget, const struct FLinearColor& ClearColor);
		void STATIC_BeginDrawCanvasToRenderTarget(class UObject* WorldContextObject, class UTextureRenderTarget2D* TextureRenderTarget, class UCanvas** Canvas, struct FVector2D* Size, struct FDrawToRenderTargetContext* Context);
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.KismetStringLibrary
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class UKismetStringLibrary : public UBlueprintFunctionLibrary
	{
	public:
		class FString STATIC_TrimTrailing(const class FString& SourceString);
		class FString STATIC_Trim(const class FString& SourceString);
		class FString STATIC_ToUpper(const class FString& SourceString);
		class FString STATIC_ToLower(const class FString& SourceString);
		bool STATIC_StartsWith(const class FString& SourceString, const class FString& InPrefix, ESearchCase SearchCase);
		bool STATIC_Split(const class FString& SourceString, const class FString& InStr, class FString* LeftS, class FString* RightS, ESearchCase SearchCase, ESearchDir SearchDir);
		class FString STATIC_RightPad(const class FString& SourceString, int32_t ChCount);
		class FString STATIC_RightChop(const class FString& SourceString, int32_t Count);
		class FString STATIC_Right(const class FString& SourceString, int32_t Count);
		class FString STATIC_Reverse(const class FString& SourceString);
		int32_t STATIC_ReplaceInline(class FString* SourceString, const class FString& SearchText, const class FString& ReplacementText, ESearchCase SearchCase);
		class FString STATIC_Replace(const class FString& SourceString, const class FString& From, const class FString& To, ESearchCase SearchCase);
		TArray<class FString> STATIC_ParseIntoArray(const class FString& SourceString, const class FString& Delimiter, bool CullEmptyStrings);
		bool STATIC_NotEqual_StrStr(const class FString& A, const class FString& B);
		bool STATIC_NotEqual_StriStri(const class FString& A, const class FString& B);
		class FString STATIC_Mid(const class FString& SourceString, int32_t Start, int32_t Count);
		bool STATIC_MatchesWildcard(const class FString& SourceString, const class FString& Wildcard, ESearchCase SearchCase);
		int32_t STATIC_Len(const class FString& S);
		class FString STATIC_LeftPad(const class FString& SourceString, int32_t ChCount);
		class FString STATIC_LeftChop(const class FString& SourceString, int32_t Count);
		class FString STATIC_Left(const class FString& SourceString, int32_t Count);
		class FString STATIC_JoinStringArray(TArray<class FString> SourceArray, const class FString& Separator);
		bool STATIC_IsNumeric(const class FString& SourceString);
		class FString STATIC_GetSubstring(const class FString& SourceString, int32_t StartIndex, int32_t Length);
		int32_t STATIC_GetCharacterAsNumber(const class FString& SourceString, int32_t index);
		TArray<class FString> STATIC_GetCharacterArrayFromString(const class FString& SourceString);
		int32_t STATIC_FindSubstring(const class FString& SearchIn, const class FString& Substring, bool bUseCase, bool bSearchFromEnd, int32_t StartPosition);
		bool STATIC_EqualEqual_StrStr(const class FString& A, const class FString& B);
		bool STATIC_EqualEqual_StriStri(const class FString& A, const class FString& B);
		bool STATIC_EndsWith(const class FString& SourceString, const class FString& InSuffix, ESearchCase SearchCase);
		int32_t STATIC_CullArray(const class FString& SourceString, TArray<class FString>* InArray);
		class FString STATIC_Conv_VectorToString(const struct FVector& inVec);
		class FString STATIC_Conv_Vector2dToString(const struct FVector2D& inVec);
		class FString STATIC_Conv_TransformToString(const struct UObject_FTransform& InTrans);
		class FName STATIC_Conv_StringToName(const class FString& InString);
		int32_t STATIC_Conv_StringToInt(const class FString& InString);
		float STATIC_Conv_StringToFloat(const class FString& InString);
		double STATIC_Conv_StringToDouble(const class FString& InString);
		class FString STATIC_Conv_RotatorToString(const struct FRotator& InRot);
		class FString STATIC_Conv_ObjectToString(class UObject* InObj);
		class FString STATIC_Conv_NameToString(const class FName& InName);
		class FString STATIC_Conv_IntToString(int32_t InInt);
		class FString STATIC_Conv_FloatToString(float InFloat);
		class FString STATIC_Conv_DoubleToString(double InDouble);
		class FString STATIC_Conv_ColorToString(const struct FLinearColor& InColor);
		class FString STATIC_Conv_ByteToString(unsigned char InByte);
		class FString STATIC_Conv_BoolToString(bool InBool);
		class FString STATIC_Concat_StrStr(const class FString& A, const class FString& B);
		class FString STATIC_BuildString_Vector2d(const class FString& AppendTo, const class FString& Prefix, const struct FVector2D& InVector2D, const class FString& Suffix);
		class FString STATIC_BuildString_Vector(const class FString& AppendTo, const class FString& Prefix, const struct FVector& InVector, const class FString& Suffix);
		class FString STATIC_BuildString_Rotator(const class FString& AppendTo, const class FString& Prefix, const struct FRotator& InRot, const class FString& Suffix);
		class FString STATIC_BuildString_Object(const class FString& AppendTo, const class FString& Prefix, class UObject* InObj, const class FString& Suffix);
		class FString STATIC_BuildString_Name(const class FString& AppendTo, const class FString& Prefix, const class FName& InName, const class FString& Suffix);
		class FString STATIC_BuildString_Int(const class FString& AppendTo, const class FString& Prefix, int32_t InInt, const class FString& Suffix);
		class FString STATIC_BuildString_Float(const class FString& AppendTo, const class FString& Prefix, float InFloat, const class FString& Suffix);
		class FString STATIC_BuildString_Color(const class FString& AppendTo, const class FString& Prefix, const struct FLinearColor& InColor, const class FString& Suffix);
		class FString STATIC_BuildString_Bool(const class FString& AppendTo, const class FString& Prefix, bool InBool, const class FString& Suffix);
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.KismetSystemLibrary
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class UKismetSystemLibrary : public UBlueprintFunctionLibrary
	{
	public:
		void STATIC_SwitchNetworkMode(class UObject* WorldContextObject, ENetModeBP* OutNetworkMode);
		void STATIC_StackTrace();
		bool STATIC_SphereTraceSingleForObjects(class UObject* WorldContextObject, const struct FVector& Start, const struct FVector& End, float Radius, TArray<EObjectTypeQuery> ObjectTypes, bool bTraceComplex, TArray<class AActor*> ActorsToIgnore, EDrawDebugTrace DrawDebugType, struct FHitResult* OutHit, bool bIgnoreSelf);
		bool STATIC_SphereTraceSingleByObject_DEPRECATED(class UObject* WorldContextObject, const struct FVector& Start, const struct FVector& End, float Radius, TArray<ECollisionChannel> ObjectsToTrace, bool bTraceComplex, TArray<class AActor*> ActorsToIgnore, EDrawDebugTrace DrawDebugType, struct FHitResult* OutHit, bool bIgnoreSelf);
		bool STATIC_SphereTraceSingle_NEW(class UObject* WorldContextObject, const struct FVector& Start, const struct FVector& End, float Radius, ETraceTypeQuery TraceChannel, bool bTraceComplex, TArray<class AActor*> ActorsToIgnore, EDrawDebugTrace DrawDebugType, struct FHitResult* OutHit, bool bIgnoreSelf);
		bool STATIC_SphereTraceSingle_DEPRECATED(class UObject* WorldContextObject, const struct FVector& Start, const struct FVector& End, float Radius, ECollisionChannel TraceChannel, bool bTraceComplex, TArray<class AActor*> ActorsToIgnore, EDrawDebugTrace DrawDebugType, struct FHitResult* OutHit, bool bIgnoreSelf);
		bool STATIC_SphereTraceMultiForObjects(class UObject* WorldContextObject, const struct FVector& Start, const struct FVector& End, float Radius, TArray<EObjectTypeQuery> ObjectTypes, bool bTraceComplex, TArray<class AActor*> ActorsToIgnore, EDrawDebugTrace DrawDebugType, TArray<struct FHitResult>* OutHits, bool bIgnoreSelf);
		bool STATIC_SphereTraceMultiByObject_DEPRECATED(class UObject* WorldContextObject, const struct FVector& Start, const struct FVector& End, float Radius, TArray<ECollisionChannel> ObjectsToTrace, bool bTraceComplex, TArray<class AActor*> ActorsToIgnore, EDrawDebugTrace DrawDebugType, TArray<struct FHitResult>* OutHits, bool bIgnoreSelf);
		bool STATIC_SphereTraceMulti_NEW(class UObject* WorldContextObject, const struct FVector& Start, const struct FVector& End, float Radius, ETraceTypeQuery TraceChannel, bool bTraceComplex, TArray<class AActor*> ActorsToIgnore, EDrawDebugTrace DrawDebugType, TArray<struct FHitResult>* OutHits, bool bIgnoreSelf);
		bool STATIC_SphereTraceMulti_DEPRECATED(class UObject* WorldContextObject, const struct FVector& Start, const struct FVector& End, float Radius, ECollisionChannel TraceChannel, bool bTraceComplex, TArray<class AActor*> ActorsToIgnore, EDrawDebugTrace DrawDebugType, TArray<struct FHitResult>* OutHits, bool bIgnoreSelf);
		bool STATIC_SphereOverlapComponents_NEW(class UObject* WorldContextObject, const struct FVector& SpherePos, float SphereRadius, TArray<EObjectTypeQuery> ObjectTypes, class UClass* ComponentClassFilter, TArray<class AActor*> ActorsToIgnore, TArray<class UPrimitiveComponent*>* OutComponents);
		bool STATIC_SphereOverlapComponents_DEPRECATED(class UObject* WorldContextObject, const struct FVector& SpherePos, float SphereRadius, EOverlapFilterOption Filter, class UClass* ComponentClassFilter, TArray<class AActor*> ActorsToIgnore, TArray<class UPrimitiveComponent*>* OutComponents);
		bool STATIC_SphereOverlapActorsSimple(class UObject* WorldContextObject, const struct FVector& SpherePos, float SphereRadius, EObjectTypeQuery ObjectType, class UClass* ActorClassFilter, TArray<class AActor*> ActorsToIgnore, TArray<class AActor*>* OutActors);
		bool STATIC_SphereOverlapActors_NEW(class UObject* WorldContextObject, const struct FVector& SpherePos, float SphereRadius, TArray<EObjectTypeQuery> ObjectTypes, class UClass* ActorClassFilter, TArray<class AActor*> ActorsToIgnore, TArray<class AActor*>* OutActors);
		bool STATIC_SphereOverlapActors_DEPRECATED(class UObject* WorldContextObject, const struct FVector& SpherePos, float SphereRadius, EOverlapFilterOption Filter, class UClass* ActorClassFilter, TArray<class AActor*> ActorsToIgnore, TArray<class AActor*>* OutActors);
		void STATIC_ShowPlatformSpecificLeaderboardScreen(const class FString& CategoryName);
		void STATIC_ShowPlatformSpecificAchievementsScreen(class APlayerController* SpecificPlayer);
		void STATIC_ShowAdBanner(bool bShowOnBottomOfScreen);
		void STATIC_SetVectorPropertyByName(class UObject* Object, const class FName& PropertyName, const struct FVector& Value);
		void STATIC_SetTransformPropertyByName(class UObject* Object, const class FName& PropertyName, const struct UObject_FTransform& Value);
		void STATIC_SetTextPropertyByName(class UObject* Object, const class FName& PropertyName, const class FText& Value);
		void STATIC_SetSupressViewportTransitionMessage(class UObject* WorldContextObject, bool bState);
		void STATIC_SetStructurePropertyByName(class UObject* Object, const class FName& PropertyName, const struct FGenericStruct& Value);
		void STATIC_SetStringPropertyByName(class UObject* Object, const class FName& PropertyName, const class FString& Value);
		void STATIC_SetRotatorPropertyByName(class UObject* Object, const class FName& PropertyName, const struct FRotator& Value);
		void STATIC_SetObjectPropertyByName(class UObject* Object, const class FName& PropertyName, class UObject* Value);
		void STATIC_SetNamePropertyByName(class UObject* Object, const class FName& PropertyName, const class FName& Value);
		void STATIC_SetLinearColorPropertyByName(class UObject* Object, const class FName& PropertyName, const struct FLinearColor& Value);
		void STATIC_SetIntPropertyByName(class UObject* Object, const class FName& PropertyName, int32_t Value);
		void STATIC_SetFloatPropertyByName(class UObject* Object, const class FName& PropertyName, float Value);
		void STATIC_SetDoublePropertyByName(class UObject* Object, const class FName& PropertyName, double Value);
		void STATIC_SetClassPropertyByName(class UObject* Object, const class FName& PropertyName, class UClass* Value);
		void STATIC_SetBytePropertyByName(class UObject* Object, const class FName& PropertyName, unsigned char Value);
		void STATIC_SetBoolPropertyByName(class UObject* Object, const class FName& PropertyName, bool Value);
		void STATIC_RetriggerableDelay(class UObject* WorldContextObject, float Duration, const struct FLatentActionInfo& LatentInfo);
		void STATIC_QuitGame(class UObject* WorldContextObject, class APlayerController* SpecificPlayer, EQuitPreference QuitPreference);
		void STATIC_PrintWarning(const class FString& InString);
		void STATIC_PrintString(class UObject* WorldContextObject, const class FString& InString, bool bPrintToScreen, bool bPrintToLog, const struct FLinearColor& TextColor, float Duration, int32_t AtIndex);
		void STATIC_MoveComponentTo(class USceneComponent* Component, const struct FVector& TargetRelativeLocation, const struct FRotator& TargetRelativeRotation, bool bEaseOut, bool bEaseIn, float OverTime, EMoveComponentAction MoveAction, const struct FLatentActionInfo& LatentInfo, bool bSweep);
		class FText STATIC_MakeLiteralText(const class FText& Value);
		class FString STATIC_MakeLiteralString(const class FString& Value);
		class FName STATIC_MakeLiteralName(const class FName& Value);
		int32_t STATIC_MakeLiteralInt(int32_t Value);
		float STATIC_MakeLiteralFloat(float Value);
		unsigned char STATIC_MakeLiteralByte(unsigned char Value);
		bool STATIC_MakeLiteralBool(bool Value);
		bool STATIC_LineTraceSingleForObjects(class UObject* WorldContextObject, const struct FVector& Start, const struct FVector& End, TArray<EObjectTypeQuery> ObjectTypes, bool bTraceComplex, TArray<class AActor*> ActorsToIgnore, EDrawDebugTrace DrawDebugType, struct FHitResult* OutHit, bool bIgnoreSelf);
		bool STATIC_LineTraceSingleByObject_DEPRECATED(class UObject* WorldContextObject, const struct FVector& Start, const struct FVector& End, TArray<ECollisionChannel> ObjectsToTrace, bool bTraceComplex, TArray<class AActor*> ActorsToIgnore, EDrawDebugTrace DrawDebugType, struct FHitResult* OutHit, bool bIgnoreSelf);
		bool STATIC_LineTraceSingle_NEW(class UObject* WorldContextObject, const struct FVector& Start, const struct FVector& End, ECollisionChannel TraceChannel, bool bTraceComplex, TArray<class AActor*> ActorsToIgnore, EDrawDebugTrace DrawDebugType, struct FHitResult* OutHit, bool bIgnoreSelf);
		bool STATIC_LineTraceSingle_DEPRECATED(class UObject* WorldContextObject, const struct FVector& Start, const struct FVector& End, ECollisionChannel TraceChannel, bool bTraceComplex, TArray<class AActor*> ActorsToIgnore, EDrawDebugTrace DrawDebugType, struct FHitResult* OutHit, bool bIgnoreSelf);
		bool STATIC_LineTraceMultiForObjects(class UObject* WorldContextObject, const struct FVector& Start, const struct FVector& End, TArray<EObjectTypeQuery> ObjectTypes, bool bTraceComplex, TArray<class AActor*> ActorsToIgnore, EDrawDebugTrace DrawDebugType, TArray<struct FHitResult>* OutHits, bool bIgnoreSelf);
		bool STATIC_LineTraceMultiByObject_DEPRECATED(class UObject* WorldContextObject, const struct FVector& Start, const struct FVector& End, TArray<ECollisionChannel> ObjectsToTrace, bool bTraceComplex, TArray<class AActor*> ActorsToIgnore, EDrawDebugTrace DrawDebugType, TArray<struct FHitResult>* OutHits, bool bIgnoreSelf);
		bool STATIC_LineTraceMulti_NEW(class UObject* WorldContextObject, const struct FVector& Start, const struct FVector& End, ETraceTypeQuery TraceChannel, bool bTraceComplex, TArray<class AActor*> ActorsToIgnore, EDrawDebugTrace DrawDebugType, TArray<struct FHitResult>* OutHits, bool bIgnoreSelf);
		bool STATIC_LineTraceMulti_DEPRECATED(class UObject* WorldContextObject, const struct FVector& Start, const struct FVector& End, ECollisionChannel TraceChannel, bool bTraceComplex, TArray<class AActor*> ActorsToIgnore, EDrawDebugTrace DrawDebugType, TArray<struct FHitResult>* OutHits, bool bIgnoreSelf);
		void STATIC_LaunchURL(const class FString& URL);
		void STATIC_K2_UnPauseTimer(class UObject* Object, const class FString& FunctionName);
		bool STATIC_K2_TimerExists(class UObject* Object, const class FString& FunctionName);
		void STATIC_K2_SetTimerForNextTickDelegate(const class FScriptDelegate& Delegate, bool bLooping);
		void STATIC_K2_SetTimerForNextTick(class UObject* Object, const class FString& FunctionName, bool bLooping);
		void STATIC_K2_SetTimerDelegate(const class FScriptDelegate& Delegate, float Time, bool bLooping);
		void STATIC_K2_SetTimer(class UObject* Object, const class FString& FunctionName, float Time, bool bLooping);
		void STATIC_K2_PauseTimer(class UObject* Object, const class FString& FunctionName);
		bool STATIC_K2_IsTimerPaused(class UObject* Object, const class FString& FunctionName);
		bool STATIC_K2_IsTimerActive(class UObject* Object, const class FString& FunctionName);
		float STATIC_K2_GetTimerRemainingTime(class UObject* Object, const class FString& FunctionName);
		float STATIC_K2_GetTimerElapsedTime(class UObject* Object, const class FString& FunctionName);
		void STATIC_K2_ClearTimer(class UObject* Object, const class FString& FunctionName);
		bool STATIC_IsValid(class UObject* Object);
		bool STATIC_IsStandalone(class UObject* WorldContextObject);
		bool STATIC_IsServer(class UObject* WorldContextObject);
		void STATIC_IsRunningOnServer(class UObject* WorldContextObject, ENetworkModeResult* OutNetworkMode);
		bool STATIC_IsPackagedForDistribution();
		bool STATIC_IsListenServer(class UObject* WorldContextObject);
		bool STATIC_IsDedicatedServer(class UObject* WorldContextObject);
		bool STATIC_IsClient(class UObject* WorldContextObject);
		void STATIC_HideAdBanner();
		class FString STATIC_GetUniqueDeviceId();
		int32_t STATIC_GetRenderingMaterialQualityLevel();
		int32_t STATIC_GetRenderingDetailMode();
		class FString STATIC_GetPlatformUserName();
		double STATIC_GetGameTimeInSeconds(class UObject* WorldContextObject);
		class FString STATIC_GetGameName();
		class FString STATIC_GetEngineVersion();
		class FString STATIC_GetDisplayName(class UObject* Object);
		void STATIC_GetComponentBounds(class USceneComponent* Component, struct FVector* Origin, struct FVector* BoxExtent, float* SphereRadius);
		class FString STATIC_GetClassDisplayName(class UClass* Class);
		void STATIC_GetActorListFromComponentList(TArray<class UPrimitiveComponent*> ComponentList, class UClass* ActorClassFilter, TArray<class AActor*>* OutActorList);
		void STATIC_GetActorBounds(class AActor* Actor, struct FVector* Origin, struct FVector* BoxExtent);
		void STATIC_ForceCloseAdBanner();
		void STATIC_FlushPersistentDebugLines(class UObject* WorldContextObject);
		void STATIC_FlushDebugStrings(class UObject* WorldContextObject);
		void STATIC_ExecuteConsoleCommand(class UObject* WorldContextObject, const class FString& Command, class APlayerController* SpecificPlayer);
		void STATIC_DrawDebugString(class UObject* WorldContextObject, const struct FVector& TextLocation, const class FString& Text, class AActor* TestBaseActor, const struct FLinearColor& TextColor, float Duration);
		void STATIC_DrawDebugSphere(class UObject* WorldContextObject, const struct FVector& Center, float Radius, int32_t Segments, const struct FLinearColor& LineColor, float Duration, bool bPersistent);
		void STATIC_DrawDebugPoint(class UObject* WorldContextObject, const struct FVector& Position, float Size, const struct FLinearColor& PointColor, float Duration, bool bPersistent);
		void STATIC_DrawDebugPlane(class UObject* WorldContextObject, const struct FPlane& PlaneCoordinates, const struct FVector& Location, float Size, const struct FLinearColor& PlaneColor, float Duration, bool bPersistent);
		void STATIC_DrawDebugLineTraceHitResult(class UObject* WorldContextObject, const struct FHitResult& Hit, const struct FVector& TraceStart, const struct FVector& TraceEnd, const struct FLinearColor& StartColor, const struct FLinearColor& HitColor, float LineThickness, float HitSize, bool bDrawHitNormal, const struct FLinearColor& HitNormalColor, float HitNormalLength, float Duration, bool bPersistent);
		void STATIC_DrawDebugLine(class UObject* WorldContextObject, const struct FVector& LineStart, const struct FVector& LineEnd, const struct FLinearColor& LineColor, float Duration, float Thickness, bool bPersistent);
		void STATIC_DrawDebugFrustum(class UObject* WorldContextObject, const struct UObject_FTransform& FrustumTransform, const struct FLinearColor& FrustumColor, float Duration, bool bPersistent);
		void STATIC_DrawDebugFloatHistoryTransform(class UObject* WorldContextObject, const struct FDebugFloatHistory& FloatHistory, const struct UObject_FTransform& DrawTransform, const struct FVector2D& DrawSize, const struct FLinearColor& DrawColor, float Duration, bool bPersistent);
		void STATIC_DrawDebugFloatHistoryLocation(class UObject* WorldContextObject, const struct FDebugFloatHistory& FloatHistory, const struct FVector& DrawLocation, const struct FVector2D& DrawSize, const struct FLinearColor& DrawColor, float Duration, bool bPersistent);
		void STATIC_DrawDebugCylinder(class UObject* WorldContextObject, const struct FVector& Start, const struct FVector& End, float Radius, int32_t Segments, const struct FLinearColor& LineColor, float Duration, bool bPersistent);
		void STATIC_DrawDebugCoordinateSystem(class UObject* WorldContextObject, const struct FVector& AxisLoc, const struct FRotator& AxisRot, float Scale, float Thickness, float Duration, bool bPersistent);
		void STATIC_DrawDebugConeInDegrees(class UObject* WorldContextObject, const struct FVector& Origin, const struct FVector& Direction, float Length, float AngleWidth, float AngleHeight, int32_t NumSides, const struct FLinearColor& LineColor, float Duration, bool bPersistent);
		void STATIC_DrawDebugCone(class UObject* WorldContextObject, const struct FVector& Origin, const struct FVector& Direction, float Length, float AngleWidth, float AngleHeight, int32_t NumSides, const struct FLinearColor& LineColor, float LifeTime, bool bPersistent);
		void STATIC_DrawDebugCircle(class UObject* WorldContextObject, const struct FVector& Center, const struct FRotator& Rotation, float Radius, int32_t Segments, const struct FLinearColor& LineColor, float Duration, bool bPersistent);
		void STATIC_DrawDebugCapsuleWithExtents(class UObject* WorldContextObject, const struct FVector& Top, const struct FVector& Bottom, float Radius, const struct FLinearColor& LineColor, float Duration, bool bPersistent);
		void STATIC_DrawDebugCapsule(class UObject* WorldContextObject, const struct FVector& Center, float HalfHeight, float Radius, const struct FRotator& Rotation, const struct FLinearColor& LineColor, float Duration, bool bPersistent);
		void STATIC_DrawDebugCamera(class ACameraActor* CameraActor, const struct FLinearColor& CameraColor, float Duration, bool bPersistent);
		void STATIC_DrawDebugBox(class UObject* WorldContextObject, const struct FVector& Center, const struct FVector& Extent, const struct FLinearColor& LineColor, const struct FRotator& Rotation, float Duration, bool bPersistent);
		void STATIC_DrawDebugArrow(class UObject* WorldContextObject, const struct FVector& LineStart, const struct FVector& LineEnd, float ArrowSize, const struct FLinearColor& LineColor, float Duration, bool bPersistent);
		bool STATIC_DoesImplementInterface(class UObject* TestObject, class UClass* Interface);
		void STATIC_Delay(class UObject* WorldContextObject, float Duration, const struct FLatentActionInfo& LatentInfo);
		void STATIC_CreateCopyForUndoBuffer(class UObject* ObjectToModify);
		class UObject* STATIC_Conv_InterfaceToObject();
		void STATIC_ControlScreensaver(bool bAllowScreenSaver);
		bool STATIC_ComponentOverlapComponents_NEW(class UPrimitiveComponent* Component, const struct UObject_FTransform& ComponentTransform, TArray<EObjectTypeQuery> ObjectTypes, class UClass* ComponentClassFilter, TArray<class AActor*> ActorsToIgnore, TArray<class UPrimitiveComponent*>* OutComponents);
		bool STATIC_ComponentOverlapComponents_DEPRECATED(class UPrimitiveComponent* Component, const struct UObject_FTransform& ComponentTransform, EOverlapFilterOption Filter, class UClass* ComponentClassFilter, TArray<class AActor*> ActorsToIgnore, TArray<class UPrimitiveComponent*>* OutComponents);
		bool STATIC_ComponentOverlapActors_NEW(class UPrimitiveComponent* Component, const struct UObject_FTransform& ComponentTransform, TArray<EObjectTypeQuery> ObjectTypes, class UClass* ActorClassFilter, TArray<class AActor*> ActorsToIgnore, TArray<class AActor*>* OutActors);
		bool STATIC_ComponentOverlapActors_DEPRECATED(class UPrimitiveComponent* Component, const struct UObject_FTransform& ComponentTransform, EOverlapFilterOption Filter, class UClass* ActorClassFilter, TArray<class AActor*> ActorsToIgnore, TArray<class AActor*>* OutActors);
		void STATIC_CollectGarbage();
		bool STATIC_CapsuleTraceSingleForObjects(class UObject* WorldContextObject, const struct FVector& Start, const struct FVector& End, float Radius, float HalfHeight, TArray<EObjectTypeQuery> ObjectTypes, bool bTraceComplex, TArray<class AActor*> ActorsToIgnore, EDrawDebugTrace DrawDebugType, struct FHitResult* OutHit, bool bIgnoreSelf);
		bool STATIC_CapsuleTraceSingleByObject_DEPRECATED(class UObject* WorldContextObject, const struct FVector& Start, const struct FVector& End, float Radius, float HalfHeight, TArray<ECollisionChannel> ObjectsToTrace, bool bTraceComplex, TArray<class AActor*> ActorsToIgnore, EDrawDebugTrace DrawDebugType, struct FHitResult* OutHit, bool bIgnoreSelf);
		bool STATIC_CapsuleTraceSingle_NEW(class UObject* WorldContextObject, const struct FVector& Start, const struct FVector& End, float Radius, float HalfHeight, ETraceTypeQuery TraceChannel, bool bTraceComplex, TArray<class AActor*> ActorsToIgnore, EDrawDebugTrace DrawDebugType, struct FHitResult* OutHit, bool bIgnoreSelf);
		bool STATIC_CapsuleTraceSingle_DEPRECATED(class UObject* WorldContextObject, const struct FVector& Start, const struct FVector& End, float Radius, float HalfHeight, ECollisionChannel TraceChannel, bool bTraceComplex, TArray<class AActor*> ActorsToIgnore, EDrawDebugTrace DrawDebugType, struct FHitResult* OutHit, bool bIgnoreSelf);
		bool STATIC_CapsuleTraceMultiForObjects(class UObject* WorldContextObject, const struct FVector& Start, const struct FVector& End, float Radius, float HalfHeight, TArray<EObjectTypeQuery> ObjectTypes, bool bTraceComplex, TArray<class AActor*> ActorsToIgnore, EDrawDebugTrace DrawDebugType, TArray<struct FHitResult>* OutHits, bool bIgnoreSelf);
		bool STATIC_CapsuleTraceMultiByObject_DEPRECATED(class UObject* WorldContextObject, const struct FVector& Start, const struct FVector& End, float Radius, float HalfHeight, TArray<ECollisionChannel> ObjectsToTrace, bool bTraceComplex, TArray<class AActor*> ActorsToIgnore, EDrawDebugTrace DrawDebugType, TArray<struct FHitResult>* OutHits, bool bIgnoreSelf);
		bool STATIC_CapsuleTraceMulti_NEW(class UObject* WorldContextObject, const struct FVector& Start, const struct FVector& End, float Radius, float HalfHeight, ETraceTypeQuery TraceChannel, bool bTraceComplex, TArray<class AActor*> ActorsToIgnore, EDrawDebugTrace DrawDebugType, TArray<struct FHitResult>* OutHits, bool bIgnoreSelf);
		bool STATIC_CapsuleTraceMulti_DEPRECATED(class UObject* WorldContextObject, const struct FVector& Start, const struct FVector& End, float Radius, float HalfHeight, ECollisionChannel TraceChannel, bool bTraceComplex, TArray<class AActor*> ActorsToIgnore, EDrawDebugTrace DrawDebugType, TArray<struct FHitResult>* OutHits, bool bIgnoreSelf);
		bool STATIC_CapsuleOverlapComponents_NEW(class UObject* WorldContextObject, const struct FVector& CapsulePos, float Radius, float HalfHeight, TArray<EObjectTypeQuery> ObjectTypes, class UClass* ComponentClassFilter, TArray<class AActor*> ActorsToIgnore, TArray<class UPrimitiveComponent*>* OutComponents);
		bool STATIC_CapsuleOverlapComponents_DEPRECATED(class UObject* WorldContextObject, const struct FVector& CapsulePos, float Radius, float HalfHeight, EOverlapFilterOption Filter, class UClass* ComponentClassFilter, TArray<class AActor*> ActorsToIgnore, TArray<class UPrimitiveComponent*>* OutComponents);
		bool STATIC_CapsuleOverlapActors_NEW(class UObject* WorldContextObject, const struct FVector& CapsulePos, float Radius, float HalfHeight, TArray<EObjectTypeQuery> ObjectTypes, class UClass* ActorClassFilter, TArray<class AActor*> ActorsToIgnore, TArray<class AActor*>* OutActors);
		bool STATIC_CapsuleOverlapActors_DEPRECATED(class UObject* WorldContextObject, const struct FVector& CapsulePos, float Radius, float HalfHeight, EOverlapFilterOption Filter, class UClass* ActorClassFilter, TArray<class AActor*> ActorsToIgnore, TArray<class AActor*>* OutActors);
		void STATIC_CanRunCosmeticEvents(class UObject* WorldContextObject, ENetworkModeResult* OutNetworkMode);
		bool STATIC_BoxTraceSingleForObjects(class UObject* WorldContextObject, const struct FVector& Start, const struct FVector& End, const struct FVector& HalfSize, const struct FRotator& Orientation, TArray<EObjectTypeQuery> ObjectTypes, bool bTraceComplex, TArray<class AActor*> ActorsToIgnore, EDrawDebugTrace DrawDebugType, struct FHitResult* OutHit, bool bIgnoreSelf);
		bool STATIC_BoxTraceSingle(class UObject* WorldContextObject, const struct FVector& Start, const struct FVector& End, const struct FVector& HalfSize, const struct FRotator& Orientation, ETraceTypeQuery TraceChannel, bool bTraceComplex, TArray<class AActor*> ActorsToIgnore, EDrawDebugTrace DrawDebugType, struct FHitResult* OutHit, bool bIgnoreSelf);
		bool STATIC_BoxTraceMultiForObjects(class UObject* WorldContextObject, const struct FVector& Start, const struct FVector& End, const struct FVector& HalfSize, const struct FRotator& Orientation, TArray<EObjectTypeQuery> ObjectTypes, bool bTraceComplex, TArray<class AActor*> ActorsToIgnore, EDrawDebugTrace DrawDebugType, TArray<struct FHitResult>* OutHits, bool bIgnoreSelf);
		bool STATIC_BoxTraceMulti(class UObject* WorldContextObject, const struct FVector& Start, const struct FVector& End, const struct FVector& HalfSize, const struct FRotator& Orientation, ETraceTypeQuery TraceChannel, bool bTraceComplex, TArray<class AActor*> ActorsToIgnore, EDrawDebugTrace DrawDebugType, TArray<struct FHitResult>* OutHits, bool bIgnoreSelf);
		bool STATIC_BoxOverlapComponents_NEW(class UObject* WorldContextObject, const struct FVector& BoxPos, const struct FVector& Extent, TArray<EObjectTypeQuery> ObjectTypes, class UClass* ComponentClassFilter, TArray<class AActor*> ActorsToIgnore, TArray<class UPrimitiveComponent*>* OutComponents);
		bool STATIC_BoxOverlapComponents_DEPRECATED(class UObject* WorldContextObject, const struct FVector& BoxPos, const struct FVector& Extent, EOverlapFilterOption Filter, class UClass* ComponentClassFilter, TArray<class AActor*> ActorsToIgnore, TArray<class UPrimitiveComponent*>* OutComponents);
		bool STATIC_BoxOverlapActors_NEW(class UObject* WorldContextObject, const struct FVector& BoxPos, const struct FVector& BoxExtent, TArray<EObjectTypeQuery> ObjectTypes, class UClass* ActorClassFilter, TArray<class AActor*> ActorsToIgnore, TArray<class AActor*>* OutActors);
		bool STATIC_BoxOverlapActors_DEPRECATED(class UObject* WorldContextObject, const struct FVector& BoxPos, const struct FVector& BoxExtent, EOverlapFilterOption Filter, class UClass* ActorClassFilter, TArray<class AActor*> ActorsToIgnore, TArray<class AActor*>* OutActors);
		void BlueprintTimerDynamicDelegate__DelegateSignature();
		struct FDebugFloatHistory STATIC_AddFloatHistorySample(float Value, const struct FDebugFloatHistory& FloatHistory);
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.KismetTextLibrary
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class UKismetTextLibrary : public UBlueprintFunctionLibrary
	{
	public:
		class FText STATIC_TextTrimTrailing(const class FText& InText);
		class FText STATIC_TextTrimPrecedingAndTrailing(const class FText& InText);
		class FText STATIC_TextTrimPreceding(const class FText& InText);
		bool STATIC_TextIsTransient(const class FText& InText);
		bool STATIC_TextIsEmpty(const class FText& InText);
		bool STATIC_TextIsCultureInvariant(const class FText& InText);
		bool STATIC_NotEqual_TextText(const class FText& A, const class FText& B);
		bool STATIC_NotEqual_IgnoreCase_TextText(const class FText& A, const class FText& B);
		class FText STATIC_GetEmptyText();
		class FText STATIC_Format(const class FText& InPattern, TArray<struct FFormatTextArgument> InArgs);
		bool STATIC_FindTextInLocalizationTable(const class FString& Namespace, const class FString& Key, class FText* OutText);
		bool STATIC_EqualEqual_TextText(const class FText& A, const class FText& B);
		bool STATIC_EqualEqual_IgnoreCase_TextText(const class FText& A, const class FText& B);
		class FString STATIC_Conv_TextToString(const class FText& InText);
		class FText STATIC_Conv_StringToText(const class FString& InString);
		class FText STATIC_Conv_NameToText(const class FName& InName);
		class FText STATIC_Conv_IntToText(int32_t Value, bool bUseGrouping, int32_t MinimumIntegralDigits, int32_t MaximumIntegralDigits);
		class FText STATIC_Conv_FloatToText(float Value, ERoundingMode RoundingMode, bool bUseGrouping, int32_t MinimumIntegralDigits, int32_t MaximumIntegralDigits, int32_t MinimumFractionalDigits, int32_t MaximumFractionalDigits);
		class FText STATIC_Conv_ByteToText(unsigned char Value);
		class FText STATIC_Conv_BoolToText(bool InBool);
		class FText STATIC_AsTimespan_Timespan(const struct FTimespan& InTimespan);
		class FText STATIC_AsTime_DateTime(const struct FDateTime& In);
		class FText STATIC_AsPercent_Float(float Value, ERoundingMode RoundingMode, bool bUseGrouping, int32_t MinimumIntegralDigits, int32_t MaximumIntegralDigits, int32_t MinimumFractionalDigits, int32_t MaximumFractionalDigits);
		class FText STATIC_AsDateTime_DateTime(const struct FDateTime& In);
		class FText STATIC_AsDate_DateTime(const struct FDateTime& InDateTime);
		class FText STATIC_AsCurrency_Integer(int32_t Value, ERoundingMode RoundingMode, bool bUseGrouping, int32_t MinimumIntegralDigits, int32_t MaximumIntegralDigits, int32_t MinimumFractionalDigits, int32_t MaximumFractionalDigits, const class FString& CurrencyCode);
		class FText STATIC_AsCurrency_Float(float Value, ERoundingMode RoundingMode, bool bUseGrouping, int32_t MinimumIntegralDigits, int32_t MaximumIntegralDigits, int32_t MinimumFractionalDigits, int32_t MaximumFractionalDigits, const class FString& CurrencyCode);
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.AnimBlueprintGeneratedClass
	 * Size -> 0x0048 (FullSize[0x0220] - InheritedSize[0x01D8])
	 */
	class UAnimBlueprintGeneratedClass : public UBlueprintGeneratedClass
	{
	public:
		TArray<struct FBakedAnimationStateMachine>                 BakedStateMachines;                                      // 0x01D8(0x0010) ZeroConstructor
		class USkeleton*                                           TargetSkeleton;                                          // 0x01E8(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor
		TArray<struct FAnimNotifyEvent>                            AnimNotifies;                                            // 0x01F0(0x0010) ZeroConstructor
		int32_t                                                    RootAnimNodeIndex;                                       // 0x0200(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_RX82[0x1C];                                  // 0x0204(0x001C) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.BodySetup
	 * Size -> 0x0260 (FullSize[0x0288] - InheritedSize[0x0028])
	 */
	class UBodySetup : public UObject
	{
	public:
		struct FKAggregateGeom                                     AggGeom;                                                 // 0x0028(0x0048)
		class FName                                                BoneName;                                                // 0x0070(0x0008) Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor
		EPhysicsType                                               PhysicsType;                                             // 0x0078(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_9D5B[0x3];                                   // 0x0079(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		unsigned char                                              bAlwaysFullAnimWeight : 1;                               // 0x007C(0x0001) BIT_FIELD Deprecated, NoDestructor
		unsigned char                                              bConsiderForBounds : 1;                                  // 0x007C(0x0001) BIT_FIELD Edit, NoDestructor
		unsigned char                                              bMeshCollideAll : 1;                                     // 0x007C(0x0001) BIT_FIELD Transient, NoDestructor
		unsigned char                                              bIsPlayerRagdoll : 1;                                    // 0x007C(0x0001) BIT_FIELD Transient, NoDestructor
		unsigned char                                              bDoubleSidedGeometry : 1;                                // 0x007C(0x0001) BIT_FIELD Edit, NoDestructor
		unsigned char                                              bGenerateNonMirroredCollision : 1;                       // 0x007C(0x0001) BIT_FIELD NoDestructor
		unsigned char                                              bGenerateMirroredCollision : 1;                          // 0x007C(0x0001) BIT_FIELD NoDestructor
		unsigned char                                              UnknownData_4EFE[0x3];                                   // 0x007D(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UPhysicalMaterial*                                   PhysMaterial;                                            // 0x0080(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		EBodyCollisionResponse                                     CollisionReponse;                                        // 0x0088(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		ECollisionTraceFlag                                        CollisionTraceFlag;                                      // 0x0089(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_6OOB[0x6];                                   // 0x008A(0x0006) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FBodyInstance                                       DefaultInstance;                                         // 0x0090(0x0160) Edit
		struct FWalkableSlopeOverride                              WalkableSlopeOverride;                                   // 0x01F0(0x0008) Edit, AdvancedDisplay
		unsigned char                                              bReallyUseTriangleMeshCollisions : 1;                    // 0x01F8(0x0001) BIT_FIELD Edit, NoDestructor
		unsigned char                                              bUseLastLODInsteadOfFirstForCollisionMesh : 1;           // 0x01F8(0x0001) BIT_FIELD Edit, NoDestructor
		unsigned char                                              bUseSecondToLastLODInsteadOfFirstForCollisionMesh : 1;   // 0x01F8(0x0001) BIT_FIELD Edit, NoDestructor
		unsigned char                                              bUsesSkelCustomIgnore : 1;                               // 0x01F8(0x0001) BIT_FIELD Edit, NoDestructor
		unsigned char                                              UnknownData_0ZT5[0x3];                                   // 0x01F9(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      BuildScale;                                              // 0x01FC(0x0004) ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor
		struct FVector                                             BuildScale3D;                                            // 0x0200(0x000C) ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_O965[0x7C];                                  // 0x020C(0x007C) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.BodySetup2D
	 * Size -> 0x0030 (FullSize[0x02B8] - InheritedSize[0x0288])
	 */
	class UBodySetup2D : public UBodySetup
	{
	public:
		struct FAggregateGeometry2D                                AggGeom2D;                                               // 0x0288(0x0030)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.BoneMaskFilter
	 * Size -> 0x0010 (FullSize[0x0038] - InheritedSize[0x0028])
	 */
	class UBoneMaskFilter : public UObject
	{
	public:
		TArray<struct FInputBlendPose>                             BlendPoses;                                              // 0x0028(0x0010) Edit, ZeroConstructor

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.BookMark
	 * Size -> 0x0028 (FullSize[0x0050] - InheritedSize[0x0028])
	 */
	class UBookMark : public UObject
	{
	public:
		struct FVector                                             Location;                                                // 0x0028(0x000C) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		struct FRotator                                            Rotation;                                                // 0x0034(0x000C) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		TArray<class FString>                                      HiddenLevels;                                            // 0x0040(0x0010) Edit, ZeroConstructor

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.BookMark2D
	 * Size -> 0x0010 (FullSize[0x0038] - InheritedSize[0x0028])
	 */
	class UBookMark2D : public UObject
	{
	public:
		float                                                      Zoom2D;                                                  // 0x0028(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		struct FIntPoint                                           Location;                                                // 0x002C(0x0008) Edit, ZeroConstructor
		unsigned char                                              UnknownData_R28J[0x4];                                   // 0x0034(0x0004) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.Breakpoint
	 * Size -> 0x0018 (FullSize[0x0040] - InheritedSize[0x0028])
	 */
	class UBreakpoint : public UObject
	{
	public:
		unsigned char                                              bEnabled : 1;                                            // 0x0028(0x0001) BIT_FIELD Transient, NoDestructor
		unsigned char                                              UnknownData_7PGC[0x7];                                   // 0x0029(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UEdGraphNode*                                        Node;                                                    // 0x0030(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              bStepOnce : 1;                                           // 0x0038(0x0001) BIT_FIELD NoDestructor
		unsigned char                                              bStepOnce_WasPreviouslyDisabled : 1;                     // 0x0038(0x0001) BIT_FIELD NoDestructor
		unsigned char                                              bStepOnce_RemoveAfterHit : 1;                            // 0x0038(0x0001) BIT_FIELD NoDestructor
		unsigned char                                              UnknownData_9QQJ[0x7];                                   // 0x0039(0x0007) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.BrushBuilder
	 * Size -> 0x0058 (FullSize[0x0080] - InheritedSize[0x0028])
	 */
	class UBrushBuilder : public UObject
	{
	public:
		class FString                                              BitmapFilename;                                          // 0x0028(0x0010) ZeroConstructor
		class FString                                              ToolTip;                                                 // 0x0038(0x0010) ZeroConstructor
		unsigned char                                              NotifyBadParams : 1;                                     // 0x0048(0x0001) BIT_FIELD Transient, NoDestructor
		unsigned char                                              UnknownData_ZI7O[0x7];                                   // 0x0049(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<struct FVector>                                     Vertices;                                                // 0x0050(0x0010) ZeroConstructor, Protected
		TArray<struct FBuilderPoly>                                Polys;                                                   // 0x0060(0x0010) ZeroConstructor, Protected
		class FName                                                Layer;                                                   // 0x0070(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, Protected
		unsigned char                                              MergeCoplanars : 1;                                      // 0x0078(0x0001) BIT_FIELD NoDestructor, Protected
		unsigned char                                              UnknownData_41AN[0x7];                                   // 0x0079(0x0007) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.ButtonStyleAsset
	 * Size -> 0x0248 (FullSize[0x0270] - InheritedSize[0x0028])
	 */
	class UButtonStyleAsset : public UObject
	{
	public:
		struct FButtonStyle                                        ButtonStyle;                                             // 0x0028(0x0248) Edit

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.CameraAnim
	 * Size -> 0x0390 (FullSize[0x03B8] - InheritedSize[0x0028])
	 */
	class UCameraAnim : public UObject
	{
	public:
		class UInterpGroup*                                        CameraInterpGroup;                                       // 0x0028(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      AnimLength;                                              // 0x0030(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor
		struct FBox                                                BoundingBox;                                             // 0x0034(0x001C) ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      BaseFOV;                                                 // 0x0050(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_N7JJ[0x4];                                   // 0x0054(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FPostProcessSettings                                BasePostProcessSettings;                                 // 0x0058(0x0358)
		float                                                      BasePostProcessBlendWeight;                              // 0x03B0(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_BOZQ[0x4];                                   // 0x03B4(0x0004) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.CameraAnimInst
	 * Size -> 0x00E8 (FullSize[0x0110] - InheritedSize[0x0028])
	 */
	class UCameraAnimInst : public UObject
	{
	public:
		class UCameraAnim*                                         CamAnim;                                                 // 0x0028(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor
		class UInterpGroupInst*                                    InterpGroupInst;                                         // 0x0030(0x0008) ExportObject, ZeroConstructor, InstancedReference, SubobjectReference, IsPlainOldData, NoDestructor, Protected
		unsigned char                                              UnknownData_14ZG[0x1C];                                  // 0x0038(0x001C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      PlayRate;                                                // 0x0054(0x0004) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_OWDU[0x10];                                  // 0x0058(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UInterpTrackMove*                                    MoveTrack;                                               // 0x0068(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		class UInterpTrackInstMove*                                MoveInst;                                                // 0x0070(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		ECameraAnimPlaySpace                                       PlaySpace;                                               // 0x0078(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_1FI8[0x97];                                  // 0x0079(0x0097) MISSED OFFSET (PADDING)

	public:
		void Stop(bool bImmediate);
		void SetDuration(float NewDuration);
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.CameraModifier_CameraShake
	 * Size -> 0x0018 (FullSize[0x0070] - InheritedSize[0x0058])
	 */
	class UCameraModifier_CameraShake : public UCameraModifier
	{
	public:
		TArray<struct FCameraShakeInstance>                        ActiveShakes;                                            // 0x0058(0x0010) ZeroConstructor
		float                                                      SplitScreenShakeScale;                                   // 0x0068(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected
		unsigned char                                              UnknownData_6KB2[0x4];                                   // 0x006C(0x0004) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.CameraShake
	 * Size -> 0x0088 (FullSize[0x00B0] - InheritedSize[0x0028])
	 */
	class UCameraShake : public UObject
	{
	public:
		unsigned char                                              bSingleInstance : 1;                                     // 0x0028(0x0001) BIT_FIELD Edit, NoDestructor
		unsigned char                                              UnknownData_9MLC[0x3];                                   // 0x0029(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      OscillationDuration;                                     // 0x002C(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      OscillationBlendInTime;                                  // 0x0030(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      OscillationBlendOutTime;                                 // 0x0034(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		struct FROscillator                                        RotOscillation;                                          // 0x0038(0x0024) Edit
		struct FVOscillator                                        LocOscillation;                                          // 0x005C(0x0024) Edit
		struct FFOscillator                                        FOVOscillation;                                          // 0x0080(0x000C) Edit
		unsigned char                                              UnknownData_I9ZY[0x4];                                   // 0x008C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UCameraAnim*                                         Anim;                                                    // 0x0090(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      AnimPlayRate;                                            // 0x0098(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      AnimScale;                                               // 0x009C(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      AnimBlendInTime;                                         // 0x00A0(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      AnimBlendOutTime;                                        // 0x00A4(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              bIgnoreWhenBasedOnDino : 1;                              // 0x00A8(0x0001) BIT_FIELD Edit, NoDestructor
		unsigned char                                              bRandomAnimSegment : 1;                                  // 0x00A8(0x0001) BIT_FIELD Edit, NoDestructor
		unsigned char                                              bIgnoreWorldShakeScaling : 1;                            // 0x00A8(0x0001) BIT_FIELD Edit, NoDestructor
		unsigned char                                              bForceUseCameraShakeScale : 1;                           // 0x00A8(0x0001) BIT_FIELD Edit, NoDestructor
		unsigned char                                              UnknownData_N37I[0x3];                                   // 0x00A9(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      RandomAnimSegmentDuration;                               // 0x00AC(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.Canvas
	 * Size -> 0x00D8 (FullSize[0x0100] - InheritedSize[0x0028])
	 */
	class UCanvas : public UObject
	{
	public:
		float                                                      OrgX;                                                    // 0x0028(0x0004) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      OrgY;                                                    // 0x002C(0x0004) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      ClipX;                                                   // 0x0030(0x0004) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      ClipY;                                                   // 0x0034(0x0004) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor
		struct FColor                                              DrawColor;                                               // 0x0038(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              bCenterX : 1;                                            // 0x003C(0x0001) BIT_FIELD NoDestructor
		unsigned char                                              bCenterY : 1;                                            // 0x003C(0x0001) BIT_FIELD NoDestructor
		unsigned char                                              bNoSmooth : 1;                                           // 0x003C(0x0001) BIT_FIELD NoDestructor
		unsigned char                                              UnknownData_C565[0x3];                                   // 0x003D(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int32_t                                                    SizeX;                                                   // 0x0040(0x0004) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor
		int32_t                                                    SizeY;                                                   // 0x0044(0x0004) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_VXVI[0x8];                                   // 0x0048(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FPlane                                              ColorModulate;                                           // 0x0050(0x0010) ZeroConstructor, IsPlainOldData, NoDestructor
		class UTexture2D*                                          DefaultTexture;                                          // 0x0060(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor
		class UTexture2D*                                          GradientTexture0;                                        // 0x0068(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor
		class UReporterGraph*                                      ReporterGraph;                                           // 0x0070(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_OG4A[0x88];                                  // 0x0078(0x0088) MISSED OFFSET (PADDING)

	public:
		void SetDrawColor(const struct FColor& C);
		struct FVector2D K2_TextSize(class UFont* RenderFont, const class FString& RenderText, const struct FVector2D& Scale);
		struct FVector2D K2_StrLen(class UFont* RenderFont, const class FString& RenderText);
		struct FVector K2_Project(const struct FVector& WorldLocation);
		void K2_DrawTriangle(class UTexture* RenderTexture, TArray<struct FCanvasUVTri> Triangles);
		void K2_DrawTexture(class UTexture* RenderTexture, const struct FVector2D& ScreenPosition, const struct FVector2D& ScreenSize, const struct FVector2D& CoordinatePosition, const struct FVector2D& CoordinateSize, const struct FLinearColor& RenderColor, EBlendMode BlendMode, float Rotation, const struct FVector2D& PivotPoint);
		void K2_DrawText(class UFont* RenderFont, const class FString& RenderText, const struct FVector2D& ScreenPosition, const struct FLinearColor& RenderColor, float Kerning, const struct FLinearColor& ShadowColor, const struct FVector2D& ShadowOffset, bool bCentreX, bool bCentreY, bool bOutlined, const struct FLinearColor& OutlineColor);
		void K2_DrawPolygon(class UTexture* RenderTexture, const struct FVector2D& ScreenPosition, const struct FVector2D& Radius, int32_t NumberOfSides, const struct FLinearColor& RenderColor);
		void K2_DrawMaterial(class UMaterialInterface* RenderMaterial, const struct FVector2D& ScreenPosition, const struct FVector2D& ScreenSize, const struct FVector2D& CoordinatePosition, const struct FVector2D& CoordinateSize, float Rotation, const struct FVector2D& PivotPoint);
		void K2_DrawLine(const struct FVector2D& ScreenPositionA, const struct FVector2D& ScreenPositionB, float Thickness, const struct FLinearColor& RenderColor);
		void K2_DrawBoxEx(const struct FVector2D& ScreenPosition, const struct FVector2D& ScreenSize, float Thickness, const struct FLinearColor& RenderColor, EBlendMode BlendMode);
		void K2_DrawBox(const struct FVector2D& ScreenPosition, const struct FVector2D& ScreenSize, float Thickness);
		void K2_DrawBorder(class UTexture* BorderTexture, class UTexture* BackgroundTexture, class UTexture* LeftBorderTexture, class UTexture* RightBorderTexture, class UTexture* TopBorderTexture, class UTexture* BottomBorderTexture, const struct FVector2D& ScreenPosition, const struct FVector2D& ScreenSize, const struct FVector2D& CoordinatePosition, const struct FVector2D& CoordinateSize, const struct FLinearColor& RenderColor, const struct FVector2D& BorderScale, const struct FVector2D& BackgroundScale, float Rotation, const struct FVector2D& PivotPoint, const struct FVector2D& CornerSize);
		void K2_Deproject(const struct FVector2D& ScreenPosition, struct FVector* WorldOrigin, struct FVector* WorldDirection);
		bool IsPositionInFrontOfViewport(const struct FVector& Location);
		float BPDrawTextWrapped(class UFont* InFont, const class FString& InText, float X, float Y, float XWidth, float YWidth, float XScale, float YScale, bool bDoCenterX, bool bDoCenterY, const struct FVector2D& SpacingAdjust);
		float BPDrawTextCentered(class UFont* InFont, const class FString& InText, float X, float Y, float XScale, float YScale, bool bDoCenterX, bool bDoCenterY);
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.Channel
	 * Size -> 0x0058 (FullSize[0x0080] - InheritedSize[0x0028])
	 */
	class UChannel : public UObject
	{
	public:
		class UNetConnection*                                      Connection;                                              // 0x0028(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_GFF4[0x50];                                  // 0x0030(0x0050) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.ActorChannel
	 * Size -> 0x01D0 (FullSize[0x0250] - InheritedSize[0x0080])
	 */
	class UActorChannel : public UChannel
	{
	public:
		class AActor*                                              Actor;                                                   // 0x0080(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor
		class UClass*                                              ActorClass;                                              // 0x0088(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_60EP[0x1C0];                                 // 0x0090(0x01C0) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.BattlEyeChannel
	 * Size -> 0x0018 (FullSize[0x0098] - InheritedSize[0x0080])
	 */
	class UBattlEyeChannel : public UChannel
	{
	public:
		unsigned char                                              UnknownData_ZHLO[0x18];                                  // 0x0080(0x0018) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.ClassInfoChannel
	 * Size -> 0x0080 (FullSize[0x0100] - InheritedSize[0x0080])
	 */
	class UClassInfoChannel : public UChannel
	{
	public:
		unsigned char                                              UnknownData_9XRB[0x80];                                  // 0x0080(0x0080) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.ControlChannel
	 * Size -> 0x0018 (FullSize[0x0098] - InheritedSize[0x0080])
	 */
	class UControlChannel : public UChannel
	{
	public:
		unsigned char                                              UnknownData_LRYN[0x18];                                  // 0x0080(0x0018) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.VoiceChannel
	 * Size -> 0x0010 (FullSize[0x0090] - InheritedSize[0x0080])
	 */
	class UVoiceChannel : public UChannel
	{
	public:
		unsigned char                                              UnknownData_HR17[0x10];                                  // 0x0080(0x0010) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.CheckBoxStyleAsset
	 * Size -> 0x0508 (FullSize[0x0530] - InheritedSize[0x0028])
	 */
	class UCheckBoxStyleAsset : public UObject
	{
	public:
		struct FCheckBoxStyle                                      CheckBoxStyle;                                           // 0x0028(0x0508) Edit

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.ClipPadEntry
	 * Size -> 0x0020 (FullSize[0x0048] - InheritedSize[0x0028])
	 */
	class UClipPadEntry : public UObject
	{
	public:
		class FString                                              Title;                                                   // 0x0028(0x0010) Edit, ZeroConstructor
		class FString                                              Text;                                                    // 0x0038(0x0010) Edit, ZeroConstructor

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.CollisionProfile
	 * Size -> 0x0120 (FullSize[0x0148] - InheritedSize[0x0028])
	 */
	class UCollisionProfile : public UObject
	{
	public:
		TArray<struct FCollisionResponseTemplate>                  Profiles;                                                // 0x0028(0x0010) ZeroConstructor, Config, GlobalConfig
		TArray<struct FCustomChannelSetup>                         DefaultChannelResponses;                                 // 0x0038(0x0010) ZeroConstructor, Config, GlobalConfig
		TArray<struct FCustomProfile>                              EditProfiles;                                            // 0x0048(0x0010) ZeroConstructor, Config, GlobalConfig
		TArray<struct FRedirector>                                 ProfileRedirects;                                        // 0x0058(0x0010) ZeroConstructor, Config, GlobalConfig
		TArray<struct FRedirector>                                 CollisionChannelRedirects;                               // 0x0068(0x0010) ZeroConstructor, Config, GlobalConfig
		unsigned char                                              UnknownData_ENAL[0xD0];                                  // 0x0078(0x00D0) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.Commandlet
	 * Size -> 0x0058 (FullSize[0x0080] - InheritedSize[0x0028])
	 */
	class UCommandlet : public UObject
	{
	public:
		class FString                                              HelpDescription;                                         // 0x0028(0x0010) BlueprintReadOnly, ZeroConstructor
		class FString                                              HelpUsage;                                               // 0x0038(0x0010) BlueprintReadOnly, ZeroConstructor
		class FString                                              HelpWebLink;                                             // 0x0048(0x0010) BlueprintReadOnly, ZeroConstructor
		TArray<class FString>                                      HelpParamNames;                                          // 0x0058(0x0010) BlueprintReadOnly, ZeroConstructor
		TArray<class FString>                                      HelpParamDescriptions;                                   // 0x0068(0x0010) BlueprintReadOnly, ZeroConstructor
		unsigned char                                              IsServer : 1;                                            // 0x0078(0x0001) BIT_FIELD NoDestructor
		unsigned char                                              IsClient : 1;                                            // 0x0078(0x0001) BIT_FIELD NoDestructor
		unsigned char                                              IsEditor : 1;                                            // 0x0078(0x0001) BIT_FIELD NoDestructor
		unsigned char                                              LogToConsole : 1;                                        // 0x0078(0x0001) BIT_FIELD NoDestructor
		unsigned char                                              ShowErrorCount : 1;                                      // 0x0078(0x0001) BIT_FIELD NoDestructor
		unsigned char                                              UnknownData_3T32[0x7];                                   // 0x0079(0x0007) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.SmokeTestCommandlet
	 * Size -> 0x0000 (FullSize[0x0080] - InheritedSize[0x0080])
	 */
	class USmokeTestCommandlet : public UCommandlet
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.Console
	 * Size -> 0x00C8 (FullSize[0x00F0] - InheritedSize[0x0028])
	 */
	class UConsole : public UObject
	{
	public:
		unsigned char                                              UnknownData_5NFZ[0x10];                                  // 0x0028(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class ULocalPlayer*                                        ConsoleTargetPlayer;                                     // 0x0038(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor
		class UTexture2D*                                          DefaultTexture_Black;                                    // 0x0040(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor
		class UTexture2D*                                          DefaultTexture_White;                                    // 0x0048(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_SNGE[0x18];                                  // 0x0050(0x0018) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class FString>                                      HistoryBuffer;                                           // 0x0068(0x0010) ZeroConstructor, Config
		unsigned char                                              UnknownData_Q2DX[0x78];                                  // 0x0078(0x0078) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.CurveLinearColor
	 * Size -> 0x01A0 (FullSize[0x01E0] - InheritedSize[0x0040])
	 */
	class UCurveLinearColor : public UCurveBase
	{
	public:
		struct FRichCurve                                          FloatCurves[0x4];                                        // 0x0040(0x01A0)

	public:
		struct FLinearColor GetLinearColorValue(float InTime);
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.CurveVector
	 * Size -> 0x0148 (FullSize[0x0188] - InheritedSize[0x0040])
	 */
	class UCurveVector : public UCurveBase
	{
	public:
		struct FInterpCurveVector                                  VectorKeys;                                              // 0x0040(0x0010) ZeroConstructor, Deprecated
		struct FRichCurve                                          FloatCurves[0x3];                                        // 0x0050(0x0138)

	public:
		struct FVector GetVectorValue(float InTime);
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.CurveEdPresetCurve
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class UCurveEdPresetCurve : public UObject
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.CurveTable
	 * Size -> 0x0060 (FullSize[0x0088] - InheritedSize[0x0028])
	 */
	class UCurveTable : public UObject
	{
	public:
		class FString                                              ImportPath;                                              // 0x0028(0x0010) ZeroConstructor
		unsigned char                                              UnknownData_3MQL[0x50];                                  // 0x0038(0x0050) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.TireType
	 * Size -> 0x0008 (FullSize[0x0030] - InheritedSize[0x0028])
	 */
	class UTireType : public UDataAsset
	{
	public:
		float                                                      FrictionScale;                                           // 0x0028(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_IDHC[0x4];                                   // 0x002C(0x0004) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.DestructibleFractureSettings
	 * Size -> 0x0090 (FullSize[0x00B8] - InheritedSize[0x0028])
	 */
	class UDestructibleFractureSettings : public UObject
	{
	public:
		int32_t                                                    CellSiteCount;                                           // 0x0028(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		struct FFractureMaterial                                   FractureMaterialDesc;                                    // 0x002C(0x0024) Edit, Transient
		int32_t                                                    RandomSeed;                                              // 0x0050(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_VUYN[0x4];                                   // 0x0054(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<struct FVector>                                     VoronoiSites;                                            // 0x0058(0x0010) ZeroConstructor
		int32_t                                                    OriginalSubmeshCount;                                    // 0x0068(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_A9QQ[0x4];                                   // 0x006C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class UMaterialInterface*>                          Materials;                                               // 0x0070(0x0010) ZeroConstructor
		TArray<struct FDestructibleChunkParameters>                ChunkParameters;                                         // 0x0080(0x0010) ZeroConstructor
		unsigned char                                              UnknownData_UHLO[0x28];                                  // 0x0090(0x0028) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.DeviceProfile
	 * Size -> 0x0048 (FullSize[0x0070] - InheritedSize[0x0028])
	 */
	class UDeviceProfile : public UObject
	{
	public:
		class FString                                              DeviceType;                                              // 0x0028(0x0010) Edit, ZeroConstructor, Config, EditConst
		class FString                                              BaseProfileName;                                         // 0x0038(0x0010) Edit, ZeroConstructor, Config
		class UObject*                                             Parent;                                                  // 0x0048(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_1J4Y[0x8];                                   // 0x0050(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class FString>                                      CVars;                                                   // 0x0058(0x0010) Edit, ZeroConstructor, Config
		unsigned char                                              UnknownData_567T[0x8];                                   // 0x0068(0x0008) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.DeviceProfileManager
	 * Size -> 0x0040 (FullSize[0x0068] - InheritedSize[0x0028])
	 */
	class UDeviceProfileManager : public UObject
	{
	public:
		TArray<class UObject*>                                     Profiles;                                                // 0x0028(0x0010) Edit, ZeroConstructor
		unsigned char                                              UnknownData_KRWX[0x30];                                  // 0x0038(0x0030) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.DialogueVoice
	 * Size -> 0x0018 (FullSize[0x0040] - InheritedSize[0x0028])
	 */
	class UDialogueVoice : public UObject
	{
	public:
		EGrammaticalGender                                         Gender;                                                  // 0x0028(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable
		EGrammaticalNumber                                         Plurality;                                               // 0x0029(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable
		unsigned char                                              UnknownData_G4XS[0x2];                                   // 0x002A(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FGuid                                               LocalizationGUID;                                        // 0x002C(0x0010) ZeroConstructor
		unsigned char                                              UnknownData_KQOQ[0x4];                                   // 0x003C(0x0004) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.DialogueWave
	 * Size -> 0x0038 (FullSize[0x0060] - InheritedSize[0x0028])
	 */
	class UDialogueWave : public UObject
	{
	public:
		unsigned char                                              bMature : 1;                                             // 0x0028(0x0001) BIT_FIELD Edit, NoDestructor, AssetRegistrySearchable
		unsigned char                                              UnknownData_ZHGT[0x7];                                   // 0x0029(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FString                                              SpokenText;                                              // 0x0030(0x0010) Edit, ZeroConstructor
		TArray<struct FDialogueContextMapping>                     ContextMappings;                                         // 0x0040(0x0010) Edit, ZeroConstructor
		struct FGuid                                               LocalizationGUID;                                        // 0x0050(0x0010) ZeroConstructor

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.Distribution
	 * Size -> 0x0008 (FullSize[0x0030] - InheritedSize[0x0028])
	 */
	class UDistribution : public UObject
	{
	public:
		unsigned char                                              UnknownData_PZH9[0x8];                                   // 0x0028(0x0008) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.DistributionFloat
	 * Size -> 0x0008 (FullSize[0x0038] - InheritedSize[0x0030])
	 */
	class UDistributionFloat : public UDistribution
	{
	public:
		unsigned char                                              bCanBeBaked : 1;                                         // 0x0030(0x0001) BIT_FIELD Edit, NoDestructor
		unsigned char                                              UnknownData_24QS[0x7];                                   // 0x0031(0x0007) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.DistributionFloatConstant
	 * Size -> 0x0008 (FullSize[0x0040] - InheritedSize[0x0038])
	 */
	class UDistributionFloatConstant : public UDistributionFloat
	{
	public:
		float                                                      Constant;                                                // 0x0038(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_WHA4[0x4];                                   // 0x003C(0x0004) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.DistributionFloatParameterBase
	 * Size -> 0x0020 (FullSize[0x0060] - InheritedSize[0x0040])
	 */
	class UDistributionFloatParameterBase : public UDistributionFloatConstant
	{
	public:
		class FName                                                ParameterName;                                           // 0x0040(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      MinInput;                                                // 0x0048(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      MaxInput;                                                // 0x004C(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      MinOutput;                                               // 0x0050(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      MaxOutput;                                               // 0x0054(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		EDistributionParamMode                                     ParamMode;                                               // 0x0058(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_9AAJ[0x7];                                   // 0x0059(0x0007) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.DistributionFloatParticleParameter
	 * Size -> 0x0000 (FullSize[0x0060] - InheritedSize[0x0060])
	 */
	class UDistributionFloatParticleParameter : public UDistributionFloatParameterBase
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.DistributionFloatSoundParameter
	 * Size -> 0x0000 (FullSize[0x0060] - InheritedSize[0x0060])
	 */
	class UDistributionFloatSoundParameter : public UDistributionFloatParameterBase
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.DistributionFloatConstantCurve
	 * Size -> 0x0010 (FullSize[0x0048] - InheritedSize[0x0038])
	 */
	class UDistributionFloatConstantCurve : public UDistributionFloat
	{
	public:
		struct FInterpCurveFloat                                   ConstantCurve;                                           // 0x0038(0x0010) Edit, ZeroConstructor

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.DistributionFloatUniform
	 * Size -> 0x0008 (FullSize[0x0040] - InheritedSize[0x0038])
	 */
	class UDistributionFloatUniform : public UDistributionFloat
	{
	public:
		float                                                      Min;                                                     // 0x0038(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      Max;                                                     // 0x003C(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.DistributionFloatUniformCurve
	 * Size -> 0x0010 (FullSize[0x0048] - InheritedSize[0x0038])
	 */
	class UDistributionFloatUniformCurve : public UDistributionFloat
	{
	public:
		struct FInterpCurveVector2D                                ConstantCurve;                                           // 0x0038(0x0010) Edit, ZeroConstructor

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.DistributionVector
	 * Size -> 0x0008 (FullSize[0x0038] - InheritedSize[0x0030])
	 */
	class UDistributionVector : public UDistribution
	{
	public:
		unsigned char                                              bCanBeBaked : 1;                                         // 0x0030(0x0001) BIT_FIELD Edit, NoDestructor
		unsigned char                                              bIsDirty : 1;                                            // 0x0030(0x0001) BIT_FIELD NoDestructor
		unsigned char                                              UnknownData_16JN[0x7];                                   // 0x0031(0x0007) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.DistributionVectorConstant
	 * Size -> 0x0018 (FullSize[0x0050] - InheritedSize[0x0038])
	 */
	class UDistributionVectorConstant : public UDistributionVector
	{
	public:
		struct FVector                                             Constant;                                                // 0x0038(0x000C) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              bLockAxes : 1;                                           // 0x0044(0x0001) BIT_FIELD NoDestructor
		unsigned char                                              UnknownData_CEY6[0x3];                                   // 0x0045(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		EDistributionVectorLockFlags                               LockedAxes;                                              // 0x0048(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_XWAX[0x7];                                   // 0x0049(0x0007) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.DistributionVectorParameterBase
	 * Size -> 0x0040 (FullSize[0x0090] - InheritedSize[0x0050])
	 */
	class UDistributionVectorParameterBase : public UDistributionVectorConstant
	{
	public:
		class FName                                                ParameterName;                                           // 0x0050(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		struct FVector                                             MinInput;                                                // 0x0058(0x000C) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		struct FVector                                             MaxInput;                                                // 0x0064(0x000C) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		struct FVector                                             MinOutput;                                               // 0x0070(0x000C) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		struct FVector                                             MaxOutput;                                               // 0x007C(0x000C) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		EDistributionParamMode                                     ParamModes[0x3];                                         // 0x0088(0x0003) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_50XO[0x5];                                   // 0x008B(0x0005) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.DistributionVectorParticleParameter
	 * Size -> 0x0000 (FullSize[0x0090] - InheritedSize[0x0090])
	 */
	class UDistributionVectorParticleParameter : public UDistributionVectorParameterBase
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.DistributionVectorConstantCurve
	 * Size -> 0x0018 (FullSize[0x0050] - InheritedSize[0x0038])
	 */
	class UDistributionVectorConstantCurve : public UDistributionVector
	{
	public:
		struct FInterpCurveVector                                  ConstantCurve;                                           // 0x0038(0x0010) Edit, ZeroConstructor
		unsigned char                                              bLockAxes : 1;                                           // 0x0048(0x0001) BIT_FIELD NoDestructor
		unsigned char                                              UnknownData_HHDA[0x3];                                   // 0x0049(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		EDistributionVectorLockFlags                               LockedAxes;                                              // 0x004C(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_VJZT[0x3];                                   // 0x004D(0x0003) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.DistributionVectorUniform
	 * Size -> 0x0028 (FullSize[0x0060] - InheritedSize[0x0038])
	 */
	class UDistributionVectorUniform : public UDistributionVector
	{
	public:
		struct FVector                                             Max;                                                     // 0x0038(0x000C) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		struct FVector                                             Min;                                                     // 0x0044(0x000C) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              bLockAxes : 1;                                           // 0x0050(0x0001) BIT_FIELD NoDestructor
		unsigned char                                              UnknownData_L162[0x3];                                   // 0x0051(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		EDistributionVectorLockFlags                               LockedAxes;                                              // 0x0054(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		EDistributionVectorMirrorFlags                             MirrorFlags[0x3];                                        // 0x0055(0x0003) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              bUseExtremes : 1;                                        // 0x0058(0x0001) BIT_FIELD Edit, NoDestructor
		unsigned char                                              UnknownData_RTGZ[0x7];                                   // 0x0059(0x0007) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.DistributionVectorUniformCurve
	 * Size -> 0x0020 (FullSize[0x0058] - InheritedSize[0x0038])
	 */
	class UDistributionVectorUniformCurve : public UDistributionVector
	{
	public:
		struct FInterpCurveTwoVectors                              ConstantCurve;                                           // 0x0038(0x0010) Edit, ZeroConstructor
		unsigned char                                              bLockAxes1 : 1;                                          // 0x0048(0x0001) BIT_FIELD NoDestructor
		unsigned char                                              bLockAxes2 : 1;                                          // 0x0048(0x0001) BIT_FIELD NoDestructor
		unsigned char                                              UnknownData_X2YZ[0x3];                                   // 0x0049(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		EDistributionVectorLockFlags                               LockedAxes[0x2];                                         // 0x004C(0x0002) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		EDistributionVectorMirrorFlags                             MirrorFlags[0x3];                                        // 0x004E(0x0003) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_RYVI[0x3];                                   // 0x0051(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		unsigned char                                              bUseExtremes : 1;                                        // 0x0054(0x0001) BIT_FIELD Edit, NoDestructor
		unsigned char                                              UnknownData_YAM9[0x3];                                   // 0x0055(0x0003) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.DynamicBlueprintBinding
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class UDynamicBlueprintBinding : public UObject
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.ComponentDelegateBinding
	 * Size -> 0x0010 (FullSize[0x0038] - InheritedSize[0x0028])
	 */
	class UComponentDelegateBinding : public UDynamicBlueprintBinding
	{
	public:
		TArray<struct FBlueprintComponentDelegateBinding>          ComponentDelegateBindings;                               // 0x0028(0x0010) ZeroConstructor

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.InputDelegateBinding
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class UInputDelegateBinding : public UDynamicBlueprintBinding
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.InputActionDelegateBinding
	 * Size -> 0x0010 (FullSize[0x0038] - InheritedSize[0x0028])
	 */
	class UInputActionDelegateBinding : public UInputDelegateBinding
	{
	public:
		TArray<struct FBlueprintInputActionDelegateBinding>        InputActionDelegateBindings;                             // 0x0028(0x0010) ZeroConstructor

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.InputAxisDelegateBinding
	 * Size -> 0x0010 (FullSize[0x0038] - InheritedSize[0x0028])
	 */
	class UInputAxisDelegateBinding : public UInputDelegateBinding
	{
	public:
		TArray<struct FBlueprintInputAxisDelegateBinding>          InputAxisDelegateBindings;                               // 0x0028(0x0010) ZeroConstructor

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.InputAxisKeyDelegateBinding
	 * Size -> 0x0010 (FullSize[0x0038] - InheritedSize[0x0028])
	 */
	class UInputAxisKeyDelegateBinding : public UInputDelegateBinding
	{
	public:
		TArray<struct FBlueprintInputAxisKeyDelegateBinding>       InputAxisKeyDelegateBindings;                            // 0x0028(0x0010) ZeroConstructor

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.InputVectorAxisDelegateBinding
	 * Size -> 0x0000 (FullSize[0x0038] - InheritedSize[0x0038])
	 */
	class UInputVectorAxisDelegateBinding : public UInputAxisKeyDelegateBinding
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.InputKeyDelegateBinding
	 * Size -> 0x0010 (FullSize[0x0038] - InheritedSize[0x0028])
	 */
	class UInputKeyDelegateBinding : public UInputDelegateBinding
	{
	public:
		TArray<struct FBlueprintInputKeyDelegateBinding>           InputKeyDelegateBindings;                                // 0x0028(0x0010) ZeroConstructor

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.InputTouchDelegateBinding
	 * Size -> 0x0010 (FullSize[0x0038] - InheritedSize[0x0028])
	 */
	class UInputTouchDelegateBinding : public UInputDelegateBinding
	{
	public:
		TArray<struct FBlueprintInputTouchDelegateBinding>         InputTouchDelegateBindings;                              // 0x0028(0x0010) ZeroConstructor

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.DynamicCaptureData
	 * Size -> 0x0020 (FullSize[0x0048] - InheritedSize[0x0028])
	 */
	class UDynamicCaptureData : public UObject
	{
	public:
		TArray<class UReflectionCaptureData*>                      ReflectionCapturesData;                                  // 0x0028(0x0010) Edit, ZeroConstructor
		TArray<class USkyLightData*>                               SkyLightsData;                                           // 0x0038(0x0010) Edit, ZeroConstructor

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.EdGraph
	 * Size -> 0x0040 (FullSize[0x0068] - InheritedSize[0x0028])
	 */
	class UEdGraph : public UObject
	{
	public:
		class UClass*                                              Schema;                                                  // 0x0028(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor
		TArray<class UEdGraphNode*>                                Nodes;                                                   // 0x0030(0x0010) ZeroConstructor
		unsigned char                                              bEditable : 1;                                           // 0x0040(0x0001) BIT_FIELD NoDestructor
		unsigned char                                              bAllowDeletion : 1;                                      // 0x0040(0x0001) BIT_FIELD NoDestructor
		unsigned char                                              bAllowRenaming : 1;                                      // 0x0040(0x0001) BIT_FIELD NoDestructor
		unsigned char                                              UnknownData_TJDZ[0x27];                                  // 0x0041(0x0027) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.EdGraphNode_Comment
	 * Size -> 0x0018 (FullSize[0x00A8] - InheritedSize[0x0090])
	 */
	class UEdGraphNode_Comment : public UEdGraphNode
	{
	public:
		struct FLinearColor                                        CommentColor;                                            // 0x0090(0x0010) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              bColorCommentBubble : 1;                                 // 0x00A0(0x0001) BIT_FIELD Edit, NoDestructor
		unsigned char                                              UnknownData_YYDB[0x3];                                   // 0x00A1(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		ECommentBoxMode                                            MoveMode;                                                // 0x00A4(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_BTLE[0x3];                                   // 0x00A5(0x0003) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.EdGraphNode_Documentation
	 * Size -> 0x0020 (FullSize[0x00B0] - InheritedSize[0x0090])
	 */
	class UEdGraphNode_Documentation : public UEdGraphNode
	{
	public:
		class FString                                              Link;                                                    // 0x0090(0x0010) ZeroConstructor
		class FString                                              Excerpt;                                                 // 0x00A0(0x0010) ZeroConstructor

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.EdGraphSchema
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class UEdGraphSchema : public UObject
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.Exporter
	 * Size -> 0x0040 (FullSize[0x0068] - InheritedSize[0x0028])
	 */
	class UExporter : public UObject
	{
	public:
		class UClass*                                              SupportedClass;                                          // 0x0028(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor
		class UObject*                                             ExportRootScope;                                         // 0x0030(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		TArray<class FString>                                      FormatExtension;                                         // 0x0038(0x0010) ZeroConstructor
		TArray<class FString>                                      FormatDescription;                                       // 0x0048(0x0010) ZeroConstructor
		int32_t                                                    PreferredFormatIndex;                                    // 0x0058(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor
		int32_t                                                    TextIndent;                                              // 0x005C(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              bText : 1;                                               // 0x0060(0x0001) BIT_FIELD NoDestructor
		unsigned char                                              bSelectedOnly : 1;                                       // 0x0060(0x0001) BIT_FIELD NoDestructor
		unsigned char                                              bForceFileOperations : 1;                                // 0x0060(0x0001) BIT_FIELD NoDestructor
		unsigned char                                              UnknownData_P5GK[0x7];                                   // 0x0061(0x0007) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.FoliageAttachedComponentInterface
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class UFoliageAttachedComponentInterface : public UInterface
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.FoliageType
	 * Size -> 0x0270 (FullSize[0x0298] - InheritedSize[0x0028])
	 */
	class UFoliageType : public UObject
	{
	public:
		float                                                      Density;                                                 // 0x0028(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      Radius;                                                  // 0x002C(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      ScaleMinX;                                               // 0x0030(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      ScaleMinY;                                               // 0x0034(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      ScaleMinZ;                                               // 0x0038(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      ScaleMaxX;                                               // 0x003C(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      ScaleMaxY;                                               // 0x0040(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      ScaleMaxZ;                                               // 0x0044(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              LockScaleX : 1;                                          // 0x0048(0x0001) BIT_FIELD Edit, NoDestructor
		unsigned char                                              LockScaleY : 1;                                          // 0x0048(0x0001) BIT_FIELD Edit, NoDestructor
		unsigned char                                              LockScaleZ : 1;                                          // 0x0048(0x0001) BIT_FIELD Edit, NoDestructor
		unsigned char                                              UnknownData_F72P[0x3];                                   // 0x0049(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      AlignMaxAngle;                                           // 0x004C(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      RandomPitchAngle;                                        // 0x0050(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      GroundSlope;                                             // 0x0054(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      HeightMin;                                               // 0x0058(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      HeightMax;                                               // 0x005C(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		class FName                                                LandscapeLayer;                                          // 0x0060(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              AlignToNormal : 1;                                       // 0x0068(0x0001) BIT_FIELD Edit, NoDestructor
		unsigned char                                              RandomYaw : 1;                                           // 0x0068(0x0001) BIT_FIELD Edit, NoDestructor
		unsigned char                                              UniformScale : 1;                                        // 0x0068(0x0001) BIT_FIELD Edit, NoDestructor
		unsigned char                                              UnknownData_D4VI[0x3];                                   // 0x0069(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      ZOffsetMin;                                              // 0x006C(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      ZOffsetMax;                                              // 0x0070(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              CollisionWithWorld : 1;                                  // 0x0074(0x0001) BIT_FIELD Edit, NoDestructor
		unsigned char                                              UnknownData_4AKP[0x3];                                   // 0x0075(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FVector                                             CollisionScale;                                          // 0x0078(0x000C) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		struct FBoxSphereBounds                                    MeshBounds;                                              // 0x0084(0x001C) ZeroConstructor
		struct FVector                                             LowBoundOriginRadius;                                    // 0x00A0(0x000C) ZeroConstructor, IsPlainOldData, NoDestructor
		EFoliageVertexColorMask                                    VertexColorMask;                                         // 0x00AC(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_9Z9V[0x3];                                   // 0x00AD(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      VertexColorMaskThreshold;                                // 0x00B0(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              VertexColorMaskInvert : 1;                               // 0x00B4(0x0001) BIT_FIELD Edit, NoDestructor
		unsigned char                                              bReplicateThisComponent : 1;                             // 0x00B4(0x0001) BIT_FIELD Edit, NoDestructor
		unsigned char                                              bDontScaleAttachedComponent : 1;                         // 0x00B4(0x0001) BIT_FIELD Edit, NoDestructor
		unsigned char                                              UnknownData_G8MN[0x3];                                   // 0x00B5(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UClass*                                              DamageFXActorToSpawn;                                    // 0x00B8(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      AttachedComponentScaleFactor;                            // 0x00C0(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      MinScaleForAttachedComponent;                            // 0x00C4(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      MaxScaleForAttachedComponent;                            // 0x00C8(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		int32_t                                                    MaxInstancesPerCluster;                                  // 0x00CC(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      MaxClusterRadius;                                        // 0x00D0(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_PSJX[0x4];                                   // 0x00D4(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UClass*                                              AttachedComponentClass;                                  // 0x00D8(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		class UDestructibleMesh*                                   DestroyedMesh;                                           // 0x00E0(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		class UClass*                                              DestroyedMeshActorClass;                                 // 0x00E8(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      OverrideWalkableFloorZ;                                  // 0x00F0(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      PlayerOverrideWalkableFloorZ;                            // 0x00F4(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              bIsFallingTree : 1;                                      // 0x00F8(0x0001) BIT_FIELD Edit, NoDestructor
		unsigned char                                              UnknownData_4MX4[0x7];                                   // 0x00F9(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class UMaterialInterface*>                          OverrideDestructionMaterials;                            // 0x0100(0x0010) Edit, ZeroConstructor
		float                                                      ReapplyDensityAmount;                                    // 0x0110(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              ReapplyDensity : 1;                                      // 0x0114(0x0001) BIT_FIELD NoDestructor
		unsigned char                                              ReapplyRadius : 1;                                       // 0x0114(0x0001) BIT_FIELD NoDestructor
		unsigned char                                              ReapplyAlignToNormal : 1;                                // 0x0114(0x0001) BIT_FIELD NoDestructor
		unsigned char                                              ReapplyRandomYaw : 1;                                    // 0x0114(0x0001) BIT_FIELD NoDestructor
		unsigned char                                              ReapplyScaleX : 1;                                       // 0x0114(0x0001) BIT_FIELD NoDestructor
		unsigned char                                              ReapplyScaleY : 1;                                       // 0x0114(0x0001) BIT_FIELD NoDestructor
		unsigned char                                              ReapplyScaleZ : 1;                                       // 0x0114(0x0001) BIT_FIELD NoDestructor
		unsigned char                                              ReapplyRandomPitchAngle : 1;                             // 0x0114(0x0001) BIT_FIELD NoDestructor
		unsigned char                                              ReapplyGroundSlope : 1;                                  // 0x0115(0x0001) BIT_FIELD NoDestructor
		unsigned char                                              ReapplyHeight : 1;                                       // 0x0115(0x0001) BIT_FIELD NoDestructor
		unsigned char                                              ReapplyLandscapeLayer : 1;                               // 0x0115(0x0001) BIT_FIELD NoDestructor
		unsigned char                                              ReapplyZOffset : 1;                                      // 0x0115(0x0001) BIT_FIELD NoDestructor
		unsigned char                                              ReapplyCollisionWithWorld : 1;                           // 0x0115(0x0001) BIT_FIELD NoDestructor
		unsigned char                                              ReapplyVertexColorMask : 1;                              // 0x0115(0x0001) BIT_FIELD NoDestructor
		unsigned char                                              bIsHiddenInEditor : 1;                                   // 0x0115(0x0001) BIT_FIELD NoDestructor
		unsigned char                                              UnknownData_I8A3[0x2];                                   // 0x0116(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int32_t                                                    StartCullDistance;                                       // 0x0118(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		int32_t                                                    EndCullDistance;                                         // 0x011C(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		int32_t                                                    LowEnd_StartCullDistance;                                // 0x0120(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		int32_t                                                    LowEnd_EndCullDistance;                                  // 0x0124(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		int32_t                                                    DisplayOrder;                                            // 0x0128(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              IsSelected : 1;                                          // 0x012C(0x0001) BIT_FIELD NoDestructor
		unsigned char                                              ShowNothing : 1;                                         // 0x012C(0x0001) BIT_FIELD NoDestructor
		unsigned char                                              ShowPaintSettings : 1;                                   // 0x012C(0x0001) BIT_FIELD NoDestructor
		unsigned char                                              ShowInstanceSettings : 1;                                // 0x012C(0x0001) BIT_FIELD NoDestructor
		unsigned char                                              bMapCheckIgnoreLargeCullDistance : 1;                    // 0x012C(0x0001) BIT_FIELD Edit, NoDestructor
		unsigned char                                              CastShadow : 1;                                          // 0x012C(0x0001) BIT_FIELD Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor
		unsigned char                                              bAffectDynamicIndirectLighting : 1;                      // 0x012C(0x0001) BIT_FIELD Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor
		unsigned char                                              bCastDynamicShadow : 1;                                  // 0x012C(0x0001) BIT_FIELD Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor
		unsigned char                                              bCastStaticShadow : 1;                                   // 0x012D(0x0001) BIT_FIELD Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor
		unsigned char                                              UnknownData_LJXS[0x2];                                   // 0x012E(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int32_t                                                    ObjectLayer;                                             // 0x0130(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              bCastHiddenShadow : 1;                                   // 0x0134(0x0001) BIT_FIELD Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay
		unsigned char                                              bCastShadowAsTwoSided : 1;                               // 0x0134(0x0001) BIT_FIELD Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay
		unsigned char                                              bReceivesDecals : 1;                                     // 0x0134(0x0001) BIT_FIELD Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay
		unsigned char                                              UnknownData_DHWR[0x3];                                   // 0x0135(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FBodyInstance                                       BodyInstance;                                            // 0x0138(0x0160) Edit

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.FoliageType_InstancedStaticMesh
	 * Size -> 0x0008 (FullSize[0x02A0] - InheritedSize[0x0298])
	 */
	class UFoliageType_InstancedStaticMesh : public UFoliageType
	{
	public:
		class UStaticMesh*                                         Mesh;                                                    // 0x0298(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.FontImportOptions
	 * Size -> 0x00B0 (FullSize[0x00D8] - InheritedSize[0x0028])
	 */
	class UFontImportOptions : public UObject
	{
	public:
		struct FFontImportOptionsData                              Data;                                                    // 0x0028(0x00B0) Edit

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.Font
	 * Size -> 0x0180 (FullSize[0x01A8] - InheritedSize[0x0028])
	 */
	class UFont : public UObject
	{
	public:
		unsigned char                                              UnknownData_MV0V[0x8];                                   // 0x0028(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		EFontCacheType                                             FontCacheType;                                           // 0x0030(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_4JT8[0x7];                                   // 0x0031(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<struct FFontCharacter>                              Characters;                                              // 0x0038(0x0010) Edit, ZeroConstructor
		TArray<class UTexture2D*>                                  Textures;                                                // 0x0048(0x0010) ZeroConstructor
		unsigned char                                              UnknownData_KD06[0x10];                                  // 0x0058(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		unsigned char                                              bForceOffline : 1;                                       // 0x0068(0x0001) BIT_FIELD Edit, NoDestructor
		unsigned char                                              UnknownData_85GL[0x3];                                   // 0x0069(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int32_t                                                    IsRemapped;                                              // 0x006C(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      EmScale;                                                 // 0x0070(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      Ascent;                                                  // 0x0074(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      Descent;                                                 // 0x0078(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      Leading;                                                 // 0x007C(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      DistanceFieldScreenSpaceScalar;                          // 0x0080(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		int32_t                                                    Kerning;                                                 // 0x0084(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		struct FFontImportOptionsData                              ImportOptions;                                           // 0x0088(0x00B0) Edit
		int32_t                                                    NumCharacters;                                           // 0x0138(0x0004) ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_FIAM[0x4];                                   // 0x013C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<int32_t>                                            MaxCharHeight;                                           // 0x0140(0x0010) ZeroConstructor, Transient
		float                                                      ScalingFactor;                                           // 0x0150(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_1Z7V[0x54];                                  // 0x0154(0x0054) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.PlayerInput
	 * Size -> 0x0310 (FullSize[0x0338] - InheritedSize[0x0028])
	 */
	class UPlayerInput : public UObject
	{
	public:
		unsigned char                                              UnknownData_I4MI[0xA0];                                  // 0x0028(0x00A0) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<struct FKeyBind>                                    DebugExecBindings;                                       // 0x00C8(0x0010) ZeroConstructor, Config
		unsigned char                                              UnknownData_7AKJ[0x40];                                  // 0x00D8(0x0040) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class FName>                                        InvertedAxis;                                            // 0x0118(0x0010) ZeroConstructor, Config
		unsigned char                                              UnknownData_FA95[0x210];                                 // 0x0128(0x0210) MISSED OFFSET (PADDING)

	public:
		void SetMouseSensitivityToDefault();
		void SetMouseSensitivity(float Sensitivity);
		void SetBind(const class FName& BindName, const class FString& Command);
		void InvertMouse();
		void InvertAxisKey(const struct FKey& AxisKey);
		void InvertAxis(const class FName& AxisName);
		void ClearSmoothing();
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.InputSettings
	 * Size -> 0x0080 (FullSize[0x00A8] - InheritedSize[0x0028])
	 */
	class UInputSettings : public UObject
	{
	public:
		TArray<struct FInputAxisConfigEntry>                       AxisConfig;                                              // 0x0028(0x0010) Edit, EditFixedSize, ZeroConstructor, Config, AdvancedDisplay
		unsigned char                                              bUseMouseForTouch : 1;                                   // 0x0038(0x0001) BIT_FIELD Edit, Config, NoDestructor
		unsigned char                                              bEnableMouseSmoothing : 1;                               // 0x0038(0x0001) BIT_FIELD Edit, Config, NoDestructor, AdvancedDisplay
		unsigned char                                              bEnableFOVScaling : 1;                                   // 0x0038(0x0001) BIT_FIELD Edit, Config, NoDestructor, AdvancedDisplay
		unsigned char                                              UnknownData_E6ZC[0x3];                                   // 0x0039(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      FOVScale;                                                // 0x003C(0x0004) Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, AdvancedDisplay
		float                                                      DoubleClickTime;                                         // 0x0040(0x0004) Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, AdvancedDisplay
		unsigned char                                              UnknownData_F4U0[0x4];                                   // 0x0044(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<struct FInputActionKeyMapping>                      ActionMappings;                                          // 0x0048(0x0010) Edit, ZeroConstructor, Config
		TArray<struct FInputAxisKeyMapping>                        AxisMappings;                                            // 0x0058(0x0010) Edit, ZeroConstructor, Config
		bool                                                       bAlwaysShowTouchInterface;                               // 0x0068(0x0001) Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor
		bool                                                       bShowConsoleOnFourFingerTap;                             // 0x0069(0x0001) Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_L3L4[0x6];                                   // 0x006A(0x0006) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FStringAssetReference                               DefaultTouchInterface;                                   // 0x0070(0x0010) Edit, ZeroConstructor, Config
		struct FKey                                                ConsoleKey;                                              // 0x0080(0x0018) Config, Deprecated
		TArray<struct FKey>                                        ConsoleKeys;                                             // 0x0098(0x0010) Edit, ZeroConstructor, Config

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.InterpCurveEdSetup
	 * Size -> 0x0018 (FullSize[0x0040] - InheritedSize[0x0028])
	 */
	class UInterpCurveEdSetup : public UObject
	{
	public:
		TArray<struct FCurveEdTab>                                 Tabs;                                                    // 0x0028(0x0010) ZeroConstructor
		int32_t                                                    ActiveTab;                                               // 0x0038(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_UP5B[0x4];                                   // 0x003C(0x0004) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.InterpData
	 * Size -> 0x0058 (FullSize[0x0080] - InheritedSize[0x0028])
	 */
	class UInterpData : public UObject
	{
	public:
		float                                                      InterpLength;                                            // 0x0028(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      PathBuildTime;                                           // 0x002C(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor
		TArray<class UInterpGroup*>                                InterpGroups;                                            // 0x0030(0x0010) ExportObject, ZeroConstructor
		class UInterpCurveEdSetup*                                 CurveEdSetup;                                            // 0x0040(0x0008) ExportObject, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      EdSectionStart;                                          // 0x0048(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      EdSectionEnd;                                            // 0x004C(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              bShouldBakeAndPrune : 1;                                 // 0x0050(0x0001) BIT_FIELD Edit, NoDestructor
		unsigned char                                              UnknownData_3P7X[0x7];                                   // 0x0051(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<struct FAnimSetBakeAndPruneStatus>                  BakeAndPruneStatus;                                      // 0x0058(0x0010) Edit, EditFixedSize, ZeroConstructor
		class UInterpGroupDirector*                                CachedDirectorGroup;                                     // 0x0068(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		TArray<class FName>                                        AllEventNames;                                           // 0x0070(0x0010) ZeroConstructor

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.InterpFilter
	 * Size -> 0x0010 (FullSize[0x0038] - InheritedSize[0x0028])
	 */
	class UInterpFilter : public UObject
	{
	public:
		class FString                                              caption;                                                 // 0x0028(0x0010) ZeroConstructor

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.InterpFilter_Classes
	 * Size -> 0x0000 (FullSize[0x0038] - InheritedSize[0x0038])
	 */
	class UInterpFilter_Classes : public UInterpFilter
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.InterpFilter_Custom
	 * Size -> 0x0000 (FullSize[0x0038] - InheritedSize[0x0038])
	 */
	class UInterpFilter_Custom : public UInterpFilter
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.InterpGroup
	 * Size -> 0x0028 (FullSize[0x0050] - InheritedSize[0x0028])
	 */
	class UInterpGroup : public UObject
	{
	public:
		unsigned char                                              UnknownData_MEG1[0x8];                                   // 0x0028(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class UInterpTrack*>                                InterpTracks;                                            // 0x0030(0x0010) ExportObject, ZeroConstructor
		class FName                                                GroupName;                                               // 0x0040(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor
		struct FColor                                              GroupColor;                                              // 0x0048(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              bCollapsed : 1;                                          // 0x004C(0x0001) BIT_FIELD NoDestructor
		unsigned char                                              bVisible : 1;                                            // 0x004C(0x0001) BIT_FIELD Transient, NoDestructor
		unsigned char                                              bIsFolder : 1;                                           // 0x004C(0x0001) BIT_FIELD NoDestructor
		unsigned char                                              bIsParented : 1;                                         // 0x004C(0x0001) BIT_FIELD NoDestructor
		unsigned char                                              bIsSelected : 1;                                         // 0x004C(0x0001) BIT_FIELD Transient, NoDestructor
		unsigned char                                              UnknownData_QQUJ[0x3];                                   // 0x004D(0x0003) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.InterpGroupCamera
	 * Size -> 0x0010 (FullSize[0x0060] - InheritedSize[0x0050])
	 */
	class UInterpGroupCamera : public UInterpGroup
	{
	public:
		class UCameraAnim*                                         CameraAnimInst;                                          // 0x0050(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		float                                                      CompressTolerance;                                       // 0x0058(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_XGYM[0x4];                                   // 0x005C(0x0004) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.InterpGroupDirector
	 * Size -> 0x0000 (FullSize[0x0050] - InheritedSize[0x0050])
	 */
	class UInterpGroupDirector : public UInterpGroup
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.InterpGroupInst
	 * Size -> 0x0020 (FullSize[0x0048] - InheritedSize[0x0028])
	 */
	class UInterpGroupInst : public UObject
	{
	public:
		class UInterpGroup*                                        Group;                                                   // 0x0028(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor
		class AActor*                                              GroupActor;                                              // 0x0030(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor
		TArray<class UInterpTrackInst*>                            TrackInst;                                               // 0x0038(0x0010) ZeroConstructor

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.InterpGroupInstCamera
	 * Size -> 0x0000 (FullSize[0x0048] - InheritedSize[0x0048])
	 */
	class UInterpGroupInstCamera : public UInterpGroupInst
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.InterpGroupInstDirector
	 * Size -> 0x0000 (FullSize[0x0048] - InheritedSize[0x0048])
	 */
	class UInterpGroupInstDirector : public UInterpGroupInst
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.InterpTrack
	 * Size -> 0x0058 (FullSize[0x0080] - InheritedSize[0x0028])
	 */
	class UInterpTrack : public UObject
	{
	public:
		unsigned char                                              UnknownData_3NMS[0x10];                                  // 0x0028(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class UInterpTrack*>                                SubTracks;                                               // 0x0038(0x0010) ZeroConstructor
		class UClass*                                              TrackInstClass;                                          // 0x0048(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor
		ETrackActiveCondition                                      ActiveCondition;                                         // 0x0050(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_ZW19[0x7];                                   // 0x0051(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FString                                              TrackTitle;                                              // 0x0058(0x0010) ZeroConstructor
		unsigned char                                              bOnePerGroup : 1;                                        // 0x0068(0x0001) BIT_FIELD NoDestructor
		unsigned char                                              bDirGroupOnly : 1;                                       // 0x0068(0x0001) BIT_FIELD NoDestructor
		unsigned char                                              bDisableTrack : 1;                                       // 0x0068(0x0001) BIT_FIELD NoDestructor
		unsigned char                                              bIsSelected : 1;                                         // 0x0068(0x0001) BIT_FIELD Transient, NoDestructor
		unsigned char                                              UnknownData_1MJU[0x7];                                   // 0x0069(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UTexture2D*                                          TrackIcon;                                               // 0x0070(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		unsigned char                                              bIsAnimControlTrack : 1;                                 // 0x0078(0x0001) BIT_FIELD NoDestructor
		unsigned char                                              bSubTrackOnly : 1;                                       // 0x0078(0x0001) BIT_FIELD NoDestructor
		unsigned char                                              bVisible : 1;                                            // 0x0078(0x0001) BIT_FIELD Transient, NoDestructor
		unsigned char                                              bIsRecording : 1;                                        // 0x0078(0x0001) BIT_FIELD Transient, NoDestructor
		unsigned char                                              UnknownData_VPS4[0x7];                                   // 0x0079(0x0007) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.InterpTrackBoolProp
	 * Size -> 0x0018 (FullSize[0x0098] - InheritedSize[0x0080])
	 */
	class UInterpTrackBoolProp : public UInterpTrack
	{
	public:
		TArray<struct FBoolTrackKey>                               BoolTrack;                                               // 0x0080(0x0010) ZeroConstructor
		class FName                                                PropertyName;                                            // 0x0090(0x0008) Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.InterpTrackDirector
	 * Size -> 0x0018 (FullSize[0x0098] - InheritedSize[0x0080])
	 */
	class UInterpTrackDirector : public UInterpTrack
	{
	public:
		TArray<struct FDirectorTrackCut>                           CutTrack;                                                // 0x0080(0x0010) ZeroConstructor
		unsigned char                                              bSimulateCameraCutsOnClients : 1;                        // 0x0090(0x0001) BIT_FIELD Edit, NoDestructor
		unsigned char                                              UnknownData_AJ42[0x7];                                   // 0x0091(0x0007) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.InterpTrackEvent
	 * Size -> 0x0018 (FullSize[0x0098] - InheritedSize[0x0080])
	 */
	class UInterpTrackEvent : public UInterpTrack
	{
	public:
		TArray<struct FEventTrackKey>                              EventTrack;                                              // 0x0080(0x0010) ZeroConstructor
		unsigned char                                              bFireEventsWhenForwards : 1;                             // 0x0090(0x0001) BIT_FIELD Edit, NoDestructor
		unsigned char                                              bFireEventsWhenBackwards : 1;                            // 0x0090(0x0001) BIT_FIELD Edit, NoDestructor
		unsigned char                                              bFireEventsWhenJumpingForwards : 1;                      // 0x0090(0x0001) BIT_FIELD Edit, NoDestructor
		unsigned char                                              UnknownData_V1R5[0x7];                                   // 0x0091(0x0007) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.InterpTrackFloatBase
	 * Size -> 0x0018 (FullSize[0x0098] - InheritedSize[0x0080])
	 */
	class UInterpTrackFloatBase : public UInterpTrack
	{
	public:
		struct FInterpCurveFloat                                   FloatTrack;                                              // 0x0080(0x0010) ZeroConstructor
		float                                                      CurveTension;                                            // 0x0090(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_2WZO[0x4];                                   // 0x0094(0x0004) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.InterpTrackAnimControl
	 * Size -> 0x0020 (FullSize[0x00B8] - InheritedSize[0x0098])
	 */
	class UInterpTrackAnimControl : public UInterpTrackFloatBase
	{
	public:
		class FName                                                SlotName;                                                // 0x0098(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		TArray<struct FAnimControlTrackKey>                        AnimSeqs;                                                // 0x00A0(0x0010) ZeroConstructor
		unsigned char                                              bSkipAnimNotifiers : 1;                                  // 0x00B0(0x0001) BIT_FIELD Edit, NoDestructor
		unsigned char                                              UnknownData_G983[0x7];                                   // 0x00B1(0x0007) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.InterpTrackFade
	 * Size -> 0x0008 (FullSize[0x00A0] - InheritedSize[0x0098])
	 */
	class UInterpTrackFade : public UInterpTrackFloatBase
	{
	public:
		unsigned char                                              bPersistFade : 1;                                        // 0x0098(0x0001) BIT_FIELD Edit, NoDestructor
		unsigned char                                              UnknownData_OQ4V[0x7];                                   // 0x0099(0x0007) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.InterpTrackFloatMaterialParam
	 * Size -> 0x0018 (FullSize[0x00B0] - InheritedSize[0x0098])
	 */
	class UInterpTrackFloatMaterialParam : public UInterpTrackFloatBase
	{
	public:
		TArray<class UMaterialInterface*>                          TargetMaterials;                                         // 0x0098(0x0010) Edit, ZeroConstructor
		class FName                                                ParamName;                                               // 0x00A8(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.InterpTrackFloatParticleParam
	 * Size -> 0x0008 (FullSize[0x00A0] - InheritedSize[0x0098])
	 */
	class UInterpTrackFloatParticleParam : public UInterpTrackFloatBase
	{
	public:
		class FName                                                ParamName;                                               // 0x0098(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.InterpTrackFloatProp
	 * Size -> 0x0010 (FullSize[0x00A8] - InheritedSize[0x0098])
	 */
	class UInterpTrackFloatProp : public UInterpTrackFloatBase
	{
	public:
		class FName                                                PropertyName;                                            // 0x0098(0x0008) Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor
		ETrackInterpMode                                           InterpMode;                                              // 0x00A0(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_5KI0[0x7];                                   // 0x00A1(0x0007) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.InterpTrackMove
	 * Size -> 0x0048 (FullSize[0x00C8] - InheritedSize[0x0080])
	 */
	class UInterpTrackMove : public UInterpTrack
	{
	public:
		struct FInterpCurveVector                                  PosTrack;                                                // 0x0080(0x0010) ZeroConstructor
		struct FInterpCurveVector                                  EulerTrack;                                              // 0x0090(0x0010) ZeroConstructor
		struct FInterpLookupTrack                                  LookupTrack;                                             // 0x00A0(0x0010)
		class FName                                                LookAtGroupName;                                         // 0x00B0(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      LinCurveTension;                                         // 0x00B8(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      AngCurveTension;                                         // 0x00BC(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              bUseQuatInterpolation : 1;                               // 0x00C0(0x0001) BIT_FIELD Edit, NoDestructor
		unsigned char                                              bShowArrowAtKeys : 1;                                    // 0x00C0(0x0001) BIT_FIELD Edit, NoDestructor
		unsigned char                                              bDisableMovement : 1;                                    // 0x00C0(0x0001) BIT_FIELD Edit, NoDestructor
		unsigned char                                              bShowTranslationOnCurveEd : 1;                           // 0x00C0(0x0001) BIT_FIELD Edit, NoDestructor
		unsigned char                                              bShowRotationOnCurveEd : 1;                              // 0x00C0(0x0001) BIT_FIELD Edit, NoDestructor
		unsigned char                                              bHide3DTrack : 1;                                        // 0x00C0(0x0001) BIT_FIELD Edit, NoDestructor
		unsigned char                                              UnknownData_3Q5C[0x3];                                   // 0x00C1(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		EInterpTrackMoveRotMode                                    RotMode;                                                 // 0x00C4(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_QFTV[0x3];                                   // 0x00C5(0x0003) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.InterpTrackMoveAxis
	 * Size -> 0x0018 (FullSize[0x00B0] - InheritedSize[0x0098])
	 */
	class UInterpTrackMoveAxis : public UInterpTrackFloatBase
	{
	public:
		EInterpMoveAxis                                            MoveAxis;                                                // 0x0098(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_CPDR[0x7];                                   // 0x0099(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FInterpLookupTrack                                  LookupTrack;                                             // 0x00A0(0x0010)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.InterpTrackSlomo
	 * Size -> 0x0000 (FullSize[0x0098] - InheritedSize[0x0098])
	 */
	class UInterpTrackSlomo : public UInterpTrackFloatBase
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.InterpTrackLinearColorBase
	 * Size -> 0x0018 (FullSize[0x0098] - InheritedSize[0x0080])
	 */
	class UInterpTrackLinearColorBase : public UInterpTrack
	{
	public:
		struct FInterpCurveLinearColor                             LinearColorTrack;                                        // 0x0080(0x0010) ZeroConstructor
		float                                                      CurveTension;                                            // 0x0090(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_4MNN[0x4];                                   // 0x0094(0x0004) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.InterpTrackLinearColorProp
	 * Size -> 0x0010 (FullSize[0x00A8] - InheritedSize[0x0098])
	 */
	class UInterpTrackLinearColorProp : public UInterpTrackLinearColorBase
	{
	public:
		class FName                                                PropertyName;                                            // 0x0098(0x0008) Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor
		ETrackInterpMode                                           InterpMode;                                              // 0x00A0(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_H8B5[0x7];                                   // 0x00A1(0x0007) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.InterpTrackParticleReplay
	 * Size -> 0x0010 (FullSize[0x0090] - InheritedSize[0x0080])
	 */
	class UInterpTrackParticleReplay : public UInterpTrack
	{
	public:
		TArray<struct FParticleReplayTrackKey>                     TrackKeys;                                               // 0x0080(0x0010) ZeroConstructor

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.InterpTrackToggle
	 * Size -> 0x0018 (FullSize[0x0098] - InheritedSize[0x0080])
	 */
	class UInterpTrackToggle : public UInterpTrack
	{
	public:
		TArray<struct FToggleTrackKey>                             ToggleTrack;                                             // 0x0080(0x0010) ZeroConstructor
		unsigned char                                              bActivateSystemEachUpdate : 1;                           // 0x0090(0x0001) BIT_FIELD Edit, NoDestructor
		unsigned char                                              bActivateWithJustAttachedFlag : 1;                       // 0x0090(0x0001) BIT_FIELD Edit, NoDestructor
		unsigned char                                              bFireEventsWhenForwards : 1;                             // 0x0090(0x0001) BIT_FIELD Edit, NoDestructor
		unsigned char                                              bFireEventsWhenBackwards : 1;                            // 0x0090(0x0001) BIT_FIELD Edit, NoDestructor
		unsigned char                                              bFireEventsWhenJumpingForwards : 1;                      // 0x0090(0x0001) BIT_FIELD Edit, NoDestructor
		unsigned char                                              UnknownData_JMHC[0x7];                                   // 0x0091(0x0007) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.InterpTrackVectorBase
	 * Size -> 0x0018 (FullSize[0x0098] - InheritedSize[0x0080])
	 */
	class UInterpTrackVectorBase : public UInterpTrack
	{
	public:
		struct FInterpCurveVector                                  VectorTrack;                                             // 0x0080(0x0010) ZeroConstructor
		float                                                      CurveTension;                                            // 0x0090(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_MKB2[0x4];                                   // 0x0094(0x0004) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.InterpTrackAudioMaster
	 * Size -> 0x0000 (FullSize[0x0098] - InheritedSize[0x0098])
	 */
	class UInterpTrackAudioMaster : public UInterpTrackVectorBase
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.InterpTrackColorProp
	 * Size -> 0x0008 (FullSize[0x00A0] - InheritedSize[0x0098])
	 */
	class UInterpTrackColorProp : public UInterpTrackVectorBase
	{
	public:
		class FName                                                PropertyName;                                            // 0x0098(0x0008) Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.InterpTrackColorScale
	 * Size -> 0x0000 (FullSize[0x0098] - InheritedSize[0x0098])
	 */
	class UInterpTrackColorScale : public UInterpTrackVectorBase
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.InterpTrackSound
	 * Size -> 0x0018 (FullSize[0x00B0] - InheritedSize[0x0098])
	 */
	class UInterpTrackSound : public UInterpTrackVectorBase
	{
	public:
		TArray<struct FSoundTrackKey>                              Sounds;                                                  // 0x0098(0x0010) ZeroConstructor
		unsigned char                                              bPlayOnReverse : 1;                                      // 0x00A8(0x0001) BIT_FIELD Edit, NoDestructor
		unsigned char                                              bContinueSoundOnMatineeEnd : 1;                          // 0x00A8(0x0001) BIT_FIELD Edit, NoDestructor
		unsigned char                                              bSuppressSubtitles : 1;                                  // 0x00A8(0x0001) BIT_FIELD Edit, NoDestructor
		unsigned char                                              bTreatAsDialogue : 1;                                    // 0x00A8(0x0001) BIT_FIELD Edit, NoDestructor
		unsigned char                                              bAttach : 1;                                             // 0x00A8(0x0001) BIT_FIELD Edit, NoDestructor
		unsigned char                                              UnknownData_QYFS[0x7];                                   // 0x00A9(0x0007) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.InterpTrackVectorMaterialParam
	 * Size -> 0x0018 (FullSize[0x00B0] - InheritedSize[0x0098])
	 */
	class UInterpTrackVectorMaterialParam : public UInterpTrackVectorBase
	{
	public:
		TArray<class UMaterialInterface*>                          TargetMaterials;                                         // 0x0098(0x0010) Edit, ZeroConstructor
		class FName                                                ParamName;                                               // 0x00A8(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.InterpTrackVectorProp
	 * Size -> 0x0010 (FullSize[0x00A8] - InheritedSize[0x0098])
	 */
	class UInterpTrackVectorProp : public UInterpTrackVectorBase
	{
	public:
		class FName                                                PropertyName;                                            // 0x0098(0x0008) Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor
		ETrackInterpMode                                           InterpMode;                                              // 0x00A0(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_SLJS[0x7];                                   // 0x00A1(0x0007) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.InterpTrackVisibility
	 * Size -> 0x0018 (FullSize[0x0098] - InheritedSize[0x0080])
	 */
	class UInterpTrackVisibility : public UInterpTrack
	{
	public:
		TArray<struct FVisibilityTrackKey>                         VisibilityTrack;                                         // 0x0080(0x0010) ZeroConstructor
		unsigned char                                              bFireEventsWhenForwards : 1;                             // 0x0090(0x0001) BIT_FIELD Edit, NoDestructor
		unsigned char                                              bFireEventsWhenBackwards : 1;                            // 0x0090(0x0001) BIT_FIELD Edit, NoDestructor
		unsigned char                                              bFireEventsWhenJumpingForwards : 1;                      // 0x0090(0x0001) BIT_FIELD Edit, NoDestructor
		unsigned char                                              UnknownData_JC8N[0x7];                                   // 0x0091(0x0007) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.InterpTrackInst
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class UInterpTrackInst : public UObject
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.InterpTrackInstAnimControl
	 * Size -> 0x0008 (FullSize[0x0030] - InheritedSize[0x0028])
	 */
	class UInterpTrackInstAnimControl : public UInterpTrackInst
	{
	public:
		float                                                      LastUpdatePosition;                                      // 0x0028(0x0004) ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_WUWT[0x4];                                   // 0x002C(0x0004) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.InterpTrackInstAudioMaster
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class UInterpTrackInstAudioMaster : public UInterpTrackInst
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.InterpTrackInstColorScale
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class UInterpTrackInstColorScale : public UInterpTrackInst
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.InterpTrackInstDirector
	 * Size -> 0x0008 (FullSize[0x0030] - InheritedSize[0x0028])
	 */
	class UInterpTrackInstDirector : public UInterpTrackInst
	{
	public:
		class AActor*                                              OldViewTarget;                                           // 0x0028(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.InterpTrackInstEvent
	 * Size -> 0x0008 (FullSize[0x0030] - InheritedSize[0x0028])
	 */
	class UInterpTrackInstEvent : public UInterpTrackInst
	{
	public:
		float                                                      LastUpdatePosition;                                      // 0x0028(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_8XQQ[0x4];                                   // 0x002C(0x0004) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.InterpTrackInstFade
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class UInterpTrackInstFade : public UInterpTrackInst
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.InterpTrackInstFloatMaterialParam
	 * Size -> 0x0038 (FullSize[0x0060] - InheritedSize[0x0028])
	 */
	class UInterpTrackInstFloatMaterialParam : public UInterpTrackInst
	{
	public:
		TArray<class UMaterialInstanceDynamic*>                    MaterialInstances;                                       // 0x0028(0x0010) ZeroConstructor
		TArray<float>                                              ResetFloats;                                             // 0x0038(0x0010) ZeroConstructor
		TArray<struct FPrimitiveMaterialRef>                       PrimitiveMaterialRefs;                                   // 0x0048(0x0010) ZeroConstructor
		class UInterpTrackFloatMaterialParam*                      InstancedTrack;                                          // 0x0058(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.InterpTrackInstFloatParticleParam
	 * Size -> 0x0008 (FullSize[0x0030] - InheritedSize[0x0028])
	 */
	class UInterpTrackInstFloatParticleParam : public UInterpTrackInst
	{
	public:
		float                                                      ResetFloat;                                              // 0x0028(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_BXB2[0x4];                                   // 0x002C(0x0004) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.InterpTrackInstMove
	 * Size -> 0x0018 (FullSize[0x0040] - InheritedSize[0x0028])
	 */
	class UInterpTrackInstMove : public UInterpTrackInst
	{
	public:
		struct FVector                                             ResetLocation;                                           // 0x0028(0x000C) ZeroConstructor, IsPlainOldData, NoDestructor
		struct FRotator                                            ResetRotation;                                           // 0x0034(0x000C) ZeroConstructor, IsPlainOldData, NoDestructor

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.InterpTrackInstParticleReplay
	 * Size -> 0x0008 (FullSize[0x0030] - InheritedSize[0x0028])
	 */
	class UInterpTrackInstParticleReplay : public UInterpTrackInst
	{
	public:
		float                                                      LastUpdatePosition;                                      // 0x0028(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_H1ZV[0x4];                                   // 0x002C(0x0004) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.InterpTrackInstProperty
	 * Size -> 0x0010 (FullSize[0x0038] - InheritedSize[0x0028])
	 */
	class UInterpTrackInstProperty : public UInterpTrackInst
	{
	public:
		class UProperty*                                           InterpProperty;                                          // 0x0028(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor
		class UObject*                                             PropertyOuterObjectInst;                                 // 0x0030(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.InterpTrackInstBoolProp
	 * Size -> 0x0018 (FullSize[0x0050] - InheritedSize[0x0038])
	 */
	class UInterpTrackInstBoolProp : public UInterpTrackInstProperty
	{
	public:
		unsigned char                                              UnknownData_RGWM[0x8];                                   // 0x0038(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UBoolProperty*                                       BoolProperty;                                            // 0x0040(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		bool                                                       ResetBool;                                               // 0x0048(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_E4M4[0x7];                                   // 0x0049(0x0007) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.InterpTrackInstColorProp
	 * Size -> 0x0010 (FullSize[0x0048] - InheritedSize[0x0038])
	 */
	class UInterpTrackInstColorProp : public UInterpTrackInstProperty
	{
	public:
		unsigned char                                              UnknownData_Y9MH[0x8];                                   // 0x0038(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FColor                                              ResetColor;                                              // 0x0040(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_LNBF[0x4];                                   // 0x0044(0x0004) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.InterpTrackInstFloatProp
	 * Size -> 0x0010 (FullSize[0x0048] - InheritedSize[0x0038])
	 */
	class UInterpTrackInstFloatProp : public UInterpTrackInstProperty
	{
	public:
		unsigned char                                              UnknownData_RG2R[0x8];                                   // 0x0038(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      ResetFloat;                                              // 0x0040(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_AP3D[0x4];                                   // 0x0044(0x0004) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.InterpTrackInstLinearColorProp
	 * Size -> 0x0018 (FullSize[0x0050] - InheritedSize[0x0038])
	 */
	class UInterpTrackInstLinearColorProp : public UInterpTrackInstProperty
	{
	public:
		unsigned char                                              UnknownData_VVS2[0x8];                                   // 0x0038(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FLinearColor                                        ResetColor;                                              // 0x0040(0x0010) ZeroConstructor, IsPlainOldData, NoDestructor

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.InterpTrackInstVectorProp
	 * Size -> 0x0018 (FullSize[0x0050] - InheritedSize[0x0038])
	 */
	class UInterpTrackInstVectorProp : public UInterpTrackInstProperty
	{
	public:
		unsigned char                                              UnknownData_HYNX[0x8];                                   // 0x0038(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FVector                                             ResetVector;                                             // 0x0040(0x000C) ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_O5HB[0x4];                                   // 0x004C(0x0004) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.InterpTrackInstSlomo
	 * Size -> 0x0008 (FullSize[0x0030] - InheritedSize[0x0028])
	 */
	class UInterpTrackInstSlomo : public UInterpTrackInst
	{
	public:
		float                                                      OldTimeDilation;                                         // 0x0028(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_6IYC[0x4];                                   // 0x002C(0x0004) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.InterpTrackInstSound
	 * Size -> 0x0010 (FullSize[0x0038] - InheritedSize[0x0028])
	 */
	class UInterpTrackInstSound : public UInterpTrackInst
	{
	public:
		float                                                      LastUpdatePosition;                                      // 0x0028(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_10IJ[0x4];                                   // 0x002C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UAudioComponent*                                     PlayAudioComp;                                           // 0x0030(0x0008) ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.InterpTrackInstToggle
	 * Size -> 0x0010 (FullSize[0x0038] - InheritedSize[0x0028])
	 */
	class UInterpTrackInstToggle : public UInterpTrackInst
	{
	public:
		ETrackToggleAction                                         Action;                                                  // 0x0028(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_RT9L[0x3];                                   // 0x0029(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      LastUpdatePosition;                                      // 0x002C(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              bSavedActiveState : 1;                                   // 0x0030(0x0001) BIT_FIELD NoDestructor
		unsigned char                                              UnknownData_SN4N[0x7];                                   // 0x0031(0x0007) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.InterpTrackInstVectorMaterialParam
	 * Size -> 0x0038 (FullSize[0x0060] - InheritedSize[0x0028])
	 */
	class UInterpTrackInstVectorMaterialParam : public UInterpTrackInst
	{
	public:
		TArray<class UMaterialInstanceDynamic*>                    MaterialInstances;                                       // 0x0028(0x0010) ZeroConstructor
		TArray<struct FVector>                                     ResetVectors;                                            // 0x0038(0x0010) ZeroConstructor
		TArray<struct FPrimitiveMaterialRef>                       PrimitiveMaterialRefs;                                   // 0x0048(0x0010) ZeroConstructor
		class UInterpTrackVectorMaterialParam*                     InstancedTrack;                                          // 0x0058(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.InterpTrackInstVisibility
	 * Size -> 0x0008 (FullSize[0x0030] - InheritedSize[0x0028])
	 */
	class UInterpTrackInstVisibility : public UInterpTrackInst
	{
	public:
		EVisibilityTrackAction                                     Action;                                                  // 0x0028(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_WKJ6[0x3];                                   // 0x0029(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      LastUpdatePosition;                                      // 0x002C(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.IntSerialization
	 * Size -> 0x0028 (FullSize[0x0050] - InheritedSize[0x0028])
	 */
	class UIntSerialization : public UObject
	{
	public:
		uint16_t                                                   UnsignedInt16Variable;                                   // 0x0028(0x0002) ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_R073[0x2];                                   // 0x002A(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		uint32_t                                                   UnsignedInt32Variable;                                   // 0x002C(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor
		uint64_t                                                   UnsignedInt64Variable;                                   // 0x0030(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor
		int8_t                                                     SignedInt8Variable;                                      // 0x0038(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_DDP8[0x1];                                   // 0x0039(0x0001) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int16_t                                                    SignedInt16Variable;                                     // 0x003A(0x0002) ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_8KPE[0x4];                                   // 0x003C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int64_t                                                    SignedInt64Variable;                                     // 0x0040(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnsignedInt8Variable;                                    // 0x0048(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_5559[0x3];                                   // 0x0049(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int32_t                                                    SignedInt32Variable;                                     // 0x004C(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.LandscapeInfo
	 * Size -> 0x0248 (FullSize[0x0270] - InheritedSize[0x0028])
	 */
	class ULandscapeInfo : public UObject
	{
	public:
		TLazyObjectPtr<class ALandscape>                           LandscapeActor;                                          // 0x0028(0x001C) IsPlainOldData, NoDestructor
		struct FGuid                                               LandscapeGuid;                                           // 0x0044(0x0010) ZeroConstructor
		int32_t                                                    ComponentSizeQuads;                                      // 0x0054(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor
		int32_t                                                    SubsectionSizeQuads;                                     // 0x0058(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor
		int32_t                                                    ComponentNumSubsections;                                 // 0x005C(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor
		struct FVector                                             DrawScale;                                               // 0x0060(0x000C) ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              bIsValid : 1;                                            // 0x006C(0x0001) BIT_FIELD Transient, NoDestructor
		unsigned char                                              UnknownData_NAFT[0x203];                                 // 0x006D(0x0203) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.LandscapeLayerInfoObject
	 * Size -> 0x0030 (FullSize[0x0058] - InheritedSize[0x0028])
	 */
	class ULandscapeLayerInfoObject : public UObject
	{
	public:
		int32_t                                                    LandscapeInfoID;                                         // 0x0028(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		class FName                                                LayerName;                                               // 0x002C(0x0008) Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, AssetRegistrySearchable
		unsigned char                                              UnknownData_XEF7[0x4];                                   // 0x0034(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UPhysicalMaterial*                                   PhysMaterial;                                            // 0x0038(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      Hardness;                                                // 0x0040(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              bNoWeightBlend : 1;                                      // 0x0044(0x0001) BIT_FIELD Edit, EditConst, NoDestructor
		unsigned char                                              UnknownData_GRVW[0x3];                                   // 0x0045(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FLinearColor                                        LayerUsageDebugColor;                                    // 0x0048(0x0010) Edit, ZeroConstructor, IsPlainOldData, NoDestructor

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.LandscapeSplineSegment
	 * Size -> 0x0080 (FullSize[0x00A8] - InheritedSize[0x0028])
	 */
	class ULandscapeSplineSegment : public UObject
	{
	public:
		struct FLandscapeSplineSegmentConnection                   Connections[0x2];                                        // 0x0028(0x0030) Edit, EditFixedSize
		struct FInterpCurveVector                                  SplineInfo;                                              // 0x0058(0x0010) ZeroConstructor, Protected
		TArray<struct FLandscapeSplineInterpPoint>                 Points;                                                  // 0x0068(0x0010) ZeroConstructor, Protected
		struct FBox                                                Bounds;                                                  // 0x0078(0x001C) ZeroConstructor, IsPlainOldData, NoDestructor, Protected
		unsigned char                                              UnknownData_VGPJ[0x4];                                   // 0x0094(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class USplineMeshComponent*>                        MeshComponents;                                          // 0x0098(0x0010) ExportObject, ZeroConstructor, ContainsInstancedReference, Protected, TextExportTransient

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.LandscapeSplineControlPoint
	 * Size -> 0x0070 (FullSize[0x0098] - InheritedSize[0x0028])
	 */
	class ULandscapeSplineControlPoint : public UObject
	{
	public:
		struct FVector                                             Location;                                                // 0x0028(0x000C) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		struct FRotator                                            Rotation;                                                // 0x0034(0x000C) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      Width;                                                   // 0x0040(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      SideFalloff;                                             // 0x0044(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      EndFalloff;                                              // 0x0048(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_4MR4[0x4];                                   // 0x004C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<struct FLandscapeSplineConnection>                  ConnectedSegments;                                       // 0x0050(0x0010) ZeroConstructor, TextExportTransient
		class UControlPointMeshComponent*                          MeshComponent;                                           // 0x0060(0x0008) ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, TextExportTransient
		TArray<struct FLandscapeSplineInterpPoint>                 Points;                                                  // 0x0068(0x0010) ZeroConstructor, Protected
		struct FBox                                                Bounds;                                                  // 0x0078(0x001C) ZeroConstructor, IsPlainOldData, NoDestructor, Protected
		unsigned char                                              UnknownData_UOG6[0x4];                                   // 0x0094(0x0004) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.Layer
	 * Size -> 0x0020 (FullSize[0x0048] - InheritedSize[0x0028])
	 */
	class ULayer : public UObject
	{
	public:
		class FName                                                LayerName;                                               // 0x0028(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              bIsVisible : 1;                                          // 0x0030(0x0001) BIT_FIELD NoDestructor
		unsigned char                                              UnknownData_EED6[0x7];                                   // 0x0031(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<struct FLayerActorStats>                            ActorStats;                                              // 0x0038(0x0010) ZeroConstructor, Transient

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.LevelStreaming
	 * Size -> 0x0128 (FullSize[0x0150] - InheritedSize[0x0028])
	 */
	class ULevelStreaming : public UObject
	{
	public:
		class FName                                                PackageName;                                             // 0x0028(0x0008) ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor
		TAssetPtr<class UWorld>                                    WorldAsset;                                              // 0x0030(0x001C) ELEMENT_SIZE_MISMATCH Edit, BlueprintVisible, BlueprintReadOnly, EditConst
		unsigned char                                              UnknownData_VMY2[0x4];                                   // 0x004C(0x0004) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY
		class FName                                                PackageNameToLoad;                                       // 0x0050(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor
		TArray<class FName>                                        LODPackageNames;                                         // 0x0058(0x0010) ZeroConstructor
		unsigned char                                              UnknownData_LPYS[0x18];                                  // 0x0068(0x0018) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct UObject_FTransform                                  LevelTransform;                                          // 0x0080(0x0030) Edit, BlueprintVisible, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_NL3O : 2;                                    // 0x00B0(0x0001) BIT_FIELD (PADDING)
		unsigned char                                              bShouldBeVisibleInEditor : 1;                            // 0x00B0(0x0001) BIT_FIELD NoDestructor
		unsigned char                                              bLocked : 1;                                             // 0x00B0(0x0001) BIT_FIELD NoDestructor
		unsigned char                                              bShouldBeLoaded : 1;                                     // 0x00B0(0x0001) BIT_FIELD BlueprintVisible, NoDestructor
		unsigned char                                              bshouldBeVisible : 1;                                    // 0x00B0(0x0001) BIT_FIELD BlueprintVisible, NoDestructor
		unsigned char                                              bShouldBlockOnLoad : 1;                                  // 0x00B0(0x0001) BIT_FIELD BlueprintVisible, NoDestructor
		unsigned char                                              bIsCriticalLoad : 1;                                     // 0x00B0(0x0001) BIT_FIELD BlueprintVisible, NoDestructor
		unsigned char                                              UnknownData_4MZQ : 1;                                    // 0x00B1(0x0001) BIT_FIELD (PADDING)
		unsigned char                                              bDrawOnLevelStatusMap : 1;                               // 0x00B1(0x0001) BIT_FIELD Edit, NoDestructor, AdvancedDisplay
		unsigned char                                              bLevelStreamingVisibilityOnly : 1;                       // 0x00B1(0x0001) BIT_FIELD BlueprintVisible, NoDestructor
		unsigned char                                              bLevelStreamingDesiredVisibility : 1;                    // 0x00B1(0x0001) BIT_FIELD BlueprintVisible, NoDestructor
		unsigned char                                              bForceStreamingStateChange : 1;                          // 0x00B1(0x0001) BIT_FIELD BlueprintVisible, NoDestructor
		unsigned char                                              UnknownData_XJKA[0x2];                                   // 0x00B2(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FColor                                              DrawColor;                                               // 0x00B4(0x0004) ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor
		struct FLinearColor                                        LevelColor;                                              // 0x00B8(0x0010) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		TArray<class ALevelStreamingVolume*>                       EditorStreamingVolumes;                                  // 0x00C8(0x0010) Edit, ZeroConstructor
		float                                                      MinTimeBetweenVolumeUnloadRequests;                      // 0x00D8(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay
		unsigned char                                              UnknownData_LKEF[0x4];                                   // 0x00DC(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class FString>                                      Keywords;                                                // 0x00E0(0x0010) ZeroConstructor
		unsigned char                                              UnknownData_PTIK[0x8];                                   // 0x00F0(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FScriptMulticastDelegate                             OnLevelLoaded;                                           // 0x00F8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable
		class FScriptMulticastDelegate                             OnLevelUnloaded;                                         // 0x0108(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable
		class FScriptMulticastDelegate                             OnLevelShown;                                            // 0x0118(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable
		class FScriptMulticastDelegate                             OnLevelHidden;                                           // 0x0128(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable
		bool                                                       bEnableTileStreaming;                                    // 0x0138(0x0001) ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_IWAN[0x7];                                   // 0x0139(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class ULevel*                                              LoadedLevel;                                             // 0x0140(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		class ULevel*                                              PendingUnloadLevel;                                      // 0x0148(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor

	public:
		void LevelStreamingVisibilityStatus__DelegateSignature();
		void LevelStreamingLoadedStatus__DelegateSignature();
		bool IsTileStreamingEnabled();
		bool IsLevelVisible();
		bool IsLevelLoaded();
		class ULevelStreaming* CreateInstance(const class FString& UniqueInstanceName);
		void BPSetLevelVisibility(bool bVisible, bool bIsLowMemory);
		class FString BPGetPackageName();
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.LevelStreamingAlwaysLoaded
	 * Size -> 0x0000 (FullSize[0x0150] - InheritedSize[0x0150])
	 */
	class ULevelStreamingAlwaysLoaded : public ULevelStreaming
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.LevelStreamingBounds
	 * Size -> 0x0000 (FullSize[0x0150] - InheritedSize[0x0150])
	 */
	class ULevelStreamingBounds : public ULevelStreaming
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.LevelStreamingKismet
	 * Size -> 0x0010 (FullSize[0x0160] - InheritedSize[0x0150])
	 */
	class ULevelStreamingKismet : public ULevelStreaming
	{
	public:
		unsigned char                                              bInitiallyLoaded : 1;                                    // 0x0150(0x0001) BIT_FIELD Edit, NoDestructor
		unsigned char                                              bInitiallyVisible : 1;                                   // 0x0150(0x0001) BIT_FIELD Edit, NoDestructor
		unsigned char                                              UnknownData_5MBK[0xF];                                   // 0x0151(0x000F) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.LevelStreamingPersistent
	 * Size -> 0x0000 (FullSize[0x0150] - InheritedSize[0x0150])
	 */
	class ULevelStreamingPersistent : public ULevelStreaming
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.LightmappedSurfaceCollection
	 * Size -> 0x0018 (FullSize[0x0040] - InheritedSize[0x0028])
	 */
	class ULightmappedSurfaceCollection : public UObject
	{
	public:
		class UModel*                                              SourceModel;                                             // 0x0028(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		TArray<int32_t>                                            Surfaces;                                                // 0x0030(0x0010) Edit, ZeroConstructor

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.LightmassPrimitiveSettingsObject
	 * Size -> 0x0018 (FullSize[0x0040] - InheritedSize[0x0028])
	 */
	class ULightmassPrimitiveSettingsObject : public UObject
	{
	public:
		struct FLightmassPrimitiveSettings                         LightmassSettings;                                       // 0x0028(0x0018) Edit

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.LocalMessage
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class ULocalMessage : public UObject
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.EngineMessage
	 * Size -> 0x0080 (FullSize[0x00A8] - InheritedSize[0x0028])
	 */
	class UEngineMessage : public ULocalMessage
	{
	public:
		class FString                                              FailedPlaceMessage;                                      // 0x0028(0x0010) BlueprintReadOnly, ZeroConstructor
		class FString                                              MaxedOutMessage;                                         // 0x0038(0x0010) BlueprintReadOnly, ZeroConstructor
		class FString                                              EnteredMessage;                                          // 0x0048(0x0010) BlueprintReadOnly, ZeroConstructor
		class FString                                              LeftMessage;                                             // 0x0058(0x0010) BlueprintReadOnly, ZeroConstructor
		class FString                                              GlobalNameChange;                                        // 0x0068(0x0010) BlueprintReadOnly, ZeroConstructor
		class FString                                              SpecEnteredMessage;                                      // 0x0078(0x0010) BlueprintReadOnly, ZeroConstructor
		class FString                                              NewPlayerMessage;                                        // 0x0088(0x0010) BlueprintReadOnly, ZeroConstructor
		class FString                                              NewSpecMessage;                                          // 0x0098(0x0010) BlueprintReadOnly, ZeroConstructor

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.MaterialExpression
	 * Size -> 0x0050 (FullSize[0x0078] - InheritedSize[0x0028])
	 */
	class UMaterialExpression : public UObject
	{
	public:
		unsigned char                                              bRealtimePreview : 1;                                    // 0x0028(0x0001) BIT_FIELD NoDestructor
		unsigned char                                              bNeedToUpdatePreview : 1;                                // 0x0028(0x0001) BIT_FIELD Transient, NoDestructor
		unsigned char                                              bIsParameterExpression : 1;                              // 0x0028(0x0001) BIT_FIELD NoDestructor
		unsigned char                                              UnknownData_XDCL[0x7];                                   // 0x0029(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UMaterial*                                           Material;                                                // 0x0030(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor
		class UMaterialFunction*                                   Function;                                                // 0x0038(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor
		class FString                                              Desc;                                                    // 0x0040(0x0010) Edit, ZeroConstructor
		struct FColor                                              BorderColor;                                             // 0x0050(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              bShowOutputNameOnPin : 1;                                // 0x0054(0x0001) BIT_FIELD NoDestructor
		unsigned char                                              bHidePreviewWindow : 1;                                  // 0x0054(0x0001) BIT_FIELD NoDestructor
		unsigned char                                              bCollapsed : 1;                                          // 0x0054(0x0001) BIT_FIELD NoDestructor
		unsigned char                                              bShaderInputData : 1;                                    // 0x0054(0x0001) BIT_FIELD NoDestructor
		unsigned char                                              bShowInputs : 1;                                         // 0x0054(0x0001) BIT_FIELD NoDestructor
		unsigned char                                              bShowOutputs : 1;                                        // 0x0054(0x0001) BIT_FIELD NoDestructor
		unsigned char                                              UnknownData_505Y[0x3];                                   // 0x0055(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class FString>                                      MenuCategories;                                          // 0x0058(0x0010) ZeroConstructor
		TArray<struct FExpressionOutput>                           Outputs;                                                 // 0x0068(0x0010) ZeroConstructor

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.MaterialExpressionAbs
	 * Size -> 0x0038 (FullSize[0x00B0] - InheritedSize[0x0078])
	 */
	class UMaterialExpressionAbs : public UMaterialExpression
	{
	public:
		struct FExpressionInput                                    Input;                                                   // 0x0078(0x0038) ZeroConstructor

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.MaterialExpressionActorPositionWS
	 * Size -> 0x0000 (FullSize[0x0078] - InheritedSize[0x0078])
	 */
	class UMaterialExpressionActorPositionWS : public UMaterialExpression
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.MaterialExpressionAdd
	 * Size -> 0x0078 (FullSize[0x00F0] - InheritedSize[0x0078])
	 */
	class UMaterialExpressionAdd : public UMaterialExpression
	{
	public:
		struct FExpressionInput                                    A;                                                       // 0x0078(0x0038) ZeroConstructor
		struct FExpressionInput                                    B;                                                       // 0x00B0(0x0038) ZeroConstructor
		float                                                      ConstA;                                                  // 0x00E8(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      ConstB;                                                  // 0x00EC(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.MaterialExpressionAppendVector
	 * Size -> 0x0070 (FullSize[0x00E8] - InheritedSize[0x0078])
	 */
	class UMaterialExpressionAppendVector : public UMaterialExpression
	{
	public:
		struct FExpressionInput                                    A;                                                       // 0x0078(0x0038) ZeroConstructor
		struct FExpressionInput                                    B;                                                       // 0x00B0(0x0038) ZeroConstructor

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.MaterialExpressionAtmosphericFogColor
	 * Size -> 0x0038 (FullSize[0x00B0] - InheritedSize[0x0078])
	 */
	class UMaterialExpressionAtmosphericFogColor : public UMaterialExpression
	{
	public:
		struct FExpressionInput                                    WorldPosition;                                           // 0x0078(0x0038) ZeroConstructor

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.MaterialExpressionBlackBody
	 * Size -> 0x0038 (FullSize[0x00B0] - InheritedSize[0x0078])
	 */
	class UMaterialExpressionBlackBody : public UMaterialExpression
	{
	public:
		struct FExpressionInput                                    Temp;                                                    // 0x0078(0x0038) ZeroConstructor

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.MaterialExpressionBreakMaterialAttributes
	 * Size -> 0x0078 (FullSize[0x00F0] - InheritedSize[0x0078])
	 */
	class UMaterialExpressionBreakMaterialAttributes : public UMaterialExpression
	{
	public:
		struct FExpressionInput                                    Struct;                                                  // 0x0078(0x0038) ZeroConstructor
		struct FMaterialAttributesInput                            MaterialAttributes;                                      // 0x00B0(0x0038) ZeroConstructor
		unsigned char                                              UnknownData_0GQY[0x8];                                   // 0x00E8(0x0008) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.MaterialExpressionBumpOffset
	 * Size -> 0x00B8 (FullSize[0x0130] - InheritedSize[0x0078])
	 */
	class UMaterialExpressionBumpOffset : public UMaterialExpression
	{
	public:
		struct FExpressionInput                                    Coordinate;                                              // 0x0078(0x0038) ZeroConstructor
		struct FExpressionInput                                    Height;                                                  // 0x00B0(0x0038) ZeroConstructor
		struct FExpressionInput                                    HeightRatioInput;                                        // 0x00E8(0x0038) ZeroConstructor
		float                                                      HeightRatio;                                             // 0x0120(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      ReferencePlane;                                          // 0x0124(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		uint32_t                                                   ConstCoordinate;                                         // 0x0128(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_8NXK[0x4];                                   // 0x012C(0x0004) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.MaterialExpressionCameraPositionWS
	 * Size -> 0x0000 (FullSize[0x0078] - InheritedSize[0x0078])
	 */
	class UMaterialExpressionCameraPositionWS : public UMaterialExpression
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.MaterialExpressionCameraVectorWS
	 * Size -> 0x0000 (FullSize[0x0078] - InheritedSize[0x0078])
	 */
	class UMaterialExpressionCameraVectorWS : public UMaterialExpression
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.MaterialExpressionCeil
	 * Size -> 0x0038 (FullSize[0x00B0] - InheritedSize[0x0078])
	 */
	class UMaterialExpressionCeil : public UMaterialExpression
	{
	public:
		struct FExpressionInput                                    Input;                                                   // 0x0078(0x0038) ZeroConstructor

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.MaterialExpressionClamp
	 * Size -> 0x00B8 (FullSize[0x0130] - InheritedSize[0x0078])
	 */
	class UMaterialExpressionClamp : public UMaterialExpression
	{
	public:
		struct FExpressionInput                                    Input;                                                   // 0x0078(0x0038) ZeroConstructor
		struct FExpressionInput                                    Min;                                                     // 0x00B0(0x0038) ZeroConstructor
		struct FExpressionInput                                    Max;                                                     // 0x00E8(0x0038) ZeroConstructor
		EClampMode                                                 ClampMode;                                               // 0x0120(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_2RNB[0x3];                                   // 0x0121(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      MinDefault;                                              // 0x0124(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      MaxDefault;                                              // 0x0128(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_Q9Z4[0x4];                                   // 0x012C(0x0004) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.MaterialExpressionCollectionParameter
	 * Size -> 0x0020 (FullSize[0x0098] - InheritedSize[0x0078])
	 */
	class UMaterialExpressionCollectionParameter : public UMaterialExpression
	{
	public:
		class UMaterialParameterCollection*                        Collection;                                              // 0x0078(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		class FName                                                ParameterName;                                           // 0x0080(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		struct FGuid                                               ParameterId;                                             // 0x0088(0x0010) ZeroConstructor

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.MaterialExpressionComment
	 * Size -> 0x0028 (FullSize[0x00A0] - InheritedSize[0x0078])
	 */
	class UMaterialExpressionComment : public UMaterialExpression
	{
	public:
		int32_t                                                    SizeX;                                                   // 0x0078(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor
		int32_t                                                    SizeY;                                                   // 0x007C(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor
		class FString                                              Text;                                                    // 0x0080(0x0010) Edit, ZeroConstructor
		struct FLinearColor                                        CommentColor;                                            // 0x0090(0x0010) Edit, ZeroConstructor, IsPlainOldData, NoDestructor

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.MaterialExpressionComponentMask
	 * Size -> 0x0040 (FullSize[0x00B8] - InheritedSize[0x0078])
	 */
	class UMaterialExpressionComponentMask : public UMaterialExpression
	{
	public:
		struct FExpressionInput                                    Input;                                                   // 0x0078(0x0038) ZeroConstructor
		unsigned char                                              R : 1;                                                   // 0x00B0(0x0001) BIT_FIELD Edit, NoDestructor
		unsigned char                                              G : 1;                                                   // 0x00B0(0x0001) BIT_FIELD Edit, NoDestructor
		unsigned char                                              B : 1;                                                   // 0x00B0(0x0001) BIT_FIELD Edit, NoDestructor
		unsigned char                                              A : 1;                                                   // 0x00B0(0x0001) BIT_FIELD Edit, NoDestructor
		unsigned char                                              UnknownData_L6FT[0x7];                                   // 0x00B1(0x0007) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.MaterialExpressionConstant
	 * Size -> 0x0008 (FullSize[0x0080] - InheritedSize[0x0078])
	 */
	class UMaterialExpressionConstant : public UMaterialExpression
	{
	public:
		float                                                      R;                                                       // 0x0078(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_7J80[0x4];                                   // 0x007C(0x0004) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.MaterialExpressionConstant2Vector
	 * Size -> 0x0008 (FullSize[0x0080] - InheritedSize[0x0078])
	 */
	class UMaterialExpressionConstant2Vector : public UMaterialExpression
	{
	public:
		float                                                      R;                                                       // 0x0078(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      G;                                                       // 0x007C(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.MaterialExpressionConstant3Vector
	 * Size -> 0x0020 (FullSize[0x0098] - InheritedSize[0x0078])
	 */
	class UMaterialExpressionConstant3Vector : public UMaterialExpression
	{
	public:
		float                                                      R;                                                       // 0x0078(0x0004) ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor
		float                                                      G;                                                       // 0x007C(0x0004) ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor
		float                                                      B;                                                       // 0x0080(0x0004) ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor
		struct FLinearColor                                        Constant;                                                // 0x0084(0x0010) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_5EVK[0x4];                                   // 0x0094(0x0004) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.MaterialExpressionConstant4Vector
	 * Size -> 0x0020 (FullSize[0x0098] - InheritedSize[0x0078])
	 */
	class UMaterialExpressionConstant4Vector : public UMaterialExpression
	{
	public:
		float                                                      R;                                                       // 0x0078(0x0004) ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor
		float                                                      G;                                                       // 0x007C(0x0004) ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor
		float                                                      B;                                                       // 0x0080(0x0004) ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor
		float                                                      A;                                                       // 0x0084(0x0004) ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor
		struct FLinearColor                                        Constant;                                                // 0x0088(0x0010) Edit, ZeroConstructor, IsPlainOldData, NoDestructor

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.MaterialExpressionConstantBiasScale
	 * Size -> 0x0040 (FullSize[0x00B8] - InheritedSize[0x0078])
	 */
	class UMaterialExpressionConstantBiasScale : public UMaterialExpression
	{
	public:
		struct FExpressionInput                                    Input;                                                   // 0x0078(0x0038) ZeroConstructor
		float                                                      Bias;                                                    // 0x00B0(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      Scale;                                                   // 0x00B4(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.MaterialExpressionCosine
	 * Size -> 0x0040 (FullSize[0x00B8] - InheritedSize[0x0078])
	 */
	class UMaterialExpressionCosine : public UMaterialExpression
	{
	public:
		struct FExpressionInput                                    Input;                                                   // 0x0078(0x0038) ZeroConstructor
		float                                                      Period;                                                  // 0x00B0(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_GKS6[0x4];                                   // 0x00B4(0x0004) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.MaterialExpressionCrossProduct
	 * Size -> 0x0070 (FullSize[0x00E8] - InheritedSize[0x0078])
	 */
	class UMaterialExpressionCrossProduct : public UMaterialExpression
	{
	public:
		struct FExpressionInput                                    A;                                                       // 0x0078(0x0038) ZeroConstructor
		struct FExpressionInput                                    B;                                                       // 0x00B0(0x0038) ZeroConstructor

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.MaterialExpressionCustom
	 * Size -> 0x0038 (FullSize[0x00B0] - InheritedSize[0x0078])
	 */
	class UMaterialExpressionCustom : public UMaterialExpression
	{
	public:
		class FString                                              Code;                                                    // 0x0078(0x0010) Edit, ZeroConstructor
		ECustomMaterialOutputType                                  OutputType;                                              // 0x0088(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_9JVB[0x7];                                   // 0x0089(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FString                                              Description;                                             // 0x0090(0x0010) Edit, ZeroConstructor
		TArray<struct FCustomInput>                                Inputs;                                                  // 0x00A0(0x0010) Edit, ZeroConstructor

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.MaterialExpressionCustomTexture
	 * Size -> 0x0008 (FullSize[0x0080] - InheritedSize[0x0078])
	 */
	class UMaterialExpressionCustomTexture : public UMaterialExpression
	{
	public:
		class UTexture*                                            Texture;                                                 // 0x0078(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.MaterialExpressionDDX
	 * Size -> 0x0038 (FullSize[0x00B0] - InheritedSize[0x0078])
	 */
	class UMaterialExpressionDDX : public UMaterialExpression
	{
	public:
		struct FExpressionInput                                    Value;                                                   // 0x0078(0x0038) ZeroConstructor

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.MaterialExpressionDDY
	 * Size -> 0x0038 (FullSize[0x00B0] - InheritedSize[0x0078])
	 */
	class UMaterialExpressionDDY : public UMaterialExpression
	{
	public:
		struct FExpressionInput                                    Value;                                                   // 0x0078(0x0038) ZeroConstructor

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.MaterialExpressionDepthFade
	 * Size -> 0x0078 (FullSize[0x00F0] - InheritedSize[0x0078])
	 */
	class UMaterialExpressionDepthFade : public UMaterialExpression
	{
	public:
		struct FExpressionInput                                    InOpacity;                                               // 0x0078(0x0038) ZeroConstructor
		struct FExpressionInput                                    FadeDistance;                                            // 0x00B0(0x0038) ZeroConstructor
		float                                                      OpacityDefault;                                          // 0x00E8(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      FadeDistanceDefault;                                     // 0x00EC(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.MaterialExpressionDepthOfFieldFunction
	 * Size -> 0x0040 (FullSize[0x00B8] - InheritedSize[0x0078])
	 */
	class UMaterialExpressionDepthOfFieldFunction : public UMaterialExpression
	{
	public:
		EDepthOfFieldFunctionValue                                 FunctionValue;                                           // 0x0078(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_97EP[0x7];                                   // 0x0079(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FExpressionInput                                    Depth;                                                   // 0x0080(0x0038) ZeroConstructor

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.MaterialExpressionDeriveNormalZ
	 * Size -> 0x0038 (FullSize[0x00B0] - InheritedSize[0x0078])
	 */
	class UMaterialExpressionDeriveNormalZ : public UMaterialExpression
	{
	public:
		struct FExpressionInput                                    InXY;                                                    // 0x0078(0x0038) ZeroConstructor

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.MaterialExpressionDesaturation
	 * Size -> 0x0080 (FullSize[0x00F8] - InheritedSize[0x0078])
	 */
	class UMaterialExpressionDesaturation : public UMaterialExpression
	{
	public:
		struct FExpressionInput                                    Input;                                                   // 0x0078(0x0038) ZeroConstructor
		struct FExpressionInput                                    Fraction;                                                // 0x00B0(0x0038) ZeroConstructor
		struct FLinearColor                                        LuminanceFactors;                                        // 0x00E8(0x0010) Edit, ZeroConstructor, IsPlainOldData, NoDestructor

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.MaterialExpressionDistance
	 * Size -> 0x0070 (FullSize[0x00E8] - InheritedSize[0x0078])
	 */
	class UMaterialExpressionDistance : public UMaterialExpression
	{
	public:
		struct FExpressionInput                                    A;                                                       // 0x0078(0x0038) ZeroConstructor
		struct FExpressionInput                                    B;                                                       // 0x00B0(0x0038) ZeroConstructor

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.MaterialExpressionDistanceCullFade
	 * Size -> 0x0000 (FullSize[0x0078] - InheritedSize[0x0078])
	 */
	class UMaterialExpressionDistanceCullFade : public UMaterialExpression
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.MaterialExpressionDistanceFieldGradient
	 * Size -> 0x0038 (FullSize[0x00B0] - InheritedSize[0x0078])
	 */
	class UMaterialExpressionDistanceFieldGradient : public UMaterialExpression
	{
	public:
		struct FExpressionInput                                    Position;                                                // 0x0078(0x0038) ZeroConstructor

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.MaterialExpressionDistanceToNearestSurface
	 * Size -> 0x0038 (FullSize[0x00B0] - InheritedSize[0x0078])
	 */
	class UMaterialExpressionDistanceToNearestSurface : public UMaterialExpression
	{
	public:
		struct FExpressionInput                                    Position;                                                // 0x0078(0x0038) ZeroConstructor

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.MaterialExpressionDivide
	 * Size -> 0x0078 (FullSize[0x00F0] - InheritedSize[0x0078])
	 */
	class UMaterialExpressionDivide : public UMaterialExpression
	{
	public:
		struct FExpressionInput                                    A;                                                       // 0x0078(0x0038) ZeroConstructor
		struct FExpressionInput                                    B;                                                       // 0x00B0(0x0038) ZeroConstructor
		float                                                      ConstA;                                                  // 0x00E8(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      ConstB;                                                  // 0x00EC(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.MaterialExpressionDotProduct
	 * Size -> 0x0070 (FullSize[0x00E8] - InheritedSize[0x0078])
	 */
	class UMaterialExpressionDotProduct : public UMaterialExpression
	{
	public:
		struct FExpressionInput                                    A;                                                       // 0x0078(0x0038) ZeroConstructor
		struct FExpressionInput                                    B;                                                       // 0x00B0(0x0038) ZeroConstructor

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.MaterialExpressionDynamicParameter
	 * Size -> 0x0010 (FullSize[0x0088] - InheritedSize[0x0078])
	 */
	class UMaterialExpressionDynamicParameter : public UMaterialExpression
	{
	public:
		TArray<class FString>                                      ParamNames;                                              // 0x0078(0x0010) Edit, EditFixedSize, ZeroConstructor

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.MaterialExpressionEyeAdaptation
	 * Size -> 0x0000 (FullSize[0x0078] - InheritedSize[0x0078])
	 */
	class UMaterialExpressionEyeAdaptation : public UMaterialExpression
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.MaterialExpressionFeatureLevelSwitch
	 * Size -> 0x0118 (FullSize[0x0190] - InheritedSize[0x0078])
	 */
	class UMaterialExpressionFeatureLevelSwitch : public UMaterialExpression
	{
	public:
		struct FExpressionInput                                    Default;                                                 // 0x0078(0x0038) ZeroConstructor
		struct FExpressionInput                                    Inputs[0x4];                                             // 0x00B0(0x00E0) ZeroConstructor

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.MaterialExpressionFloor
	 * Size -> 0x0038 (FullSize[0x00B0] - InheritedSize[0x0078])
	 */
	class UMaterialExpressionFloor : public UMaterialExpression
	{
	public:
		struct FExpressionInput                                    Input;                                                   // 0x0078(0x0038) ZeroConstructor

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.MaterialExpressionFmod
	 * Size -> 0x0070 (FullSize[0x00E8] - InheritedSize[0x0078])
	 */
	class UMaterialExpressionFmod : public UMaterialExpression
	{
	public:
		struct FExpressionInput                                    A;                                                       // 0x0078(0x0038) ZeroConstructor
		struct FExpressionInput                                    B;                                                       // 0x00B0(0x0038) ZeroConstructor

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.MaterialExpressionFontSample
	 * Size -> 0x0010 (FullSize[0x0088] - InheritedSize[0x0078])
	 */
	class UMaterialExpressionFontSample : public UMaterialExpression
	{
	public:
		class UFont*                                               Font;                                                    // 0x0078(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		int32_t                                                    FontTexturePage;                                         // 0x0080(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_VI2Q[0x4];                                   // 0x0084(0x0004) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.MaterialExpressionFontSampleParameter
	 * Size -> 0x0020 (FullSize[0x00A8] - InheritedSize[0x0088])
	 */
	class UMaterialExpressionFontSampleParameter : public UMaterialExpressionFontSample
	{
	public:
		class FName                                                ParameterName;                                           // 0x0088(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		struct FGuid                                               ExpressionGUID;                                          // 0x0090(0x0010) ZeroConstructor
		class FName                                                Group;                                                   // 0x00A0(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.MaterialExpressionFrac
	 * Size -> 0x0038 (FullSize[0x00B0] - InheritedSize[0x0078])
	 */
	class UMaterialExpressionFrac : public UMaterialExpression
	{
	public:
		struct FExpressionInput                                    Input;                                                   // 0x0078(0x0038) ZeroConstructor

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.MaterialExpressionFresnel
	 * Size -> 0x00B8 (FullSize[0x0130] - InheritedSize[0x0078])
	 */
	class UMaterialExpressionFresnel : public UMaterialExpression
	{
	public:
		struct FExpressionInput                                    ExponentIn;                                              // 0x0078(0x0038) ZeroConstructor
		float                                                      Exponent;                                                // 0x00B0(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_GIOR[0x4];                                   // 0x00B4(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FExpressionInput                                    BaseReflectFractionIn;                                   // 0x00B8(0x0038) ZeroConstructor
		float                                                      BaseReflectFraction;                                     // 0x00F0(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_H4M3[0x4];                                   // 0x00F4(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FExpressionInput                                    Normal;                                                  // 0x00F8(0x0038) ZeroConstructor

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.MaterialExpressionFunctionInput
	 * Size -> 0x0098 (FullSize[0x0110] - InheritedSize[0x0078])
	 */
	class UMaterialExpressionFunctionInput : public UMaterialExpression
	{
	public:
		struct FExpressionInput                                    Preview;                                                 // 0x0078(0x0038) ZeroConstructor
		class FString                                              InputName;                                               // 0x00B0(0x0010) Edit, ZeroConstructor
		class FString                                              Description;                                             // 0x00C0(0x0010) Edit, ZeroConstructor
		struct FGuid                                               ID;                                                      // 0x00D0(0x0010) ZeroConstructor
		EFunctionInputType                                         inputType;                                               // 0x00E0(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_HLJW[0xF];                                   // 0x00E1(0x000F) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FVector4                                            PreviewValue;                                            // 0x00F0(0x0010) Edit, ZeroConstructor
		unsigned char                                              bUsePreviewValueAsDefault : 1;                           // 0x0100(0x0001) BIT_FIELD Edit, NoDestructor
		unsigned char                                              UnknownData_W65J[0x3];                                   // 0x0101(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int32_t                                                    SortPriority;                                            // 0x0104(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              bCompilingFunctionPreview : 1;                           // 0x0108(0x0001) BIT_FIELD Transient, NoDestructor
		unsigned char                                              UnknownData_9KN8[0x7];                                   // 0x0109(0x0007) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.MaterialExpressionFunctionOutput
	 * Size -> 0x0078 (FullSize[0x00F0] - InheritedSize[0x0078])
	 */
	class UMaterialExpressionFunctionOutput : public UMaterialExpression
	{
	public:
		class FString                                              OutputName;                                              // 0x0078(0x0010) Edit, ZeroConstructor
		class FString                                              Description;                                             // 0x0088(0x0010) Edit, ZeroConstructor
		int32_t                                                    SortPriority;                                            // 0x0098(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_5B9J[0x4];                                   // 0x009C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FExpressionInput                                    A;                                                       // 0x00A0(0x0038) ZeroConstructor
		unsigned char                                              bLastPreviewed : 1;                                      // 0x00D8(0x0001) BIT_FIELD NoDestructor
		unsigned char                                              UnknownData_M7FE[0x3];                                   // 0x00D9(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FGuid                                               ID;                                                      // 0x00DC(0x0010) ZeroConstructor
		unsigned char                                              UnknownData_BCLI[0x4];                                   // 0x00EC(0x0004) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.MaterialExpressionGIReplace
	 * Size -> 0x00A8 (FullSize[0x0120] - InheritedSize[0x0078])
	 */
	class UMaterialExpressionGIReplace : public UMaterialExpression
	{
	public:
		struct FExpressionInput                                    Default;                                                 // 0x0078(0x0038) ZeroConstructor
		struct FExpressionInput                                    StaticIndirect;                                          // 0x00B0(0x0038) ZeroConstructor
		struct FExpressionInput                                    DynamicIndirect;                                         // 0x00E8(0x0038) ZeroConstructor

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.MaterialExpressionIf
	 * Size -> 0x0128 (FullSize[0x01A0] - InheritedSize[0x0078])
	 */
	class UMaterialExpressionIf : public UMaterialExpression
	{
	public:
		struct FExpressionInput                                    A;                                                       // 0x0078(0x0038) ZeroConstructor
		struct FExpressionInput                                    B;                                                       // 0x00B0(0x0038) ZeroConstructor
		struct FExpressionInput                                    AGreaterThanB;                                           // 0x00E8(0x0038) ZeroConstructor
		struct FExpressionInput                                    AEqualsB;                                                // 0x0120(0x0038) ZeroConstructor
		struct FExpressionInput                                    ALessThanB;                                              // 0x0158(0x0038) ZeroConstructor
		float                                                      EqualsThreshold;                                         // 0x0190(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      ConstB;                                                  // 0x0194(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      ConstAEqualsB;                                           // 0x0198(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_HH58[0x4];                                   // 0x019C(0x0004) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.MaterialExpressionLandscapeLayerBlend
	 * Size -> 0x0020 (FullSize[0x0098] - InheritedSize[0x0078])
	 */
	class UMaterialExpressionLandscapeLayerBlend : public UMaterialExpression
	{
	public:
		TArray<struct FLayerBlendInput>                            Layers;                                                  // 0x0078(0x0010) Edit, ZeroConstructor
		struct FGuid                                               ExpressionGUID;                                          // 0x0088(0x0010) ZeroConstructor

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.MaterialExpressionLandscapeLayerCoords
	 * Size -> 0x0018 (FullSize[0x0090] - InheritedSize[0x0078])
	 */
	class UMaterialExpressionLandscapeLayerCoords : public UMaterialExpression
	{
	public:
		ETerrainCoordMappingType                                   MappingType;                                             // 0x0078(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		ELandscapeCustomizedCoordType                              CustomUVType;                                            // 0x0079(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_FHWJ[0x2];                                   // 0x007A(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      MappingScale;                                            // 0x007C(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      MappingRotation;                                         // 0x0080(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      MappingPanU;                                             // 0x0084(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      MappingPanV;                                             // 0x0088(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_V3S2[0x4];                                   // 0x008C(0x0004) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.MaterialExpressionLandscapeLayerSample
	 * Size -> 0x0020 (FullSize[0x0098] - InheritedSize[0x0078])
	 */
	class UMaterialExpressionLandscapeLayerSample : public UMaterialExpression
	{
	public:
		class FName                                                ParameterName;                                           // 0x0078(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      PreviewWeight;                                           // 0x0080(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		struct FGuid                                               ExpressionGUID;                                          // 0x0084(0x0010) ZeroConstructor
		unsigned char                                              UnknownData_L5M7[0x4];                                   // 0x0094(0x0004) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.MaterialExpressionLandscapeLayerSwitch
	 * Size -> 0x0090 (FullSize[0x0108] - InheritedSize[0x0078])
	 */
	class UMaterialExpressionLandscapeLayerSwitch : public UMaterialExpression
	{
	public:
		struct FExpressionInput                                    LayerUsed;                                               // 0x0078(0x0038) ZeroConstructor
		struct FExpressionInput                                    LayerNotUsed;                                            // 0x00B0(0x0038) ZeroConstructor
		class FName                                                ParameterName;                                           // 0x00E8(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              PreviewUsed : 1;                                         // 0x00F0(0x0001) BIT_FIELD Edit, NoDestructor
		unsigned char                                              UnknownData_4EI3[0x3];                                   // 0x00F1(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FGuid                                               ExpressionGUID;                                          // 0x00F4(0x0010) ZeroConstructor
		unsigned char                                              UnknownData_0JCT[0x4];                                   // 0x0104(0x0004) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.MaterialExpressionLandscapeLayerWeight
	 * Size -> 0x0098 (FullSize[0x0110] - InheritedSize[0x0078])
	 */
	class UMaterialExpressionLandscapeLayerWeight : public UMaterialExpression
	{
	public:
		struct FExpressionInput                                    Base;                                                    // 0x0078(0x0038) ZeroConstructor
		struct FExpressionInput                                    Layer;                                                   // 0x00B0(0x0038) ZeroConstructor
		class FName                                                ParameterName;                                           // 0x00E8(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      PreviewWeight;                                           // 0x00F0(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		struct FVector                                             ConstBase;                                               // 0x00F4(0x000C) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		struct FGuid                                               ExpressionGUID;                                          // 0x0100(0x0010) ZeroConstructor

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.MaterialExpressionLandscapeVisibilityMask
	 * Size -> 0x0010 (FullSize[0x0088] - InheritedSize[0x0078])
	 */
	class UMaterialExpressionLandscapeVisibilityMask : public UMaterialExpression
	{
	public:
		struct FGuid                                               ExpressionGUID;                                          // 0x0078(0x0010) ZeroConstructor

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.MaterialExpressionLightmapUVs
	 * Size -> 0x0000 (FullSize[0x0078] - InheritedSize[0x0078])
	 */
	class UMaterialExpressionLightmapUVs : public UMaterialExpression
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.MaterialExpressionLightmassReplace
	 * Size -> 0x0070 (FullSize[0x00E8] - InheritedSize[0x0078])
	 */
	class UMaterialExpressionLightmassReplace : public UMaterialExpression
	{
	public:
		struct FExpressionInput                                    Realtime;                                                // 0x0078(0x0038) ZeroConstructor
		struct FExpressionInput                                    Lightmass;                                               // 0x00B0(0x0038) ZeroConstructor

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.MaterialExpressionLightVector
	 * Size -> 0x0000 (FullSize[0x0078] - InheritedSize[0x0078])
	 */
	class UMaterialExpressionLightVector : public UMaterialExpression
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.MaterialExpressionLinearInterpolate
	 * Size -> 0x00B8 (FullSize[0x0130] - InheritedSize[0x0078])
	 */
	class UMaterialExpressionLinearInterpolate : public UMaterialExpression
	{
	public:
		struct FExpressionInput                                    A;                                                       // 0x0078(0x0038) ZeroConstructor
		struct FExpressionInput                                    B;                                                       // 0x00B0(0x0038) ZeroConstructor
		struct FExpressionInput                                    Alpha;                                                   // 0x00E8(0x0038) ZeroConstructor
		float                                                      ConstA;                                                  // 0x0120(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      ConstB;                                                  // 0x0124(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      ConstAlpha;                                              // 0x0128(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_Z7IQ[0x4];                                   // 0x012C(0x0004) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.MaterialExpressionMakeMaterialAttributes
	 * Size -> 0x05E8 (FullSize[0x0660] - InheritedSize[0x0078])
	 */
	class UMaterialExpressionMakeMaterialAttributes : public UMaterialExpression
	{
	public:
		struct FExpressionInput                                    BaseColor;                                               // 0x0078(0x0038) ZeroConstructor
		struct FExpressionInput                                    Metallic;                                                // 0x00B0(0x0038) ZeroConstructor
		struct FExpressionInput                                    Specular;                                                // 0x00E8(0x0038) ZeroConstructor
		struct FExpressionInput                                    Roughness;                                               // 0x0120(0x0038) ZeroConstructor
		struct FExpressionInput                                    EmissiveColor;                                           // 0x0158(0x0038) ZeroConstructor
		struct FExpressionInput                                    Opacity;                                                 // 0x0190(0x0038) ZeroConstructor
		struct FExpressionInput                                    OpacityMask;                                             // 0x01C8(0x0038) ZeroConstructor
		struct FExpressionInput                                    Normal;                                                  // 0x0200(0x0038) ZeroConstructor
		struct FExpressionInput                                    WorldPositionOffset;                                     // 0x0238(0x0038) ZeroConstructor
		struct FExpressionInput                                    WorldDisplacement;                                       // 0x0270(0x0038) ZeroConstructor
		struct FExpressionInput                                    TessellationMultiplier;                                  // 0x02A8(0x0038) ZeroConstructor
		struct FExpressionInput                                    SubsurfaceColor;                                         // 0x02E0(0x0038) ZeroConstructor
		struct FExpressionInput                                    ClearCoat;                                               // 0x0318(0x0038) ZeroConstructor
		struct FExpressionInput                                    ClearCoatRoughness;                                      // 0x0350(0x0038) ZeroConstructor
		struct FExpressionInput                                    AmbientOcclusion;                                        // 0x0388(0x0038) ZeroConstructor
		struct FExpressionInput                                    Refraction;                                              // 0x03C0(0x0038) ZeroConstructor
		struct FExpressionInput                                    SSAOIntensity;                                           // 0x03F8(0x0038) ZeroConstructor
		struct FExpressionInput                                    SSAOInfluence;                                           // 0x0430(0x0038) ZeroConstructor
		struct FExpressionInput                                    SSAOLightInfluence;                                      // 0x0468(0x0038) ZeroConstructor
		struct FExpressionInput                                    CustomizedUVs[0x8];                                      // 0x04A0(0x01C0) ZeroConstructor

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.MaterialExpressionMaterialFunctionCall
	 * Size -> 0x0028 (FullSize[0x00A0] - InheritedSize[0x0078])
	 */
	class UMaterialExpressionMaterialFunctionCall : public UMaterialExpression
	{
	public:
		class UMaterialFunction*                                   MaterialFunction;                                        // 0x0078(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		TArray<struct FFunctionExpressionInput>                    FunctionInputs;                                          // 0x0080(0x0010) ZeroConstructor
		TArray<struct FFunctionExpressionOutput>                   FunctionOutputs;                                         // 0x0090(0x0010) ZeroConstructor

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.MaterialExpressionMax
	 * Size -> 0x0078 (FullSize[0x00F0] - InheritedSize[0x0078])
	 */
	class UMaterialExpressionMax : public UMaterialExpression
	{
	public:
		struct FExpressionInput                                    A;                                                       // 0x0078(0x0038) ZeroConstructor
		struct FExpressionInput                                    B;                                                       // 0x00B0(0x0038) ZeroConstructor
		float                                                      ConstA;                                                  // 0x00E8(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      ConstB;                                                  // 0x00EC(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.MaterialExpressionMin
	 * Size -> 0x0078 (FullSize[0x00F0] - InheritedSize[0x0078])
	 */
	class UMaterialExpressionMin : public UMaterialExpression
	{
	public:
		struct FExpressionInput                                    A;                                                       // 0x0078(0x0038) ZeroConstructor
		struct FExpressionInput                                    B;                                                       // 0x00B0(0x0038) ZeroConstructor
		float                                                      ConstA;                                                  // 0x00E8(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      ConstB;                                                  // 0x00EC(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.MaterialExpressionMultiply
	 * Size -> 0x0078 (FullSize[0x00F0] - InheritedSize[0x0078])
	 */
	class UMaterialExpressionMultiply : public UMaterialExpression
	{
	public:
		struct FExpressionInput                                    A;                                                       // 0x0078(0x0038) ZeroConstructor
		struct FExpressionInput                                    B;                                                       // 0x00B0(0x0038) ZeroConstructor
		float                                                      ConstA;                                                  // 0x00E8(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      ConstB;                                                  // 0x00EC(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.MaterialExpressionNoise
	 * Size -> 0x0090 (FullSize[0x0108] - InheritedSize[0x0078])
	 */
	class UMaterialExpressionNoise : public UMaterialExpression
	{
	public:
		struct FExpressionInput                                    Position;                                                // 0x0078(0x0038) ZeroConstructor
		struct FExpressionInput                                    FilterWidth;                                             // 0x00B0(0x0038) ZeroConstructor
		float                                                      Scale;                                                   // 0x00E8(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		int32_t                                                    Quality;                                                 // 0x00EC(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		ENoiseFunction                                             NoiseFunction;                                           // 0x00F0(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_3A91[0x3];                                   // 0x00F1(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		unsigned char                                              bTurbulence : 1;                                         // 0x00F4(0x0001) BIT_FIELD Edit, NoDestructor
		unsigned char                                              UnknownData_DVRJ[0x3];                                   // 0x00F5(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int32_t                                                    Levels;                                                  // 0x00F8(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      OutputMin;                                               // 0x00FC(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      OutputMax;                                               // 0x0100(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      LevelScale;                                              // 0x0104(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.MaterialExpressionNormalize
	 * Size -> 0x0038 (FullSize[0x00B0] - InheritedSize[0x0078])
	 */
	class UMaterialExpressionNormalize : public UMaterialExpression
	{
	public:
		struct FExpressionInput                                    VectorInput;                                             // 0x0078(0x0038) ZeroConstructor

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.MaterialExpressionObjectBounds
	 * Size -> 0x0000 (FullSize[0x0078] - InheritedSize[0x0078])
	 */
	class UMaterialExpressionObjectBounds : public UMaterialExpression
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.MaterialExpressionObjectId
	 * Size -> 0x0000 (FullSize[0x0078] - InheritedSize[0x0078])
	 */
	class UMaterialExpressionObjectId : public UMaterialExpression
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.MaterialExpressionObjectOrientation
	 * Size -> 0x0000 (FullSize[0x0078] - InheritedSize[0x0078])
	 */
	class UMaterialExpressionObjectOrientation : public UMaterialExpression
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.MaterialExpressionObjectPositionWS
	 * Size -> 0x0000 (FullSize[0x0078] - InheritedSize[0x0078])
	 */
	class UMaterialExpressionObjectPositionWS : public UMaterialExpression
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.MaterialExpressionObjectRadius
	 * Size -> 0x0000 (FullSize[0x0078] - InheritedSize[0x0078])
	 */
	class UMaterialExpressionObjectRadius : public UMaterialExpression
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.MaterialExpressionOneMinus
	 * Size -> 0x0038 (FullSize[0x00B0] - InheritedSize[0x0078])
	 */
	class UMaterialExpressionOneMinus : public UMaterialExpression
	{
	public:
		struct FExpressionInput                                    Input;                                                   // 0x0078(0x0038) ZeroConstructor

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.MaterialExpressionPanner
	 * Size -> 0x0080 (FullSize[0x00F8] - InheritedSize[0x0078])
	 */
	class UMaterialExpressionPanner : public UMaterialExpression
	{
	public:
		struct FExpressionInput                                    Coordinate;                                              // 0x0078(0x0038) ZeroConstructor
		struct FExpressionInput                                    Time;                                                    // 0x00B0(0x0038) ZeroConstructor
		float                                                      SpeedX;                                                  // 0x00E8(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      SpeedY;                                                  // 0x00EC(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		uint32_t                                                   ConstCoordinate;                                         // 0x00F0(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		bool                                                       bFractionalPart;                                         // 0x00F4(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_WUFR[0x3];                                   // 0x00F5(0x0003) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.MaterialExpressionParameter
	 * Size -> 0x0020 (FullSize[0x0098] - InheritedSize[0x0078])
	 */
	class UMaterialExpressionParameter : public UMaterialExpression
	{
	public:
		class FName                                                ParameterName;                                           // 0x0078(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		struct FGuid                                               ExpressionGUID;                                          // 0x0080(0x0010) ZeroConstructor
		class FName                                                Group;                                                   // 0x0090(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.MaterialExpressionScalarParameter
	 * Size -> 0x0008 (FullSize[0x00A0] - InheritedSize[0x0098])
	 */
	class UMaterialExpressionScalarParameter : public UMaterialExpressionParameter
	{
	public:
		float                                                      DefaultValue;                                            // 0x0098(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_RBG9[0x4];                                   // 0x009C(0x0004) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.MaterialExpressionStaticBoolParameter
	 * Size -> 0x0008 (FullSize[0x00A0] - InheritedSize[0x0098])
	 */
	class UMaterialExpressionStaticBoolParameter : public UMaterialExpressionParameter
	{
	public:
		unsigned char                                              DefaultValue : 1;                                        // 0x0098(0x0001) BIT_FIELD Edit, NoDestructor
		unsigned char                                              UnknownData_GCVJ[0x7];                                   // 0x0099(0x0007) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.MaterialExpressionStaticSwitchParameter
	 * Size -> 0x0070 (FullSize[0x0110] - InheritedSize[0x00A0])
	 */
	class UMaterialExpressionStaticSwitchParameter : public UMaterialExpressionStaticBoolParameter
	{
	public:
		struct FExpressionInput                                    A;                                                       // 0x00A0(0x0038) ZeroConstructor
		struct FExpressionInput                                    B;                                                       // 0x00D8(0x0038) ZeroConstructor

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.MaterialExpressionStaticComponentMaskParameter
	 * Size -> 0x0040 (FullSize[0x00D8] - InheritedSize[0x0098])
	 */
	class UMaterialExpressionStaticComponentMaskParameter : public UMaterialExpressionParameter
	{
	public:
		struct FExpressionInput                                    Input;                                                   // 0x0098(0x0038) ZeroConstructor
		unsigned char                                              DefaultR : 1;                                            // 0x00D0(0x0001) BIT_FIELD Edit, NoDestructor
		unsigned char                                              DefaultG : 1;                                            // 0x00D0(0x0001) BIT_FIELD Edit, NoDestructor
		unsigned char                                              DefaultB : 1;                                            // 0x00D0(0x0001) BIT_FIELD Edit, NoDestructor
		unsigned char                                              DefaultA : 1;                                            // 0x00D0(0x0001) BIT_FIELD Edit, NoDestructor
		unsigned char                                              UnknownData_JMSX[0x7];                                   // 0x00D1(0x0007) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.MaterialExpressionVectorParameter
	 * Size -> 0x0010 (FullSize[0x00A8] - InheritedSize[0x0098])
	 */
	class UMaterialExpressionVectorParameter : public UMaterialExpressionParameter
	{
	public:
		struct FLinearColor                                        DefaultValue;                                            // 0x0098(0x0010) Edit, ZeroConstructor, IsPlainOldData, NoDestructor

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.MaterialExpressionParticleColor
	 * Size -> 0x0000 (FullSize[0x0078] - InheritedSize[0x0078])
	 */
	class UMaterialExpressionParticleColor : public UMaterialExpression
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.MaterialExpressionParticleDirection
	 * Size -> 0x0000 (FullSize[0x0078] - InheritedSize[0x0078])
	 */
	class UMaterialExpressionParticleDirection : public UMaterialExpression
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.MaterialExpressionParticleMacroUV
	 * Size -> 0x0000 (FullSize[0x0078] - InheritedSize[0x0078])
	 */
	class UMaterialExpressionParticleMacroUV : public UMaterialExpression
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.MaterialExpressionParticleMotionBlurFade
	 * Size -> 0x0000 (FullSize[0x0078] - InheritedSize[0x0078])
	 */
	class UMaterialExpressionParticleMotionBlurFade : public UMaterialExpression
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.MaterialExpressionParticlePositionWS
	 * Size -> 0x0000 (FullSize[0x0078] - InheritedSize[0x0078])
	 */
	class UMaterialExpressionParticlePositionWS : public UMaterialExpression
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.MaterialExpressionParticleRadius
	 * Size -> 0x0000 (FullSize[0x0078] - InheritedSize[0x0078])
	 */
	class UMaterialExpressionParticleRadius : public UMaterialExpression
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.MaterialExpressionParticleRelativeTime
	 * Size -> 0x0000 (FullSize[0x0078] - InheritedSize[0x0078])
	 */
	class UMaterialExpressionParticleRelativeTime : public UMaterialExpression
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.MaterialExpressionParticleSize
	 * Size -> 0x0000 (FullSize[0x0078] - InheritedSize[0x0078])
	 */
	class UMaterialExpressionParticleSize : public UMaterialExpression
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.MaterialExpressionParticleSpeed
	 * Size -> 0x0000 (FullSize[0x0078] - InheritedSize[0x0078])
	 */
	class UMaterialExpressionParticleSpeed : public UMaterialExpression
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.MaterialExpressionPerInstanceFadeAmount
	 * Size -> 0x0000 (FullSize[0x0078] - InheritedSize[0x0078])
	 */
	class UMaterialExpressionPerInstanceFadeAmount : public UMaterialExpression
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.MaterialExpressionPerInstanceRandom
	 * Size -> 0x0000 (FullSize[0x0078] - InheritedSize[0x0078])
	 */
	class UMaterialExpressionPerInstanceRandom : public UMaterialExpression
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.MaterialExpressionPixelDepth
	 * Size -> 0x0000 (FullSize[0x0078] - InheritedSize[0x0078])
	 */
	class UMaterialExpressionPixelDepth : public UMaterialExpression
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.MaterialExpressionPixelNormalWS
	 * Size -> 0x0000 (FullSize[0x0078] - InheritedSize[0x0078])
	 */
	class UMaterialExpressionPixelNormalWS : public UMaterialExpression
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.MaterialExpressionPlatformSwitch
	 * Size -> 0x0658 (FullSize[0x06D0] - InheritedSize[0x0078])
	 */
	class UMaterialExpressionPlatformSwitch : public UMaterialExpression
	{
	public:
		struct FExpressionInput                                    Default;                                                 // 0x0078(0x0038) ZeroConstructor
		struct FExpressionInput                                    Inputs[0x1C];                                            // 0x00B0(0x0620) ZeroConstructor

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.MaterialExpressionPower
	 * Size -> 0x0078 (FullSize[0x00F0] - InheritedSize[0x0078])
	 */
	class UMaterialExpressionPower : public UMaterialExpression
	{
	public:
		struct FExpressionInput                                    Base;                                                    // 0x0078(0x0038) ZeroConstructor
		struct FExpressionInput                                    Exponent;                                                // 0x00B0(0x0038) ZeroConstructor
		float                                                      ConstExponent;                                           // 0x00E8(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_CZ0S[0x4];                                   // 0x00EC(0x0004) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.MaterialExpressionPreSkinnedNormal
	 * Size -> 0x0000 (FullSize[0x0078] - InheritedSize[0x0078])
	 */
	class UMaterialExpressionPreSkinnedNormal : public UMaterialExpression
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.MaterialExpressionPreSkinnedPosition
	 * Size -> 0x0000 (FullSize[0x0078] - InheritedSize[0x0078])
	 */
	class UMaterialExpressionPreSkinnedPosition : public UMaterialExpression
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.MaterialExpressionQualitySwitch
	 * Size -> 0x00A8 (FullSize[0x0120] - InheritedSize[0x0078])
	 */
	class UMaterialExpressionQualitySwitch : public UMaterialExpression
	{
	public:
		struct FExpressionInput                                    Default;                                                 // 0x0078(0x0038) ZeroConstructor
		struct FExpressionInput                                    Inputs[0x2];                                             // 0x00B0(0x0070) ZeroConstructor

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.MaterialExpressionReflectionVectorWS
	 * Size -> 0x0040 (FullSize[0x00B8] - InheritedSize[0x0078])
	 */
	class UMaterialExpressionReflectionVectorWS : public UMaterialExpression
	{
	public:
		struct FExpressionInput                                    CustomWorldNormal;                                       // 0x0078(0x0038) ZeroConstructor
		unsigned char                                              bNormalizeCustomWorldNormal : 1;                         // 0x00B0(0x0001) BIT_FIELD Edit, NoDestructor
		unsigned char                                              UnknownData_6RXP[0x7];                                   // 0x00B1(0x0007) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.MaterialExpressionRotateAboutAxis
	 * Size -> 0x00E8 (FullSize[0x0160] - InheritedSize[0x0078])
	 */
	class UMaterialExpressionRotateAboutAxis : public UMaterialExpression
	{
	public:
		struct FExpressionInput                                    NormalizedRotationAxis;                                  // 0x0078(0x0038) ZeroConstructor
		struct FExpressionInput                                    RotationAngle;                                           // 0x00B0(0x0038) ZeroConstructor
		struct FExpressionInput                                    PivotPoint;                                              // 0x00E8(0x0038) ZeroConstructor
		struct FExpressionInput                                    Position;                                                // 0x0120(0x0038) ZeroConstructor
		float                                                      Period;                                                  // 0x0158(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_0GE7[0x4];                                   // 0x015C(0x0004) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.MaterialExpressionRotator
	 * Size -> 0x0080 (FullSize[0x00F8] - InheritedSize[0x0078])
	 */
	class UMaterialExpressionRotator : public UMaterialExpression
	{
	public:
		struct FExpressionInput                                    Coordinate;                                              // 0x0078(0x0038) ZeroConstructor
		struct FExpressionInput                                    Time;                                                    // 0x00B0(0x0038) ZeroConstructor
		float                                                      CenterX;                                                 // 0x00E8(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      CenterY;                                                 // 0x00EC(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      Speed;                                                   // 0x00F0(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		uint32_t                                                   ConstCoordinate;                                         // 0x00F4(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.MaterialExpressionSceneColor
	 * Size -> 0x0080 (FullSize[0x00F8] - InheritedSize[0x0078])
	 */
	class UMaterialExpressionSceneColor : public UMaterialExpression
	{
	public:
		EMaterialSceneAttributeInputMode                           InputMode;                                               // 0x0078(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_F23O[0x7];                                   // 0x0079(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FExpressionInput                                    Input;                                                   // 0x0080(0x0038) ZeroConstructor
		struct FExpressionInput                                    OffsetFraction;                                          // 0x00B8(0x0038) ZeroConstructor, Deprecated
		struct FVector2D                                           ConstInput;                                              // 0x00F0(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.MaterialExpressionSceneDepth
	 * Size -> 0x0088 (FullSize[0x0100] - InheritedSize[0x0078])
	 */
	class UMaterialExpressionSceneDepth : public UMaterialExpression
	{
	public:
		EMaterialSceneAttributeInputMode                           InputMode;                                               // 0x0078(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_QIGG[0x7];                                   // 0x0079(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FExpressionInput                                    Input;                                                   // 0x0080(0x0038) ZeroConstructor
		struct FExpressionInput                                    Coordinates;                                             // 0x00B8(0x0038) ZeroConstructor, Deprecated
		struct FVector2D                                           ConstInput;                                              // 0x00F0(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		bool                                                       bUseHZB;                                                 // 0x00F8(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_4ZOE[0x7];                                   // 0x00F9(0x0007) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.MaterialExpressionSceneTexelSize
	 * Size -> 0x0000 (FullSize[0x0078] - InheritedSize[0x0078])
	 */
	class UMaterialExpressionSceneTexelSize : public UMaterialExpression
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.MaterialExpressionSceneTexture
	 * Size -> 0x0040 (FullSize[0x00B8] - InheritedSize[0x0078])
	 */
	class UMaterialExpressionSceneTexture : public UMaterialExpression
	{
	public:
		struct FExpressionInput                                    Coordinates;                                             // 0x0078(0x0038) ZeroConstructor
		ESceneTextureId                                            SceneTextureId;                                          // 0x00B0(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		bool                                                       bClampUVs;                                               // 0x00B1(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_AWPJ[0x6];                                   // 0x00B2(0x0006) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.MaterialExpressionScreenPosition
	 * Size -> 0x0000 (FullSize[0x0078] - InheritedSize[0x0078])
	 */
	class UMaterialExpressionScreenPosition : public UMaterialExpression
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.MaterialExpressionSine
	 * Size -> 0x0040 (FullSize[0x00B8] - InheritedSize[0x0078])
	 */
	class UMaterialExpressionSine : public UMaterialExpression
	{
	public:
		struct FExpressionInput                                    Input;                                                   // 0x0078(0x0038) ZeroConstructor
		float                                                      Period;                                                  // 0x00B0(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_7NXM[0x4];                                   // 0x00B4(0x0004) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.MaterialExpressionSpeedTree
	 * Size -> 0x0008 (FullSize[0x0080] - InheritedSize[0x0078])
	 */
	class UMaterialExpressionSpeedTree : public UMaterialExpression
	{
	public:
		ESpeedTreeGeometryType                                     GeometryType;                                            // 0x0078(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		ESpeedTreeWindType                                         WindType;                                                // 0x0079(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		ESpeedTreeLODType                                          LODType;                                                 // 0x007A(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_UYIL[0x1];                                   // 0x007B(0x0001) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      BillboardThreshold;                                      // 0x007C(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.MaterialExpressionSphereMask
	 * Size -> 0x00E8 (FullSize[0x0160] - InheritedSize[0x0078])
	 */
	class UMaterialExpressionSphereMask : public UMaterialExpression
	{
	public:
		struct FExpressionInput                                    A;                                                       // 0x0078(0x0038) ZeroConstructor
		struct FExpressionInput                                    B;                                                       // 0x00B0(0x0038) ZeroConstructor
		struct FExpressionInput                                    Radius;                                                  // 0x00E8(0x0038) ZeroConstructor
		struct FExpressionInput                                    Hardness;                                                // 0x0120(0x0038) ZeroConstructor
		float                                                      AttenuationRadius;                                       // 0x0158(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      HardnessPercent;                                         // 0x015C(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.MaterialExpressionSphericalParticleOpacity
	 * Size -> 0x0040 (FullSize[0x00B8] - InheritedSize[0x0078])
	 */
	class UMaterialExpressionSphericalParticleOpacity : public UMaterialExpression
	{
	public:
		struct FExpressionInput                                    Density;                                                 // 0x0078(0x0038) ZeroConstructor
		float                                                      ConstantDensity;                                         // 0x00B0(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_ASBL[0x4];                                   // 0x00B4(0x0004) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.MaterialExpressionSquareRoot
	 * Size -> 0x0038 (FullSize[0x00B0] - InheritedSize[0x0078])
	 */
	class UMaterialExpressionSquareRoot : public UMaterialExpression
	{
	public:
		struct FExpressionInput                                    Input;                                                   // 0x0078(0x0038) ZeroConstructor

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.MaterialExpressionStaticBool
	 * Size -> 0x0008 (FullSize[0x0080] - InheritedSize[0x0078])
	 */
	class UMaterialExpressionStaticBool : public UMaterialExpression
	{
	public:
		unsigned char                                              Value : 1;                                               // 0x0078(0x0001) BIT_FIELD Edit, NoDestructor
		unsigned char                                              UnknownData_7SLY[0x7];                                   // 0x0079(0x0007) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.MaterialExpressionStaticSwitch
	 * Size -> 0x00B0 (FullSize[0x0128] - InheritedSize[0x0078])
	 */
	class UMaterialExpressionStaticSwitch : public UMaterialExpression
	{
	public:
		unsigned char                                              DefaultValue : 1;                                        // 0x0078(0x0001) BIT_FIELD Edit, NoDestructor
		unsigned char                                              UnknownData_DG30[0x7];                                   // 0x0079(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FExpressionInput                                    A;                                                       // 0x0080(0x0038) ZeroConstructor
		struct FExpressionInput                                    B;                                                       // 0x00B8(0x0038) ZeroConstructor
		struct FExpressionInput                                    Value;                                                   // 0x00F0(0x0038) ZeroConstructor

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.MaterialExpressionSubtract
	 * Size -> 0x0078 (FullSize[0x00F0] - InheritedSize[0x0078])
	 */
	class UMaterialExpressionSubtract : public UMaterialExpression
	{
	public:
		struct FExpressionInput                                    A;                                                       // 0x0078(0x0038) ZeroConstructor
		struct FExpressionInput                                    B;                                                       // 0x00B0(0x0038) ZeroConstructor
		float                                                      ConstA;                                                  // 0x00E8(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      ConstB;                                                  // 0x00EC(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.MaterialExpressionTextureBase
	 * Size -> 0x0010 (FullSize[0x0088] - InheritedSize[0x0078])
	 */
	class UMaterialExpressionTextureBase : public UMaterialExpression
	{
	public:
		class UTexture*                                            Texture;                                                 // 0x0078(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		EMaterialSamplerType                                       SamplerType;                                             // 0x0080(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_IIPR[0x3];                                   // 0x0081(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		unsigned char                                              IsDefaultMeshpaintTexture : 1;                           // 0x0084(0x0001) BIT_FIELD Edit, NoDestructor
		unsigned char                                              UnknownData_30PV[0x3];                                   // 0x0085(0x0003) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.MaterialExpressionTextureObject
	 * Size -> 0x0000 (FullSize[0x0088] - InheritedSize[0x0088])
	 */
	class UMaterialExpressionTextureObject : public UMaterialExpressionTextureBase
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.MaterialExpressionTextureSample
	 * Size -> 0x0128 (FullSize[0x01B0] - InheritedSize[0x0088])
	 */
	class UMaterialExpressionTextureSample : public UMaterialExpressionTextureBase
	{
	public:
		struct FExpressionInput                                    Coordinates;                                             // 0x0088(0x0038) ZeroConstructor
		struct FExpressionInput                                    TextureObject;                                           // 0x00C0(0x0038) ZeroConstructor
		struct FExpressionInput                                    MipValue;                                                // 0x00F8(0x0038) ZeroConstructor
		struct FExpressionInput                                    CoordinatesDX;                                           // 0x0130(0x0038) ZeroConstructor
		struct FExpressionInput                                    CoordinatesDY;                                           // 0x0168(0x0038) ZeroConstructor
		ETextureMipValueMode                                       MipValueMode;                                            // 0x01A0(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		ESamplerSourceMode                                         SamplerSource;                                           // 0x01A1(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_XIMM[0x2];                                   // 0x01A2(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		uint32_t                                                   ConstCoordinate;                                         // 0x01A4(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		int32_t                                                    ConstMipValue;                                           // 0x01A8(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_2VYS[0x4];                                   // 0x01AC(0x0004) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.MaterialExpressionParticleSubUV
	 * Size -> 0x0008 (FullSize[0x01B8] - InheritedSize[0x01B0])
	 */
	class UMaterialExpressionParticleSubUV : public UMaterialExpressionTextureSample
	{
	public:
		unsigned char                                              bBlend : 1;                                              // 0x01B0(0x0001) BIT_FIELD Edit, NoDestructor
		unsigned char                                              UnknownData_6NOI[0x7];                                   // 0x01B1(0x0007) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.MaterialExpressionTextureSampleParameter
	 * Size -> 0x0020 (FullSize[0x01D0] - InheritedSize[0x01B0])
	 */
	class UMaterialExpressionTextureSampleParameter : public UMaterialExpressionTextureSample
	{
	public:
		class FName                                                ParameterName;                                           // 0x01B0(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		struct FGuid                                               ExpressionGUID;                                          // 0x01B8(0x0010) ZeroConstructor
		class FName                                                Group;                                                   // 0x01C8(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.MaterialExpressionTextureObjectParameter
	 * Size -> 0x0000 (FullSize[0x01D0] - InheritedSize[0x01D0])
	 */
	class UMaterialExpressionTextureObjectParameter : public UMaterialExpressionTextureSampleParameter
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.MaterialExpressionTextureSampleParameter2D
	 * Size -> 0x0000 (FullSize[0x01D0] - InheritedSize[0x01D0])
	 */
	class UMaterialExpressionTextureSampleParameter2D : public UMaterialExpressionTextureSampleParameter
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.MaterialExpressionAntialiasedTextureMask
	 * Size -> 0x0008 (FullSize[0x01D8] - InheritedSize[0x01D0])
	 */
	class UMaterialExpressionAntialiasedTextureMask : public UMaterialExpressionTextureSampleParameter2D
	{
	public:
		float                                                      Threshold;                                               // 0x01D0(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		ETextureColorChannel                                       Channel;                                                 // 0x01D4(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_8YEA[0x3];                                   // 0x01D5(0x0003) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.MaterialExpressionTextureSampleParameterSubUV
	 * Size -> 0x0008 (FullSize[0x01D8] - InheritedSize[0x01D0])
	 */
	class UMaterialExpressionTextureSampleParameterSubUV : public UMaterialExpressionTextureSampleParameter2D
	{
	public:
		unsigned char                                              bBlend : 1;                                              // 0x01D0(0x0001) BIT_FIELD Edit, NoDestructor
		unsigned char                                              UnknownData_IYXY[0x7];                                   // 0x01D1(0x0007) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.MaterialExpressionTextureSampleParameterCube
	 * Size -> 0x0000 (FullSize[0x01D0] - InheritedSize[0x01D0])
	 */
	class UMaterialExpressionTextureSampleParameterCube : public UMaterialExpressionTextureSampleParameter
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.MaterialExpressionTextureCoordinate
	 * Size -> 0x0010 (FullSize[0x0088] - InheritedSize[0x0078])
	 */
	class UMaterialExpressionTextureCoordinate : public UMaterialExpression
	{
	public:
		int32_t                                                    CoordinateIndex;                                         // 0x0078(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      UTiling;                                                 // 0x007C(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      VTiling;                                                 // 0x0080(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnMirrorU : 1;                                           // 0x0084(0x0001) BIT_FIELD Edit, NoDestructor
		unsigned char                                              UnMirrorV : 1;                                           // 0x0084(0x0001) BIT_FIELD Edit, NoDestructor
		unsigned char                                              UnknownData_BGGD[0x3];                                   // 0x0085(0x0003) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.MaterialExpressionTime
	 * Size -> 0x0008 (FullSize[0x0080] - InheritedSize[0x0078])
	 */
	class UMaterialExpressionTime : public UMaterialExpression
	{
	public:
		unsigned char                                              bIgnorePause : 1;                                        // 0x0078(0x0001) BIT_FIELD Edit, NoDestructor
		unsigned char                                              UnknownData_2U9K[0x7];                                   // 0x0079(0x0007) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.MaterialExpressionTransform
	 * Size -> 0x0040 (FullSize[0x00B8] - InheritedSize[0x0078])
	 */
	class UMaterialExpressionTransform : public UMaterialExpression
	{
	public:
		struct FExpressionInput                                    Input;                                                   // 0x0078(0x0038) ZeroConstructor
		EMaterialVectorCoordTransformSource                        TransformSourceType;                                     // 0x00B0(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		EMaterialVectorCoordTransform                              TransformType;                                           // 0x00B1(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_WPYC[0x6];                                   // 0x00B2(0x0006) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.MaterialExpressionTransformPosition
	 * Size -> 0x0040 (FullSize[0x00B8] - InheritedSize[0x0078])
	 */
	class UMaterialExpressionTransformPosition : public UMaterialExpression
	{
	public:
		struct FExpressionInput                                    Input;                                                   // 0x0078(0x0038) ZeroConstructor
		EMaterialPositionTransformSource                           TransformSourceType;                                     // 0x00B0(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		EMaterialPositionTransformSource                           TransformType;                                           // 0x00B1(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_JFK4[0x6];                                   // 0x00B2(0x0006) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.MaterialExpressionTwoSidedSign
	 * Size -> 0x0000 (FullSize[0x0078] - InheritedSize[0x0078])
	 */
	class UMaterialExpressionTwoSidedSign : public UMaterialExpression
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.MaterialExpressionVertexColor
	 * Size -> 0x0000 (FullSize[0x0078] - InheritedSize[0x0078])
	 */
	class UMaterialExpressionVertexColor : public UMaterialExpression
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.MaterialExpressionVertexNormalWS
	 * Size -> 0x0000 (FullSize[0x0078] - InheritedSize[0x0078])
	 */
	class UMaterialExpressionVertexNormalWS : public UMaterialExpression
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.MaterialExpressionViewSize
	 * Size -> 0x0000 (FullSize[0x0078] - InheritedSize[0x0078])
	 */
	class UMaterialExpressionViewSize : public UMaterialExpression
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.MaterialExpressionWorldPosition
	 * Size -> 0x0008 (FullSize[0x0080] - InheritedSize[0x0078])
	 */
	class UMaterialExpressionWorldPosition : public UMaterialExpression
	{
	public:
		EWorldPositionIncludedOffsets                              WorldPositionShaderOffset;                               // 0x0078(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_REI3[0x7];                                   // 0x0079(0x0007) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.MaterialFunction
	 * Size -> 0x0060 (FullSize[0x0088] - InheritedSize[0x0028])
	 */
	class UMaterialFunction : public UObject
	{
	public:
		struct FGuid                                               StateId;                                                 // 0x0028(0x0010) ZeroConstructor, DuplicateTransient
		TArray<class FString>                                      AdditionalIncludes;                                      // 0x0038(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, AssetRegistrySearchable
		class FString                                              Description;                                             // 0x0048(0x0010) Edit, ZeroConstructor, AssetRegistrySearchable
		unsigned char                                              bExposeToLibrary : 1;                                    // 0x0058(0x0001) BIT_FIELD Edit, NoDestructor, AssetRegistrySearchable
		unsigned char                                              UnknownData_61SL[0x7];                                   // 0x0059(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class FString>                                      LibraryCategories;                                       // 0x0060(0x0010) Edit, ZeroConstructor, AssetRegistrySearchable
		TArray<class UMaterialExpression*>                         FunctionExpressions;                                     // 0x0070(0x0010) ZeroConstructor
		unsigned char                                              bReentrantFlag : 1;                                      // 0x0080(0x0001) BIT_FIELD Transient, NoDestructor
		unsigned char                                              UnknownData_GXXD[0x7];                                   // 0x0081(0x0007) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.Material
	 * Size -> 0x0A88 (FullSize[0x0AE8] - InheritedSize[0x0060])
	 */
	class UMaterial : public UMaterialInterface
	{
	public:
		class UPhysicalMaterial*                                   PhysMaterial;                                            // 0x0060(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		struct FColorMaterialInput                                 DiffuseColor;                                            // 0x0068(0x0040)
		struct FColorMaterialInput                                 SpecularColor;                                           // 0x00A8(0x0040)
		struct FColorMaterialInput                                 BaseColor;                                               // 0x00E8(0x0040)
		struct FScalarMaterialInput                                Metallic;                                                // 0x0128(0x0040)
		struct FScalarMaterialInput                                Specular;                                                // 0x0168(0x0040)
		struct FScalarMaterialInput                                SpecularPower;                                           // 0x01A8(0x0040) Deprecated
		struct FScalarMaterialInput                                Roughness;                                               // 0x01E8(0x0040)
		struct FVectorMaterialInput                                Normal;                                                  // 0x0228(0x0048)
		struct FColorMaterialInput                                 EmissiveColor;                                           // 0x0270(0x0040)
		struct FScalarMaterialInput                                Opacity;                                                 // 0x02B0(0x0040)
		struct FScalarMaterialInput                                OpacityMask;                                             // 0x02F0(0x0040)
		float                                                      FresnelBaseReflectFraction;                              // 0x0330(0x0004) ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_WVF6[0x4];                                   // 0x0334(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class FString>                                      AdditionalIncludes;                                      // 0x0338(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, AssetRegistrySearchable
		EMaterialDomain                                            MaterialDomain;                                          // 0x0348(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable
		EBlendMode                                                 BlendMode;                                               // 0x0349(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable
		EDecalBlendMode                                            DecalBlendMode;                                          // 0x034A(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		EMaterialDecalResponse                                     MaterialDecalResponse;                                   // 0x034B(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable
		EMaterialShadingModel                                      ShadingModel;                                            // 0x034C(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable
		unsigned char                                              UnknownData_TC4P[0x3];                                   // 0x034D(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      OpacityMaskClipValue;                                    // 0x0350(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_XWJ4[0x4];                                   // 0x0354(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FVectorMaterialInput                                WorldPositionOffset;                                     // 0x0358(0x0048)
		struct FVectorMaterialInput                                WorldDisplacement;                                       // 0x03A0(0x0048)
		struct FScalarMaterialInput                                TessellationMultiplier;                                  // 0x03E8(0x0040)
		struct FColorMaterialInput                                 SubsurfaceColor;                                         // 0x0428(0x0040)
		struct FScalarMaterialInput                                ClearCoat;                                               // 0x0468(0x0040)
		struct FScalarMaterialInput                                ClearCoatRoughness;                                      // 0x04A8(0x0040)
		struct FScalarMaterialInput                                AmbientOcclusion;                                        // 0x04E8(0x0040)
		struct FScalarMaterialInput                                Refraction;                                              // 0x0528(0x0040)
		struct FScalarMaterialInput                                SSAOIntensity;                                           // 0x0568(0x0040)
		struct FScalarMaterialInput                                SSAOInfluence;                                           // 0x05A8(0x0040)
		struct FScalarMaterialInput                                SSAOLightInfluence;                                      // 0x05E8(0x0040)
		struct FVector2MaterialInput                               CustomizedUVs[0x8];                                      // 0x0628(0x0240)
		struct FMaterialAttributesInput                            MaterialAttributes;                                      // 0x0868(0x0038) ZeroConstructor
		unsigned char                                              UnknownData_6Z6V[0x8];                                   // 0x08A0(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FScalarMaterialInput                                PixelDepthOffset;                                        // 0x08A8(0x0040)
		unsigned char                                              bEnableSeparateTranslucency : 1;                         // 0x08E8(0x0001) BIT_FIELD Edit, NoDestructor
		unsigned char                                              bEnableResponsiveAA : 1;                                 // 0x08E8(0x0001) BIT_FIELD Edit, NoDestructor
		unsigned char                                              bScreenSpaceReflections : 1;                             // 0x08E8(0x0001) BIT_FIELD Edit, NoDestructor
		unsigned char                                              TwoSided : 1;                                            // 0x08E8(0x0001) BIT_FIELD Edit, NoDestructor
		unsigned char                                              bUsedWithCustomDepths : 1;                               // 0x08E8(0x0001) BIT_FIELD Edit, NoDestructor
		unsigned char                                              bOutputToSecondaryTarget : 1;                            // 0x08E8(0x0001) BIT_FIELD Edit, NoDestructor
		unsigned char                                              UnknownData_MI8V[0x3];                                   // 0x08E9(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int32_t                                                    NumCustomizedUVs;                                        // 0x08EC(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay
		ETranslucencyLightingMode                                  TranslucencyLightingMode;                                // 0x08F0(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_O0KX[0x3];                                   // 0x08F1(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      TranslucencyDirectionalLightingIntensity;                // 0x08F4(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      TranslucentShadowDensityScale;                           // 0x08F8(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      TranslucentSelfShadowDensityScale;                       // 0x08FC(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      TranslucentSelfShadowSecondDensityScale;                 // 0x0900(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      TranslucentSelfShadowSecondOpacity;                      // 0x0904(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      TranslucentBackscatteringExponent;                       // 0x0908(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		struct FLinearColor                                        TranslucentMultipleScatteringExtinction;                 // 0x090C(0x0010) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      TranslucentShadowStartOffset;                            // 0x091C(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              bDisableDepthTest : 1;                                   // 0x0920(0x0001) BIT_FIELD Edit, NoDestructor
		unsigned char                                              bGenerateSphericalParticleNormals : 1;                   // 0x0920(0x0001) BIT_FIELD Edit, NoDestructor, AdvancedDisplay
		unsigned char                                              bTangentSpaceNormal : 1;                                 // 0x0920(0x0001) BIT_FIELD Edit, NoDestructor
		unsigned char                                              bUseEmissiveForDynamicAreaLighting : 1;                  // 0x0920(0x0001) BIT_FIELD Edit, BlueprintVisible, NoDestructor, AdvancedDisplay
		unsigned char                                              bPhysicallyBasedInputs : 1;                              // 0x0920(0x0001) BIT_FIELD Deprecated, NoDestructor
		unsigned char                                              bUsedAsLightFunction : 1;                                // 0x0920(0x0001) BIT_FIELD Deprecated, NoDestructor
		unsigned char                                              bUsedWithDeferredDecal : 1;                              // 0x0920(0x0001) BIT_FIELD Deprecated, NoDestructor
		unsigned char                                              bUsedAsSpecialEngineMaterial : 1;                        // 0x0920(0x0001) BIT_FIELD DuplicateTransient, NoDestructor
		unsigned char                                              bUsedWithSkeletalMesh : 1;                               // 0x0921(0x0001) BIT_FIELD Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor
		unsigned char                                              bUsedWithEditorCompositing : 1;                          // 0x0921(0x0001) BIT_FIELD Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor
		unsigned char                                              bUsedWithLandscape : 1;                                  // 0x0921(0x0001) BIT_FIELD Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor
		unsigned char                                              bUsedWithParticleSprites : 1;                            // 0x0921(0x0001) BIT_FIELD Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor
		unsigned char                                              bUsedWithBeamTrails : 1;                                 // 0x0921(0x0001) BIT_FIELD Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor
		unsigned char                                              bUsedWithMeshParticles : 1;                              // 0x0921(0x0001) BIT_FIELD Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor
		unsigned char                                              bUsedWithStaticLighting : 1;                             // 0x0921(0x0001) BIT_FIELD Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor
		unsigned char                                              bUsedWithFluidSurfaces : 1;                              // 0x0921(0x0001) BIT_FIELD Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor
		unsigned char                                              bUsedWithMorphTargets : 1;                               // 0x0922(0x0001) BIT_FIELD Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor
		unsigned char                                              bUsedWithSplineMeshes : 1;                               // 0x0922(0x0001) BIT_FIELD Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor
		unsigned char                                              bUsedWithInstancedStaticMeshes : 1;                      // 0x0922(0x0001) BIT_FIELD Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor
		unsigned char                                              bAllowFullSceneColorTranslucentPath : 1;                 // 0x0922(0x0001) BIT_FIELD Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor
		unsigned char                                              bUsedWithGroundClutter : 1;                              // 0x0922(0x0001) BIT_FIELD Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor
		unsigned char                                              bUsedWithTrueSkyScatter : 1;                             // 0x0922(0x0001) BIT_FIELD Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor
		unsigned char                                              bUsedWithStaticMesh : 1;                                 // 0x0922(0x0001) BIT_FIELD Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor
		unsigned char                                              bUsesDistortion : 1;                                     // 0x0922(0x0001) BIT_FIELD Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor
		unsigned char                                              bUsedWithClothing : 1;                                   // 0x0923(0x0001) BIT_FIELD Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor
		unsigned char                                              bUsedWithUI : 1;                                         // 0x0923(0x0001) BIT_FIELD Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor
		unsigned char                                              bAutomaticallySetUsageInEditor : 1;                      // 0x0923(0x0001) BIT_FIELD Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay
		unsigned char                                              bOptOutOfMaterialUsedWithFlagOptimizations : 1;          // 0x0923(0x0001) BIT_FIELD Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay
		unsigned char                                              bFullyRough : 1;                                         // 0x0923(0x0001) BIT_FIELD Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor
		unsigned char                                              bAllowAdditionalSkyLightMultiplier : 1;                  // 0x0923(0x0001) BIT_FIELD Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor
		unsigned char                                              bUseLightmapDirectionality : 1;                          // 0x0923(0x0001) BIT_FIELD Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor
		EMaterialTessellationMode                                  D3D11TessellationMode;                                   // 0x0924(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_4OGL[0x3];                                   // 0x0925(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		unsigned char                                              bEnableCrackFreeDisplacement : 1;                        // 0x0928(0x0001) BIT_FIELD Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor
		unsigned char                                              bEnableAdaptiveTessellation : 1;                         // 0x0928(0x0001) BIT_FIELD Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor
		unsigned char                                              Wireframe : 1;                                           // 0x0928(0x0001) BIT_FIELD Edit, NoDestructor, AdvancedDisplay
		unsigned char                                              UnknownData_39EG[0x3];                                   // 0x0929(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int32_t                                                    EditorX;                                                 // 0x092C(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor
		int32_t                                                    EditorY;                                                 // 0x0930(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor
		int32_t                                                    EditorPitch;                                             // 0x0934(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor
		int32_t                                                    EditorYaw;                                               // 0x0938(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_0OO1[0x4];                                   // 0x093C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class UMaterialExpression*>                         Expressions;                                             // 0x0940(0x0010) ZeroConstructor
		TArray<struct FMaterialFunctionInfo>                       MaterialFunctionInfos;                                   // 0x0950(0x0010) ZeroConstructor
		TArray<struct FMaterialParameterCollectionInfo>            MaterialParameterCollectionInfos;                        // 0x0960(0x0010) ZeroConstructor
		unsigned char                                              bIsMasked : 1;                                           // 0x0970(0x0001) BIT_FIELD NoDestructor
		unsigned char                                              bIsPreviewMaterial : 1;                                  // 0x0970(0x0001) BIT_FIELD Transient, DuplicateTransient, NoDestructor
		unsigned char                                              bUseMaterialAttributes : 1;                              // 0x0970(0x0001) BIT_FIELD Edit, NoDestructor
		unsigned char                                              bUseTranslucencyVertexFog : 1;                           // 0x0970(0x0001) BIT_FIELD Edit, NoDestructor
		unsigned char                                              bAllowDevelopmentShaderCompile : 1;                      // 0x0970(0x0001) BIT_FIELD Transient, DuplicateTransient, NoDestructor
		unsigned char                                              bIsMaterialEditorStatsMaterial : 1;                      // 0x0970(0x0001) BIT_FIELD Transient, DuplicateTransient, NoDestructor
		unsigned char                                              UnknownData_IBN3[0x3];                                   // 0x0971(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		uint32_t                                                   UsageFlagWarnings;                                       // 0x0974(0x0004) ZeroConstructor, Transient, DuplicateTransient, IsPlainOldData, NoDestructor
		EBlendableLocation                                         BlendableLocation;                                       // 0x0978(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_PI8W[0x3];                                   // 0x0979(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int32_t                                                    BlendablePriority;                                       // 0x097C(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		int32_t                                                    DownsampleFactor;                                        // 0x0980(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      RefractionDepthBias;                                     // 0x0984(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay
		struct FGuid                                               StateId;                                                 // 0x0988(0x0010) ZeroConstructor
		unsigned char                                              UnknownData_DYBP[0x140];                                 // 0x0998(0x0140) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class UTexture*>                                    ExpressionTextureReferences;                             // 0x0AD8(0x0010) ZeroConstructor, Transient

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.MaterialInstance
	 * Size -> 0x01A8 (FullSize[0x0208] - InheritedSize[0x0060])
	 */
	class UMaterialInstance : public UMaterialInterface
	{
	public:
		class UPhysicalMaterial*                                   PhysMaterial;                                            // 0x0060(0x0008) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		class UMaterialInterface*                                  Parent;                                                  // 0x0068(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable
		unsigned char                                              bHasStaticPermutationResource : 1;                       // 0x0070(0x0001) BIT_FIELD NoDestructor
		unsigned char                                              UnknownData_7WCB : 1;                                    // 0x0070(0x0001) BIT_FIELD (PADDING)
		unsigned char                                              bOverrideSubsurfaceProfile : 1;                          // 0x0070(0x0001) BIT_FIELD Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor
		unsigned char                                              UnknownData_SVKH[0x3];                                   // 0x0071(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FGuid                                               ParentLightingGuid;                                      // 0x0074(0x0010) ZeroConstructor
		unsigned char                                              UnknownData_Y907[0x4];                                   // 0x0084(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<struct FFontParameterValue>                         FontParameterValues;                                     // 0x0088(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor
		TArray<struct FScalarParameterValue>                       ScalarParameterValues;                                   // 0x0098(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor
		TArray<struct FTextureParameterValue>                      TextureParameterValues;                                  // 0x00A8(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor
		TArray<struct FVectorParameterValue>                       VectorParameterValues;                                   // 0x00B8(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor
		bool                                                       bOverrideBaseProperties;                                 // 0x00C8(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_LB4D[0x3];                                   // 0x00C9(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FMaterialInstanceBasePropertyOverrides              BasePropertyOverrides;                                   // 0x00CC(0x0010) Edit, BlueprintVisible, BlueprintReadOnly
		bool                                                       bOptOutOfMaterialUsedWithFlagOptimizations;              // 0x00DC(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay
		bool                                                       bOverrideUsedWithFlags;                                  // 0x00DD(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_EL8R[0x2];                                   // 0x00DE(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FMaterialInstanceUsedWithOverride                   UsedWithOverrides;                                       // 0x00E0(0x0004) Edit, BlueprintVisible, BlueprintReadOnly
		unsigned char                                              UnknownData_9GXG[0x124];                                 // 0x00E4(0x0124) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.MaterialInstanceConstant
	 * Size -> 0x0000 (FullSize[0x0208] - InheritedSize[0x0208])
	 */
	class UMaterialInstanceConstant : public UMaterialInstance
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.LandscapeMaterialInstanceConstant
	 * Size -> 0x0010 (FullSize[0x0218] - InheritedSize[0x0208])
	 */
	class ULandscapeMaterialInstanceConstant : public UMaterialInstanceConstant
	{
	public:
		unsigned char                                              bIsLayerThumbnail : 1;                                   // 0x0208(0x0001) BIT_FIELD NoDestructor
		unsigned char                                              UnknownData_1XC9[0x3];                                   // 0x0209(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int32_t                                                    DataWeightmapIndex;                                      // 0x020C(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor
		int32_t                                                    DataWeightmapSize;                                       // 0x0210(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_CRT5[0x4];                                   // 0x0214(0x0004) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.MaterialInstanceDynamic
	 * Size -> 0x0000 (FullSize[0x0208] - InheritedSize[0x0208])
	 */
	class UMaterialInstanceDynamic : public UMaterialInstance
	{
	public:
		void SetVectorParameterValue(const class FName& ParameterName, const struct FLinearColor& Value);
		void SetTextureParameterValue(const class FName& ParameterName, class UTexture* Value);
		void SetScalarParameterValue(const class FName& ParameterName, float Value);
		void K2_InterpolateMaterialInstanceParams(class UMaterialInstance* MaterialA, class UMaterialInstance* MaterialB, float Alpha);
		struct FLinearColor K2_GetVectorParameterValue(const class FName& ParameterName);
		class UTexture* K2_GetTextureParameterValue(const class FName& ParameterName);
		float K2_GetScalarParameterValue(const class FName& ParameterName);
		void K2_CopyMaterialInstanceParameters(class UMaterialInterface* SourceMaterialToCopyFrom);
		void CopyParameterOverrides(class UMaterialInstance* MaterialInstance);
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.MaterialParameterCollection
	 * Size -> 0x0038 (FullSize[0x0060] - InheritedSize[0x0028])
	 */
	class UMaterialParameterCollection : public UObject
	{
	public:
		struct FGuid                                               StateId;                                                 // 0x0028(0x0010) ZeroConstructor, DuplicateTransient
		TArray<struct FCollectionScalarParameter>                  ScalarParameters;                                        // 0x0038(0x0010) Edit, ZeroConstructor
		TArray<struct FCollectionVectorParameter>                  VectorParameters;                                        // 0x0048(0x0010) Edit, ZeroConstructor
		unsigned char                                              UnknownData_X165[0x8];                                   // 0x0058(0x0008) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.MaterialParameterCollectionInstance
	 * Size -> 0x00C0 (FullSize[0x00E8] - InheritedSize[0x0028])
	 */
	class UMaterialParameterCollectionInstance : public UObject
	{
	public:
		unsigned char                                              UnknownData_XHMN[0x8];                                   // 0x0028(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UMaterialParameterCollection*                        Collection;                                              // 0x0030(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, Protected
		class UWorld*                                              World;                                                   // 0x0038(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, Protected
		unsigned char                                              UnknownData_UFKW[0xA8];                                  // 0x0040(0x00A8) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.MatineeInterface
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class UMatineeInterface : public UInterface
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.MountedDLCManager
	 * Size -> 0x0040 (FullSize[0x0068] - InheritedSize[0x0028])
	 */
	class UMountedDLCManager : public UObject
	{
	public:
		TArray<struct FMountedDLCInfo>                             MountedDLCs;                                             // 0x0028(0x0010) ZeroConstructor, Config, GlobalConfig
		TArray<struct FMountedDLCMapInfo>                          MountedDLCMaps;                                          // 0x0038(0x0010) ZeroConstructor, Config, GlobalConfig
		unsigned char                                              UnknownData_K9FY[0x20];                                  // 0x0048(0x0020) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.StadiaMountedDLCManager
	 * Size -> 0x0008 (FullSize[0x0070] - InheritedSize[0x0068])
	 */
	class UStadiaMountedDLCManager : public UMountedDLCManager
	{
	public:
		unsigned char                                              UnknownData_JWKT[0x8];                                   // 0x0068(0x0008) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.NavArea
	 * Size -> 0x0018 (FullSize[0x0040] - InheritedSize[0x0028])
	 */
	class UNavArea : public UObject
	{
	public:
		float                                                      DefaultCost;                                             // 0x0028(0x0004) Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor
		float                                                      FixedAreaEnteringCost;                                   // 0x002C(0x0004) Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor
		struct FColor                                              DrawColor;                                               // 0x0030(0x0004) Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor
		unsigned char                                              bSupportsAgent0 : 1;                                     // 0x0034(0x0001) BIT_FIELD Edit, Config, NoDestructor
		unsigned char                                              bSupportsAgent1 : 1;                                     // 0x0034(0x0001) BIT_FIELD Edit, Config, NoDestructor
		unsigned char                                              bSupportsAgent2 : 1;                                     // 0x0034(0x0001) BIT_FIELD Edit, Config, NoDestructor
		unsigned char                                              bSupportsAgent3 : 1;                                     // 0x0034(0x0001) BIT_FIELD Edit, Config, NoDestructor
		unsigned char                                              bSupportsAgent4 : 1;                                     // 0x0034(0x0001) BIT_FIELD Edit, Config, NoDestructor
		unsigned char                                              bSupportsAgent5 : 1;                                     // 0x0034(0x0001) BIT_FIELD Edit, Config, NoDestructor
		unsigned char                                              bSupportsAgent6 : 1;                                     // 0x0034(0x0001) BIT_FIELD Edit, Config, NoDestructor
		unsigned char                                              bSupportsAgent7 : 1;                                     // 0x0034(0x0001) BIT_FIELD Edit, Config, NoDestructor
		unsigned char                                              bSupportsAgent8 : 1;                                     // 0x0035(0x0001) BIT_FIELD Edit, Config, NoDestructor
		unsigned char                                              bSupportsAgent9 : 1;                                     // 0x0035(0x0001) BIT_FIELD Edit, Config, NoDestructor
		unsigned char                                              bSupportsAgent10 : 1;                                    // 0x0035(0x0001) BIT_FIELD Edit, Config, NoDestructor
		unsigned char                                              bSupportsAgent11 : 1;                                    // 0x0035(0x0001) BIT_FIELD Edit, Config, NoDestructor
		unsigned char                                              bSupportsAgent12 : 1;                                    // 0x0035(0x0001) BIT_FIELD Edit, Config, NoDestructor
		unsigned char                                              bSupportsAgent13 : 1;                                    // 0x0035(0x0001) BIT_FIELD Edit, Config, NoDestructor
		unsigned char                                              bSupportsAgent14 : 1;                                    // 0x0035(0x0001) BIT_FIELD Edit, Config, NoDestructor
		unsigned char                                              bSupportsAgent15 : 1;                                    // 0x0035(0x0001) BIT_FIELD Edit, Config, NoDestructor
		unsigned char                                              UnknownData_6D7B[0xA];                                   // 0x0036(0x000A) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.NavArea_Default
	 * Size -> 0x0000 (FullSize[0x0040] - InheritedSize[0x0040])
	 */
	class UNavArea_Default : public UNavArea
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.NavArea_Null
	 * Size -> 0x0000 (FullSize[0x0040] - InheritedSize[0x0040])
	 */
	class UNavArea_Null : public UNavArea
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.NavAreaMeta
	 * Size -> 0x0000 (FullSize[0x0040] - InheritedSize[0x0040])
	 */
	class UNavAreaMeta : public UNavArea
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.NavAreaMeta_SwitchByAgent
	 * Size -> 0x0080 (FullSize[0x00C0] - InheritedSize[0x0040])
	 */
	class UNavAreaMeta_SwitchByAgent : public UNavAreaMeta
	{
	public:
		class UClass*                                              Agent0Area;                                              // 0x0040(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		class UClass*                                              Agent1Area;                                              // 0x0048(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		class UClass*                                              Agent2Area;                                              // 0x0050(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		class UClass*                                              Agent3Area;                                              // 0x0058(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		class UClass*                                              Agent4Area;                                              // 0x0060(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		class UClass*                                              Agent5Area;                                              // 0x0068(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		class UClass*                                              Agent6Area;                                              // 0x0070(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		class UClass*                                              Agent7Area;                                              // 0x0078(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		class UClass*                                              Agent8Area;                                              // 0x0080(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		class UClass*                                              Agent9Area;                                              // 0x0088(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		class UClass*                                              Agent10Area;                                             // 0x0090(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		class UClass*                                              Agent11Area;                                             // 0x0098(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		class UClass*                                              Agent12Area;                                             // 0x00A0(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		class UClass*                                              Agent13Area;                                             // 0x00A8(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		class UClass*                                              Agent14Area;                                             // 0x00B0(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		class UClass*                                              Agent15Area;                                             // 0x00B8(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.NavCollision
	 * Size -> 0x00E0 (FullSize[0x0108] - InheritedSize[0x0028])
	 */
	class UNavCollision : public UObject
	{
	public:
		unsigned char                                              UnknownData_CPSL[0x50];                                  // 0x0028(0x0050) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<struct FNavCollisionCylinder>                       CylinderCollision;                                       // 0x0078(0x0010) Edit, ZeroConstructor
		TArray<struct FNavCollisionBox>                            BoxCollision;                                            // 0x0088(0x0010) Edit, ZeroConstructor
		class UClass*                                              AreaClass;                                               // 0x0098(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              bIsDynamicObstacle : 1;                                  // 0x00A0(0x0001) BIT_FIELD Edit, Config, NoDestructor
		unsigned char                                              bGatherConvexGeometry : 1;                               // 0x00A0(0x0001) BIT_FIELD Edit, Config, NoDestructor
		unsigned char                                              UnknownData_TY2P[0x67];                                  // 0x00A1(0x0067) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.NavigationPath
	 * Size -> 0x0048 (FullSize[0x0070] - InheritedSize[0x0028])
	 */
	class UNavigationPath : public UObject
	{
	public:
		class FScriptMulticastDelegate                             PathUpdatedNotifier;                                     // 0x0028(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable
		TArray<struct FVector>                                     PathPoints;                                              // 0x0038(0x0010) BlueprintVisible, BlueprintReadOnly, ZeroConstructor
		ENavigationOptionFlag                                      RecalculateOnInvalidation;                               // 0x0048(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_ZU8D[0x27];                                  // 0x0049(0x0027) MISSED OFFSET (PADDING)

	public:
		void OnNavigationPathUpdated__DelegateSignature(class UNavigationPath* AffectedPath, ENavPathEvent PathEvent);
		bool IsValid();
		bool IsStringPulled();
		bool IsPartial();
		float GetPathLength();
		float GetPathCost();
		class FString GetDebugString();
		void EnableRecalculationOnInvalidation(ENavigationOptionFlag DoRecalculation);
		void EnableDebugDrawing(bool bShouldDrawDebugData, const struct FLinearColor& PathColor);
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.NavigationPathGenerator
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class UNavigationPathGenerator : public UInterface
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.RecastFilter_UseDefaultArea
	 * Size -> 0x0000 (FullSize[0x0040] - InheritedSize[0x0040])
	 */
	class URecastFilter_UseDefaultArea : public UNavigationQueryFilter
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.NavLinkTrivial
	 * Size -> 0x0000 (FullSize[0x0050] - InheritedSize[0x0050])
	 */
	class UNavLinkTrivial : public UNavLinkDefinition
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.NavNodeInterface
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class UNavNodeInterface : public UInterface
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.NetworkSettings
	 * Size -> 0x0008 (FullSize[0x0030] - InheritedSize[0x0028])
	 */
	class UNetworkSettings : public UObject
	{
	public:
		unsigned char                                              bVerifyPeer : 1;                                         // 0x0028(0x0001) BIT_FIELD Edit, Config, NoDestructor
		unsigned char                                              UnknownData_G8B8[0x7];                                   // 0x0029(0x0007) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.NiagaraEffect
	 * Size -> 0x0010 (FullSize[0x0038] - InheritedSize[0x0028])
	 */
	class UNiagaraEffect : public UObject
	{
	public:
		TArray<class FName>                                        Emitters;                                                // 0x0028(0x0010) ZeroConstructor

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.NiagaraScript
	 * Size -> 0x0030 (FullSize[0x0058] - InheritedSize[0x0028])
	 */
	class UNiagaraScript : public UObject
	{
	public:
		TArray<unsigned char>                                      ByteCode;                                                // 0x0028(0x0010) ZeroConstructor
		TArray<struct FVector4>                                    ConstantTable;                                           // 0x0038(0x0010) ZeroConstructor
		unsigned char                                              UnknownData_UDY3[0x10];                                  // 0x0048(0x0010) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.NiagaraScriptSourceBase
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class UNiagaraScriptSourceBase : public UObject
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.ObjectLibrary
	 * Size -> 0x0048 (FullSize[0x0070] - InheritedSize[0x0028])
	 */
	class UObjectLibrary : public UObject
	{
	public:
		class UClass*                                              ObjectBaseClass;                                         // 0x0028(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		bool                                                       bHasBlueprintClasses;                                    // 0x0030(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_W4WN[0x7];                                   // 0x0031(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class UObject*>                                     Objects;                                                 // 0x0038(0x0010) Edit, ZeroConstructor, Protected
		TArray<TWeakObjectPtr<class UObject>>                      WeakObjects;                                             // 0x0048(0x0010) ZeroConstructor, Protected
		bool                                                       bUseWeakReferences;                                      // 0x0058(0x0001) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected
		bool                                                       bIsFullyLoaded;                                          // 0x0059(0x0001) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected
		unsigned char                                              UnknownData_UDQT[0x16];                                  // 0x005A(0x0016) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.ObjectReferencer
	 * Size -> 0x0010 (FullSize[0x0038] - InheritedSize[0x0028])
	 */
	class UObjectReferencer : public UObject
	{
	public:
		TArray<class UObject*>                                     ReferencedObjects;                                       // 0x0028(0x0010) Edit, ZeroConstructor

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.PackageMapClient
	 * Size -> 0x0148 (FullSize[0x0188] - InheritedSize[0x0040])
	 */
	class UPackageMapClient : public UPackageMap
	{
	public:
		unsigned char                                              UnknownData_CXWL[0x148];                                 // 0x0040(0x0148) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.ParticleEmitter
	 * Size -> 0x0040 (FullSize[0x0068] - InheritedSize[0x0028])
	 */
	class UParticleEmitter : public UObject
	{
	public:
		class FName                                                EmitterName;                                             // 0x0028(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		int32_t                                                    SubUVDataOffset;                                         // 0x0030(0x0004) ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		EEmitterRenderMode                                         EmitterRenderMode;                                       // 0x0034(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_R8WY[0x3];                                   // 0x0035(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class UParticleLODLevel*>                           LODLevels;                                               // 0x0038(0x0010) ExportObject, ZeroConstructor, ContainsInstancedReference
		unsigned char                                              ConvertedModules : 1;                                    // 0x0048(0x0001) BIT_FIELD NoDestructor
		unsigned char                                              UnknownData_X28O[0x3];                                   // 0x0049(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int32_t                                                    PeakActiveParticles;                                     // 0x004C(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor
		int32_t                                                    InitialAllocationCount;                                  // 0x0050(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      MediumDetailSpawnRateScale;                              // 0x0054(0x0004) ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor
		float                                                      QualityLevelSpawnRateScale;                              // 0x0058(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		EDetailMode                                                DetailMode;                                              // 0x005C(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_C0DP[0x3];                                   // 0x005D(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		unsigned char                                              bIsSoloing : 1;                                          // 0x0060(0x0001) BIT_FIELD Transient, NoDestructor
		unsigned char                                              bCookedOut : 1;                                          // 0x0060(0x0001) BIT_FIELD NoDestructor
		unsigned char                                              UnknownData_ADRX[0x7];                                   // 0x0061(0x0007) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.ParticleSpriteEmitter
	 * Size -> 0x0000 (FullSize[0x0068] - InheritedSize[0x0068])
	 */
	class UParticleSpriteEmitter : public UParticleEmitter
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.ParticleLODLevel
	 * Size -> 0x0090 (FullSize[0x00B8] - InheritedSize[0x0028])
	 */
	class UParticleLODLevel : public UObject
	{
	public:
		int32_t                                                    Level;                                                   // 0x0028(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              bEnabled : 1;                                            // 0x002C(0x0001) BIT_FIELD NoDestructor
		unsigned char                                              UnknownData_D7KD[0x3];                                   // 0x002D(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UParticleModuleRequired*                             RequiredModule;                                          // 0x0030(0x0008) ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor
		TArray<class UParticleModule*>                             Modules;                                                 // 0x0038(0x0010) ExportObject, ZeroConstructor, ContainsInstancedReference
		class UParticleModule*                                     TypeDataModule;                                          // 0x0048(0x0008) ExportObject, ZeroConstructor, IsPlainOldData, NoDestructor
		class UParticleModuleSpawn*                                SpawnModule;                                             // 0x0050(0x0008) ExportObject, ZeroConstructor, IsPlainOldData, NoDestructor
		class UParticleModuleEventGenerator*                       EventGenerator;                                          // 0x0058(0x0008) ExportObject, ZeroConstructor, IsPlainOldData, NoDestructor
		TArray<class UParticleModuleSpawnBase*>                    SpawningModules;                                         // 0x0060(0x0010) ZeroConstructor, Transient, DuplicateTransient
		TArray<class UParticleModule*>                             SpawnModules;                                            // 0x0070(0x0010) ZeroConstructor, Transient, DuplicateTransient
		TArray<class UParticleModule*>                             UpdateModules;                                           // 0x0080(0x0010) ZeroConstructor, Transient, DuplicateTransient
		TArray<class UParticleModuleOrbit*>                        OrbitModules;                                            // 0x0090(0x0010) ZeroConstructor, Transient, DuplicateTransient
		TArray<class UParticleModuleEventReceiverBase*>            EventReceiverModules;                                    // 0x00A0(0x0010) ZeroConstructor, Transient, DuplicateTransient
		unsigned char                                              ConvertedModules : 1;                                    // 0x00B0(0x0001) BIT_FIELD NoDestructor
		unsigned char                                              UnknownData_CB1U[0x3];                                   // 0x00B1(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int32_t                                                    PeakActiveParticles;                                     // 0x00B4(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.ParticleModule
	 * Size -> 0x0008 (FullSize[0x0030] - InheritedSize[0x0028])
	 */
	class UParticleModule : public UObject
	{
	public:
		unsigned char                                              bSpawnModule : 1;                                        // 0x0028(0x0001) BIT_FIELD NoDestructor
		unsigned char                                              bUpdateModule : 1;                                       // 0x0028(0x0001) BIT_FIELD NoDestructor
		unsigned char                                              bFinalUpdateModule : 1;                                  // 0x0028(0x0001) BIT_FIELD NoDestructor
		unsigned char                                              bUpdateForGPUEmitter : 1;                                // 0x0028(0x0001) BIT_FIELD NoDestructor
		unsigned char                                              bCurvesAsColor : 1;                                      // 0x0028(0x0001) BIT_FIELD NoDestructor
		unsigned char                                              b3DDrawMode : 1;                                         // 0x0028(0x0001) BIT_FIELD Edit, NoDestructor
		unsigned char                                              bSupported3DDrawMode : 1;                                // 0x0028(0x0001) BIT_FIELD NoDestructor
		unsigned char                                              bEnabled : 1;                                            // 0x0028(0x0001) BIT_FIELD NoDestructor
		unsigned char                                              bEditable : 1;                                           // 0x0029(0x0001) BIT_FIELD NoDestructor
		unsigned char                                              LODDuplicate : 1;                                        // 0x0029(0x0001) BIT_FIELD NoDestructor
		unsigned char                                              bSupportsRandomSeed : 1;                                 // 0x0029(0x0001) BIT_FIELD NoDestructor
		unsigned char                                              bRequiresLoopingNotification : 1;                        // 0x0029(0x0001) BIT_FIELD NoDestructor
		unsigned char                                              UnknownData_Y60H[0x2];                                   // 0x002A(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		unsigned char                                              LODValidity;                                             // 0x002C(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_BB0T[0x3];                                   // 0x002D(0x0003) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.ParticleModuleAccelerationBase
	 * Size -> 0x0008 (FullSize[0x0038] - InheritedSize[0x0030])
	 */
	class UParticleModuleAccelerationBase : public UParticleModule
	{
	public:
		unsigned char                                              bAlwaysInWorldSpace : 1;                                 // 0x0030(0x0001) BIT_FIELD Edit, NoDestructor
		unsigned char                                              UnknownData_NEOW[0x7];                                   // 0x0031(0x0007) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.ParticleModuleAcceleration
	 * Size -> 0x0040 (FullSize[0x0078] - InheritedSize[0x0038])
	 */
	class UParticleModuleAcceleration : public UParticleModuleAccelerationBase
	{
	public:
		struct FRawDistributionVector                              Acceleration;                                            // 0x0038(0x0038) Edit, ContainsInstancedReference
		unsigned char                                              bApplyOwnerScale : 1;                                    // 0x0070(0x0001) BIT_FIELD Edit, NoDestructor
		unsigned char                                              UnknownData_LNLK[0x7];                                   // 0x0071(0x0007) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.ParticleModuleAccelerationConstant
	 * Size -> 0x0010 (FullSize[0x0048] - InheritedSize[0x0038])
	 */
	class UParticleModuleAccelerationConstant : public UParticleModuleAccelerationBase
	{
	public:
		struct FVector                                             Acceleration;                                            // 0x0038(0x000C) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_SL0H[0x4];                                   // 0x0044(0x0004) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.ParticleModuleAccelerationDrag
	 * Size -> 0x0008 (FullSize[0x0040] - InheritedSize[0x0038])
	 */
	class UParticleModuleAccelerationDrag : public UParticleModuleAccelerationBase
	{
	public:
		class UDistributionFloat*                                  DragCoefficient;                                         // 0x0038(0x0008) Edit, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.ParticleModuleAccelerationDragScaleOverLife
	 * Size -> 0x0008 (FullSize[0x0040] - InheritedSize[0x0038])
	 */
	class UParticleModuleAccelerationDragScaleOverLife : public UParticleModuleAccelerationBase
	{
	public:
		class UDistributionFloat*                                  DragScale;                                               // 0x0038(0x0008) Edit, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.ParticleModuleAccelerationOverLifetime
	 * Size -> 0x0038 (FullSize[0x0070] - InheritedSize[0x0038])
	 */
	class UParticleModuleAccelerationOverLifetime : public UParticleModuleAccelerationBase
	{
	public:
		struct FRawDistributionVector                              AccelOverLife;                                           // 0x0038(0x0038) Edit, ContainsInstancedReference

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.ParticleModuleAttractorBase
	 * Size -> 0x0000 (FullSize[0x0030] - InheritedSize[0x0030])
	 */
	class UParticleModuleAttractorBase : public UParticleModule
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.ParticleModuleAttractorLine
	 * Size -> 0x0088 (FullSize[0x00B8] - InheritedSize[0x0030])
	 */
	class UParticleModuleAttractorLine : public UParticleModuleAttractorBase
	{
	public:
		struct FVector                                             EndPoint0;                                               // 0x0030(0x000C) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		struct FVector                                             EndPoint1;                                               // 0x003C(0x000C) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		struct FRawDistributionFloat                               Range;                                                   // 0x0048(0x0038) Edit, ContainsInstancedReference
		struct FRawDistributionFloat                               Strength;                                                // 0x0080(0x0038) Edit, ContainsInstancedReference

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.ParticleModuleAttractorParticle
	 * Size -> 0x0090 (FullSize[0x00C0] - InheritedSize[0x0030])
	 */
	class UParticleModuleAttractorParticle : public UParticleModuleAttractorBase
	{
	public:
		class FName                                                EmitterName;                                             // 0x0030(0x0008) Edit, ExportObject, ZeroConstructor, NoClear, IsPlainOldData, NoDestructor
		struct FRawDistributionFloat                               Range;                                                   // 0x0038(0x0038) Edit, ContainsInstancedReference
		unsigned char                                              bStrengthByDistance : 1;                                 // 0x0070(0x0001) BIT_FIELD Edit, NoDestructor
		unsigned char                                              UnknownData_L85X[0x7];                                   // 0x0071(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FRawDistributionFloat                               Strength;                                                // 0x0078(0x0038) Edit, ContainsInstancedReference
		unsigned char                                              bAffectBaseVelocity : 1;                                 // 0x00B0(0x0001) BIT_FIELD Edit, NoDestructor
		unsigned char                                              UnknownData_AOC7[0x3];                                   // 0x00B1(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		EAttractorParticleSelectionMethod                          SelectionMethod;                                         // 0x00B4(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_ED5I[0x3];                                   // 0x00B5(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		unsigned char                                              bRenewSource : 1;                                        // 0x00B8(0x0001) BIT_FIELD Edit, NoDestructor
		unsigned char                                              bInheritSourceVel : 1;                                   // 0x00B8(0x0001) BIT_FIELD Edit, NoDestructor
		unsigned char                                              UnknownData_82MD[0x3];                                   // 0x00B9(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int32_t                                                    LastSelIndex;                                            // 0x00BC(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.ParticleModuleAttractorPoint
	 * Size -> 0x00B0 (FullSize[0x00E0] - InheritedSize[0x0030])
	 */
	class UParticleModuleAttractorPoint : public UParticleModuleAttractorBase
	{
	public:
		struct FRawDistributionVector                              Position;                                                // 0x0030(0x0038) Edit, ContainsInstancedReference
		struct FRawDistributionFloat                               Range;                                                   // 0x0068(0x0038) Edit, ContainsInstancedReference
		struct FRawDistributionFloat                               Strength;                                                // 0x00A0(0x0038) Edit, ContainsInstancedReference
		unsigned char                                              StrengthByDistance : 1;                                  // 0x00D8(0x0001) BIT_FIELD Edit, NoDestructor
		unsigned char                                              bAffectBaseVelocity : 1;                                 // 0x00D8(0x0001) BIT_FIELD Edit, NoDestructor
		unsigned char                                              bOverrideVelocity : 1;                                   // 0x00D8(0x0001) BIT_FIELD Edit, NoDestructor
		unsigned char                                              bUseWorldSpacePosition : 1;                              // 0x00D8(0x0001) BIT_FIELD Edit, NoDestructor
		unsigned char                                              Positive_X : 1;                                          // 0x00D8(0x0001) BIT_FIELD Edit, NoDestructor
		unsigned char                                              Positive_Y : 1;                                          // 0x00D8(0x0001) BIT_FIELD Edit, NoDestructor
		unsigned char                                              Positive_Z : 1;                                          // 0x00D8(0x0001) BIT_FIELD Edit, NoDestructor
		unsigned char                                              Negative_X : 1;                                          // 0x00D8(0x0001) BIT_FIELD Edit, NoDestructor
		unsigned char                                              Negative_Y : 1;                                          // 0x00D9(0x0001) BIT_FIELD Edit, NoDestructor
		unsigned char                                              Negative_Z : 1;                                          // 0x00D9(0x0001) BIT_FIELD Edit, NoDestructor
		unsigned char                                              UnknownData_VA5J[0x6];                                   // 0x00DA(0x0006) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.ParticleModuleAttractorPointGravity
	 * Size -> 0x0018 (FullSize[0x0048] - InheritedSize[0x0030])
	 */
	class UParticleModuleAttractorPointGravity : public UParticleModuleAttractorBase
	{
	public:
		struct FVector                                             Position;                                                // 0x0030(0x000C) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      Radius;                                                  // 0x003C(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		class UDistributionFloat*                                  Strength;                                                // 0x0040(0x0008) Edit, ExportObject, ZeroConstructor, InstancedReference, NoClear, IsPlainOldData, NoDestructor

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.ParticleModuleBeamBase
	 * Size -> 0x0000 (FullSize[0x0030] - InheritedSize[0x0030])
	 */
	class UParticleModuleBeamBase : public UParticleModule
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.ParticleModuleBeamModifier
	 * Size -> 0x00C0 (FullSize[0x00F0] - InheritedSize[0x0030])
	 */
	class UParticleModuleBeamModifier : public UParticleModuleBeamBase
	{
	public:
		EBeamModifierType                                          ModifierType;                                            // 0x0030(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_WUOY[0x3];                                   // 0x0031(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FBeamModifierOptions                                PositionOptions;                                         // 0x0034(0x0004) Edit
		struct FRawDistributionVector                              Position;                                                // 0x0038(0x0038) Edit, ContainsInstancedReference
		struct FBeamModifierOptions                                TangentOptions;                                          // 0x0070(0x0004) Edit
		unsigned char                                              UnknownData_ZOP0[0x4];                                   // 0x0074(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FRawDistributionVector                              Tangent;                                                 // 0x0078(0x0038) Edit, ContainsInstancedReference
		unsigned char                                              bAbsoluteTangent : 1;                                    // 0x00B0(0x0001) BIT_FIELD Edit, NoDestructor
		unsigned char                                              UnknownData_G3K8[0x3];                                   // 0x00B1(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FBeamModifierOptions                                StrengthOptions;                                         // 0x00B4(0x0004) Edit
		struct FRawDistributionFloat                               Strength;                                                // 0x00B8(0x0038) Edit, ContainsInstancedReference

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.ParticleModuleBeamNoise
	 * Size -> 0x0158 (FullSize[0x0188] - InheritedSize[0x0030])
	 */
	class UParticleModuleBeamNoise : public UParticleModuleBeamBase
	{
	public:
		unsigned char                                              bLowFreq_Enabled : 1;                                    // 0x0030(0x0001) BIT_FIELD Edit, NoDestructor
		unsigned char                                              UnknownData_R1IN[0x3];                                   // 0x0031(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int32_t                                                    Frequency;                                               // 0x0034(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		int32_t                                                    Frequency_LowRange;                                      // 0x0038(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_IZBZ[0x4];                                   // 0x003C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FRawDistributionVector                              NoiseRange;                                              // 0x0040(0x0038) Edit, ContainsInstancedReference
		struct FRawDistributionFloat                               NoiseRangeScale;                                         // 0x0078(0x0038) Edit, ContainsInstancedReference
		unsigned char                                              bNRScaleEmitterTime : 1;                                 // 0x00B0(0x0001) BIT_FIELD Edit, NoDestructor
		unsigned char                                              UnknownData_ZB7Q[0x7];                                   // 0x00B1(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FRawDistributionVector                              NoiseSpeed;                                              // 0x00B8(0x0038) Edit, ContainsInstancedReference
		unsigned char                                              bSmooth : 1;                                             // 0x00F0(0x0001) BIT_FIELD Edit, NoDestructor
		unsigned char                                              UnknownData_GJ3S[0x3];                                   // 0x00F1(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      NoiseLockRadius;                                         // 0x00F4(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              bNoiseLock : 1;                                          // 0x00F8(0x0001) BIT_FIELD NoDestructor
		unsigned char                                              bOscillate : 1;                                          // 0x00F8(0x0001) BIT_FIELD Edit, NoDestructor
		unsigned char                                              UnknownData_05ZB[0x3];                                   // 0x00F9(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      NoiseLockTime;                                           // 0x00FC(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      NoiseTension;                                            // 0x0100(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              bUseNoiseTangents : 1;                                   // 0x0104(0x0001) BIT_FIELD Edit, NoDestructor
		unsigned char                                              UnknownData_TJM3[0x3];                                   // 0x0105(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FRawDistributionFloat                               NoiseTangentStrength;                                    // 0x0108(0x0038) Edit, ContainsInstancedReference
		int32_t                                                    NoiseTessellation;                                       // 0x0140(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              bTargetNoise : 1;                                        // 0x0144(0x0001) BIT_FIELD Edit, NoDestructor
		unsigned char                                              UnknownData_5SC1[0x3];                                   // 0x0145(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      FrequencyDistance;                                       // 0x0148(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              bApplyNoiseScale : 1;                                    // 0x014C(0x0001) BIT_FIELD Edit, NoDestructor
		unsigned char                                              UnknownData_R1SN[0x3];                                   // 0x014D(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FRawDistributionFloat                               NoiseScale;                                              // 0x0150(0x0038) Edit, ContainsInstancedReference

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.ParticleModuleBeamSource
	 * Size -> 0x00D0 (FullSize[0x0100] - InheritedSize[0x0030])
	 */
	class UParticleModuleBeamSource : public UParticleModuleBeamBase
	{
	public:
		EBeam2SourceTargetMethod                                   SourceMethod;                                            // 0x0030(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_BFIZ[0x3];                                   // 0x0031(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FName                                                SourceName;                                              // 0x0034(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              bSourceAbsolute : 1;                                     // 0x003C(0x0001) BIT_FIELD Edit, NoDestructor
		unsigned char                                              UnknownData_DZZE[0x3];                                   // 0x003D(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FRawDistributionVector                              Source;                                                  // 0x0040(0x0038) Edit, ContainsInstancedReference
		unsigned char                                              bLockSource : 1;                                         // 0x0078(0x0001) BIT_FIELD Edit, NoDestructor
		unsigned char                                              UnknownData_B2EP[0x3];                                   // 0x0079(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		EBeam2SourceTargetTangentMethod                            SourceTangentMethod;                                     // 0x007C(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_BX9M[0x3];                                   // 0x007D(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FRawDistributionVector                              SourceTangent;                                           // 0x0080(0x0038) Edit, ContainsInstancedReference
		unsigned char                                              bLockSourceTangent : 1;                                  // 0x00B8(0x0001) BIT_FIELD Edit, NoDestructor
		unsigned char                                              UnknownData_4Z6P[0x7];                                   // 0x00B9(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FRawDistributionFloat                               SourceStrength;                                          // 0x00C0(0x0038) Edit, ContainsInstancedReference
		unsigned char                                              bLockSourceStength : 1;                                  // 0x00F8(0x0001) BIT_FIELD Edit, NoDestructor
		unsigned char                                              UnknownData_ILU9[0x7];                                   // 0x00F9(0x0007) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.ParticleModuleBeamTarget
	 * Size -> 0x00D0 (FullSize[0x0100] - InheritedSize[0x0030])
	 */
	class UParticleModuleBeamTarget : public UParticleModuleBeamBase
	{
	public:
		EBeam2SourceTargetMethod                                   TargetMethod;                                            // 0x0030(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_BE1F[0x3];                                   // 0x0031(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FName                                                TargetName;                                              // 0x0034(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_TZE6[0x4];                                   // 0x003C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FRawDistributionVector                              Target;                                                  // 0x0040(0x0038) Edit, ContainsInstancedReference
		unsigned char                                              bTargetAbsolute : 1;                                     // 0x0078(0x0001) BIT_FIELD Edit, NoDestructor
		unsigned char                                              bLockTarget : 1;                                         // 0x0078(0x0001) BIT_FIELD Edit, NoDestructor
		unsigned char                                              UnknownData_YKNT[0x3];                                   // 0x0079(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		EBeam2SourceTargetTangentMethod                            TargetTangentMethod;                                     // 0x007C(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_XD0A[0x3];                                   // 0x007D(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FRawDistributionVector                              TargetTangent;                                           // 0x0080(0x0038) Edit, ContainsInstancedReference
		unsigned char                                              bLockTargetTangent : 1;                                  // 0x00B8(0x0001) BIT_FIELD Edit, NoDestructor
		unsigned char                                              UnknownData_9BO5[0x7];                                   // 0x00B9(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FRawDistributionFloat                               TargetStrength;                                          // 0x00C0(0x0038) Edit, ContainsInstancedReference
		unsigned char                                              bLockTargetStength : 1;                                  // 0x00F8(0x0001) BIT_FIELD Edit, NoDestructor
		unsigned char                                              UnknownData_01PS[0x3];                                   // 0x00F9(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      LockRadius;                                              // 0x00FC(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.ParticleModuleCameraBase
	 * Size -> 0x0000 (FullSize[0x0030] - InheritedSize[0x0030])
	 */
	class UParticleModuleCameraBase : public UParticleModule
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.ParticleModuleCameraOffset
	 * Size -> 0x0040 (FullSize[0x0070] - InheritedSize[0x0030])
	 */
	class UParticleModuleCameraOffset : public UParticleModuleCameraBase
	{
	public:
		struct FRawDistributionFloat                               CameraOffset;                                            // 0x0030(0x0038) Edit, ContainsInstancedReference
		unsigned char                                              bSpawnTimeOnly : 1;                                      // 0x0068(0x0001) BIT_FIELD Edit, NoDestructor
		unsigned char                                              UnknownData_48AE[0x3];                                   // 0x0069(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		EParticleCameraOffsetUpdateMethod                          UpdateMethod;                                            // 0x006C(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_BEVX[0x3];                                   // 0x006D(0x0003) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.ParticleModuleCollisionBase
	 * Size -> 0x0000 (FullSize[0x0030] - InheritedSize[0x0030])
	 */
	class UParticleModuleCollisionBase : public UParticleModule
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.ParticleModuleCollision
	 * Size -> 0x0150 (FullSize[0x0180] - InheritedSize[0x0030])
	 */
	class UParticleModuleCollision : public UParticleModuleCollisionBase
	{
	public:
		struct FRawDistributionVector                              DampingFactor;                                           // 0x0030(0x0038) Edit, ContainsInstancedReference
		struct FRawDistributionVector                              DampingFactorRotation;                                   // 0x0068(0x0038) Edit, ContainsInstancedReference
		struct FRawDistributionFloat                               MaxCollisions;                                           // 0x00A0(0x0038) Edit, ContainsInstancedReference
		EParticleCollisionComplete                                 CollisionCompletionOption;                               // 0x00D8(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_V73N[0x7];                                   // 0x00D9(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<EObjectTypeQuery>                                   CollisionTypes;                                          // 0x00E0(0x0010) Edit, ZeroConstructor
		unsigned char                                              UnknownData_NU3U[0x4];                                   // 0x00F0(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		unsigned char                                              bApplyPhysics : 1;                                       // 0x00F4(0x0001) BIT_FIELD Edit, NoDestructor
		unsigned char                                              UnknownData_1L4K[0x3];                                   // 0x00F5(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FRawDistributionFloat                               ParticleMass;                                            // 0x00F8(0x0038) Edit, ContainsInstancedReference
		float                                                      DirScalar;                                               // 0x0130(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              bPawnsDoNotDecrementCount : 1;                           // 0x0134(0x0001) BIT_FIELD Edit, NoDestructor
		unsigned char                                              bOnlyVerticalNormalsDecrementCount : 1;                  // 0x0134(0x0001) BIT_FIELD Edit, NoDestructor
		unsigned char                                              UnknownData_SQNC[0x3];                                   // 0x0135(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      VerticalFudgeFactor;                                     // 0x0138(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_N2OE[0x4];                                   // 0x013C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FRawDistributionFloat                               DelayAmount;                                             // 0x0140(0x0038) Edit, ContainsInstancedReference
		unsigned char                                              bDropDetail : 1;                                         // 0x0178(0x0001) BIT_FIELD Edit, NoDestructor
		unsigned char                                              bCollideOnlyIfVisible : 1;                               // 0x0178(0x0001) BIT_FIELD Edit, NoDestructor
		unsigned char                                              bIgnoreSourceActor : 1;                                  // 0x0178(0x0001) BIT_FIELD Edit, NoDestructor
		unsigned char                                              UnknownData_RQF8[0x3];                                   // 0x0179(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      MaxCollisionDistance;                                    // 0x017C(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.ParticleModuleCollisionGPU
	 * Size -> 0x0080 (FullSize[0x00B0] - InheritedSize[0x0030])
	 */
	class UParticleModuleCollisionGPU : public UParticleModuleCollisionBase
	{
	public:
		struct FRawDistributionFloat                               Resilience;                                              // 0x0030(0x0038) Edit, ContainsInstancedReference
		struct FRawDistributionFloat                               ResilienceScaleOverLife;                                 // 0x0068(0x0038) Edit, ContainsInstancedReference
		float                                                      Friction;                                                // 0x00A0(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      RadiusScale;                                             // 0x00A4(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      RadiusBias;                                              // 0x00A8(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		EParticleCollisionResponse                                 Response;                                                // 0x00AC(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_MOKN[0x3];                                   // 0x00AD(0x0003) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.ParticleModuleColorBase
	 * Size -> 0x0000 (FullSize[0x0030] - InheritedSize[0x0030])
	 */
	class UParticleModuleColorBase : public UParticleModule
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.ParticleModuleColor
	 * Size -> 0x0078 (FullSize[0x00A8] - InheritedSize[0x0030])
	 */
	class UParticleModuleColor : public UParticleModuleColorBase
	{
	public:
		struct FRawDistributionVector                              StartColor;                                              // 0x0030(0x0038) Edit, ContainsInstancedReference
		struct FRawDistributionFloat                               StartAlpha;                                              // 0x0068(0x0038) Edit, ContainsInstancedReference
		unsigned char                                              bClampAlpha : 1;                                         // 0x00A0(0x0001) BIT_FIELD Edit, NoDestructor
		unsigned char                                              UnknownData_VWWY[0x7];                                   // 0x00A1(0x0007) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.ParticleModuleColor_Seeded
	 * Size -> 0x0020 (FullSize[0x00C8] - InheritedSize[0x00A8])
	 */
	class UParticleModuleColor_Seeded : public UParticleModuleColor
	{
	public:
		struct FParticleRandomSeedInfo                             RandomSeedInfo;                                          // 0x00A8(0x0020) Edit

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.ParticleModuleColorOverLife
	 * Size -> 0x0078 (FullSize[0x00A8] - InheritedSize[0x0030])
	 */
	class UParticleModuleColorOverLife : public UParticleModuleColorBase
	{
	public:
		struct FRawDistributionVector                              ColorOverLife;                                           // 0x0030(0x0038) Edit, ContainsInstancedReference
		struct FRawDistributionFloat                               AlphaOverLife;                                           // 0x0068(0x0038) Edit, ContainsInstancedReference
		unsigned char                                              bClampAlpha : 1;                                         // 0x00A0(0x0001) BIT_FIELD Edit, NoDestructor
		unsigned char                                              UnknownData_XYAA[0x7];                                   // 0x00A1(0x0007) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.ParticleModuleColorScaleOverLife
	 * Size -> 0x0078 (FullSize[0x00A8] - InheritedSize[0x0030])
	 */
	class UParticleModuleColorScaleOverLife : public UParticleModuleColorBase
	{
	public:
		struct FRawDistributionVector                              ColorScaleOverLife;                                      // 0x0030(0x0038) Edit, ContainsInstancedReference
		struct FRawDistributionFloat                               AlphaScaleOverLife;                                      // 0x0068(0x0038) Edit, ContainsInstancedReference
		unsigned char                                              bEmitterTime : 1;                                        // 0x00A0(0x0001) BIT_FIELD Edit, NoDestructor
		unsigned char                                              UnknownData_HF1A[0x7];                                   // 0x00A1(0x0007) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.ParticleModuleEventBase
	 * Size -> 0x0000 (FullSize[0x0030] - InheritedSize[0x0030])
	 */
	class UParticleModuleEventBase : public UParticleModule
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.ParticleModuleEventGenerator
	 * Size -> 0x0010 (FullSize[0x0040] - InheritedSize[0x0030])
	 */
	class UParticleModuleEventGenerator : public UParticleModuleEventBase
	{
	public:
		TArray<struct FParticleEvent_GenerateInfo>                 Events;                                                  // 0x0030(0x0010) Edit, ExportObject, ZeroConstructor, NoClear, ContainsInstancedReference

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.ParticleModuleEventReceiverBase
	 * Size -> 0x0010 (FullSize[0x0040] - InheritedSize[0x0030])
	 */
	class UParticleModuleEventReceiverBase : public UParticleModuleEventBase
	{
	public:
		EParticleEventType                                         EventGeneratorType;                                      // 0x0030(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_POTT[0x3];                                   // 0x0031(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FName                                                EventName;                                               // 0x0034(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_GRN7[0x4];                                   // 0x003C(0x0004) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.ParticleModuleEventReceiverKillParticles
	 * Size -> 0x0008 (FullSize[0x0048] - InheritedSize[0x0040])
	 */
	class UParticleModuleEventReceiverKillParticles : public UParticleModuleEventReceiverBase
	{
	public:
		unsigned char                                              bStopSpawning : 1;                                       // 0x0040(0x0001) BIT_FIELD Edit, NoDestructor
		unsigned char                                              UnknownData_F5LC[0x7];                                   // 0x0041(0x0007) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.ParticleModuleEventReceiverSpawn
	 * Size -> 0x0078 (FullSize[0x00B8] - InheritedSize[0x0040])
	 */
	class UParticleModuleEventReceiverSpawn : public UParticleModuleEventReceiverBase
	{
	public:
		struct FRawDistributionFloat                               SpawnCount;                                              // 0x0040(0x0038) Edit, ContainsInstancedReference
		unsigned char                                              bUseParticleTime : 1;                                    // 0x0078(0x0001) BIT_FIELD Edit, NoDestructor
		unsigned char                                              bUsePSysLocation : 1;                                    // 0x0078(0x0001) BIT_FIELD Edit, NoDestructor
		unsigned char                                              bInheritVelocity : 1;                                    // 0x0078(0x0001) BIT_FIELD Edit, NoDestructor
		unsigned char                                              UnknownData_HLVZ[0x7];                                   // 0x0079(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FRawDistributionVector                              InheritVelocityScale;                                    // 0x0080(0x0038) Edit, ContainsInstancedReference

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.ParticleModuleKillBase
	 * Size -> 0x0000 (FullSize[0x0030] - InheritedSize[0x0030])
	 */
	class UParticleModuleKillBase : public UParticleModule
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.ParticleModuleKillBox
	 * Size -> 0x0078 (FullSize[0x00A8] - InheritedSize[0x0030])
	 */
	class UParticleModuleKillBox : public UParticleModuleKillBase
	{
	public:
		struct FRawDistributionVector                              LowerLeftCorner;                                         // 0x0030(0x0038) Edit, ContainsInstancedReference
		struct FRawDistributionVector                              UpperRightCorner;                                        // 0x0068(0x0038) Edit, ContainsInstancedReference
		unsigned char                                              bAbsolute : 1;                                           // 0x00A0(0x0001) BIT_FIELD Edit, NoDestructor
		unsigned char                                              bKillInside : 1;                                         // 0x00A0(0x0001) BIT_FIELD Edit, NoDestructor
		unsigned char                                              bAxisAlignedAndFixedSize : 1;                            // 0x00A0(0x0001) BIT_FIELD Edit, NoDestructor
		unsigned char                                              UnknownData_0H4E[0x7];                                   // 0x00A1(0x0007) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.ParticleModuleKillHeight
	 * Size -> 0x0040 (FullSize[0x0070] - InheritedSize[0x0030])
	 */
	class UParticleModuleKillHeight : public UParticleModuleKillBase
	{
	public:
		struct FRawDistributionFloat                               Height;                                                  // 0x0030(0x0038) Edit, ContainsInstancedReference
		unsigned char                                              bAbsolute : 1;                                           // 0x0068(0x0001) BIT_FIELD Edit, NoDestructor
		unsigned char                                              bFloor : 1;                                              // 0x0068(0x0001) BIT_FIELD Edit, NoDestructor
		unsigned char                                              bApplyPSysScale : 1;                                     // 0x0068(0x0001) BIT_FIELD Edit, NoDestructor
		unsigned char                                              UnknownData_8RVC[0x7];                                   // 0x0069(0x0007) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.ParticleModuleLifetimeBase
	 * Size -> 0x0000 (FullSize[0x0030] - InheritedSize[0x0030])
	 */
	class UParticleModuleLifetimeBase : public UParticleModule
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.ParticleModuleLifetime
	 * Size -> 0x0038 (FullSize[0x0068] - InheritedSize[0x0030])
	 */
	class UParticleModuleLifetime : public UParticleModuleLifetimeBase
	{
	public:
		struct FRawDistributionFloat                               LifeTime;                                                // 0x0030(0x0038) Edit, ContainsInstancedReference

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.ParticleModuleLifetime_Seeded
	 * Size -> 0x0020 (FullSize[0x0088] - InheritedSize[0x0068])
	 */
	class UParticleModuleLifetime_Seeded : public UParticleModuleLifetime
	{
	public:
		struct FParticleRandomSeedInfo                             RandomSeedInfo;                                          // 0x0068(0x0020) Edit

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.ParticleModuleLightBase
	 * Size -> 0x0000 (FullSize[0x0030] - InheritedSize[0x0030])
	 */
	class UParticleModuleLightBase : public UParticleModule
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.ParticleModuleLight
	 * Size -> 0x00E8 (FullSize[0x0118] - InheritedSize[0x0030])
	 */
	class UParticleModuleLight : public UParticleModuleLightBase
	{
	public:
		bool                                                       bUseInverseSquaredFalloff;                               // 0x0030(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		bool                                                       bAffectsTranslucency;                                    // 0x0031(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		bool                                                       bPreviewLightRadius;                                     // 0x0032(0x0001) Edit, ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_4GKZ[0x1];                                   // 0x0033(0x0001) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      SpawnFraction;                                           // 0x0034(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		struct FRawDistributionVector                              ColorScaleOverLife;                                      // 0x0038(0x0038) Edit, ContainsInstancedReference
		struct FRawDistributionFloat                               BrightnessOverLife;                                      // 0x0070(0x0038) Edit, ContainsInstancedReference
		struct FRawDistributionFloat                               RadiusScale;                                             // 0x00A8(0x0038) Edit, ContainsInstancedReference
		struct FRawDistributionFloat                               LightExponent;                                           // 0x00E0(0x0038) Edit, ContainsInstancedReference

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.ParticleModuleLight_Seeded
	 * Size -> 0x0020 (FullSize[0x0138] - InheritedSize[0x0118])
	 */
	class UParticleModuleLight_Seeded : public UParticleModuleLight
	{
	public:
		struct FParticleRandomSeedInfo                             RandomSeedInfo;                                          // 0x0118(0x0020) Edit

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.ParticleModuleLocationBase
	 * Size -> 0x0000 (FullSize[0x0030] - InheritedSize[0x0030])
	 */
	class UParticleModuleLocationBase : public UParticleModule
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.ParticleModuleLocation
	 * Size -> 0x0040 (FullSize[0x0070] - InheritedSize[0x0030])
	 */
	class UParticleModuleLocation : public UParticleModuleLocationBase
	{
	public:
		struct FRawDistributionVector                              StartLocation;                                           // 0x0030(0x0038) Edit, ContainsInstancedReference
		float                                                      DistributeOverNPoints;                                   // 0x0068(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      DistributeThreshold;                                     // 0x006C(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.ParticleModuleLocation_Seeded
	 * Size -> 0x0020 (FullSize[0x0090] - InheritedSize[0x0070])
	 */
	class UParticleModuleLocation_Seeded : public UParticleModuleLocation
	{
	public:
		struct FParticleRandomSeedInfo                             RandomSeedInfo;                                          // 0x0070(0x0020) Edit

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.ParticleModuleLocationWorldOffset
	 * Size -> 0x0000 (FullSize[0x0070] - InheritedSize[0x0070])
	 */
	class UParticleModuleLocationWorldOffset : public UParticleModuleLocation
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.ParticleModuleLocationWorldOffset_Seeded
	 * Size -> 0x0020 (FullSize[0x0090] - InheritedSize[0x0070])
	 */
	class UParticleModuleLocationWorldOffset_Seeded : public UParticleModuleLocationWorldOffset
	{
	public:
		struct FParticleRandomSeedInfo                             RandomSeedInfo;                                          // 0x0070(0x0020) Edit

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.ParticleModuleLocationBoneSocket
	 * Size -> 0x0030 (FullSize[0x0060] - InheritedSize[0x0030])
	 */
	class UParticleModuleLocationBoneSocket : public UParticleModuleLocationBase
	{
	public:
		ELocationBoneSocketSource                                  SourceType;                                              // 0x0030(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_O3OH[0x3];                                   // 0x0031(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FVector                                             UniversalOffset;                                         // 0x0034(0x000C) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		TArray<struct FLocationBoneSocketInfo>                     SourceLocations;                                         // 0x0040(0x0010) Edit, ZeroConstructor
		ELocationBoneSocketSelectionMethod                         SelectionMethod;                                         // 0x0050(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_G59F[0x3];                                   // 0x0051(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		unsigned char                                              bUpdatePositionEachFrame : 1;                            // 0x0054(0x0001) BIT_FIELD Edit, NoDestructor
		unsigned char                                              bOrientMeshEmitters : 1;                                 // 0x0054(0x0001) BIT_FIELD Edit, NoDestructor
		unsigned char                                              bInheritBoneVelocity : 1;                                // 0x0054(0x0001) BIT_FIELD Edit, NoDestructor
		unsigned char                                              UnknownData_DHH1[0x3];                                   // 0x0055(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FName                                                SkelMeshActorParamName;                                  // 0x0058(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.ParticleModuleLocationDirect
	 * Size -> 0x00E0 (FullSize[0x0110] - InheritedSize[0x0030])
	 */
	class UParticleModuleLocationDirect : public UParticleModuleLocationBase
	{
	public:
		struct FRawDistributionVector                              Location;                                                // 0x0030(0x0038) Edit, ContainsInstancedReference
		struct FRawDistributionVector                              LocationOffset;                                          // 0x0068(0x0038) Edit, ContainsInstancedReference
		struct FRawDistributionVector                              ScaleFactor;                                             // 0x00A0(0x0038) Edit, ContainsInstancedReference
		struct FRawDistributionVector                              Direction;                                               // 0x00D8(0x0038) Edit, ContainsInstancedReference

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.ParticleModuleLocationEmitter
	 * Size -> 0x0020 (FullSize[0x0050] - InheritedSize[0x0030])
	 */
	class UParticleModuleLocationEmitter : public UParticleModuleLocationBase
	{
	public:
		class FName                                                EmitterName;                                             // 0x0030(0x0008) Edit, ExportObject, ZeroConstructor, NoClear, IsPlainOldData, NoDestructor
		ELocationEmitterSelectionMethod                            SelectionMethod;                                         // 0x0038(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_H6BZ[0x3];                                   // 0x0039(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		unsigned char                                              InheritSourceVelocity : 1;                               // 0x003C(0x0001) BIT_FIELD Edit, NoDestructor
		unsigned char                                              UnknownData_E5RV[0x3];                                   // 0x003D(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      InheritSourceVelocityScale;                              // 0x0040(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              bInheritSourceRotation : 1;                              // 0x0044(0x0001) BIT_FIELD Edit, NoDestructor
		unsigned char                                              UnknownData_MGLN[0x3];                                   // 0x0045(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      InheritSourceRotationScale;                              // 0x0048(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_D8S8[0x4];                                   // 0x004C(0x0004) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.ParticleModuleLocationEmitterDirect
	 * Size -> 0x0008 (FullSize[0x0038] - InheritedSize[0x0030])
	 */
	class UParticleModuleLocationEmitterDirect : public UParticleModuleLocationBase
	{
	public:
		class FName                                                EmitterName;                                             // 0x0030(0x0008) Edit, ExportObject, ZeroConstructor, NoClear, IsPlainOldData, NoDestructor

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.ParticleModuleLocationPrimitiveBase
	 * Size -> 0x0078 (FullSize[0x00A8] - InheritedSize[0x0030])
	 */
	class UParticleModuleLocationPrimitiveBase : public UParticleModuleLocationBase
	{
	public:
		unsigned char                                              Positive_X : 1;                                          // 0x0030(0x0001) BIT_FIELD Edit, NoDestructor
		unsigned char                                              Positive_Y : 1;                                          // 0x0030(0x0001) BIT_FIELD Edit, NoDestructor
		unsigned char                                              Positive_Z : 1;                                          // 0x0030(0x0001) BIT_FIELD Edit, NoDestructor
		unsigned char                                              Negative_X : 1;                                          // 0x0030(0x0001) BIT_FIELD Edit, NoDestructor
		unsigned char                                              Negative_Y : 1;                                          // 0x0030(0x0001) BIT_FIELD Edit, NoDestructor
		unsigned char                                              Negative_Z : 1;                                          // 0x0030(0x0001) BIT_FIELD Edit, NoDestructor
		unsigned char                                              SurfaceOnly : 1;                                         // 0x0030(0x0001) BIT_FIELD Edit, NoDestructor
		unsigned char                                              Velocity : 1;                                            // 0x0030(0x0001) BIT_FIELD Edit, NoDestructor
		unsigned char                                              UnknownData_ABGO[0x7];                                   // 0x0031(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FRawDistributionFloat                               VelocityScale;                                           // 0x0038(0x0038) Edit, ContainsInstancedReference
		struct FRawDistributionVector                              StartLocation;                                           // 0x0070(0x0038) Edit, ContainsInstancedReference

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.ParticleModuleLocationPrimitiveCylinder
	 * Size -> 0x0080 (FullSize[0x0128] - InheritedSize[0x00A8])
	 */
	class UParticleModuleLocationPrimitiveCylinder : public UParticleModuleLocationPrimitiveBase
	{
	public:
		unsigned char                                              RadialVelocity : 1;                                      // 0x00A8(0x0001) BIT_FIELD Edit, NoDestructor
		unsigned char                                              UnknownData_DQ4K[0x7];                                   // 0x00A9(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FRawDistributionFloat                               StartRadius;                                             // 0x00B0(0x0038) Edit, ContainsInstancedReference
		struct FRawDistributionFloat                               StartHeight;                                             // 0x00E8(0x0038) Edit, ContainsInstancedReference
		ECylinderHeightAxis                                        HeightAxis;                                              // 0x0120(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_H25H[0x7];                                   // 0x0121(0x0007) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.ParticleModuleLocationPrimitiveCylinder_Seeded
	 * Size -> 0x0020 (FullSize[0x0148] - InheritedSize[0x0128])
	 */
	class UParticleModuleLocationPrimitiveCylinder_Seeded : public UParticleModuleLocationPrimitiveCylinder
	{
	public:
		struct FParticleRandomSeedInfo                             RandomSeedInfo;                                          // 0x0128(0x0020) Edit

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.ParticleModuleLocationPrimitiveSphere
	 * Size -> 0x0038 (FullSize[0x00E0] - InheritedSize[0x00A8])
	 */
	class UParticleModuleLocationPrimitiveSphere : public UParticleModuleLocationPrimitiveBase
	{
	public:
		struct FRawDistributionFloat                               StartRadius;                                             // 0x00A8(0x0038) Edit, ContainsInstancedReference

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.ParticleModuleLocationPrimitiveSphere_Seeded
	 * Size -> 0x0020 (FullSize[0x0100] - InheritedSize[0x00E0])
	 */
	class UParticleModuleLocationPrimitiveSphere_Seeded : public UParticleModuleLocationPrimitiveSphere
	{
	public:
		struct FParticleRandomSeedInfo                             RandomSeedInfo;                                          // 0x00E0(0x0020) Edit

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.ParticleModuleLocationPrimitiveTriangle
	 * Size -> 0x00E0 (FullSize[0x0110] - InheritedSize[0x0030])
	 */
	class UParticleModuleLocationPrimitiveTriangle : public UParticleModuleLocationBase
	{
	public:
		struct FRawDistributionVector                              StartOffset;                                             // 0x0030(0x0038) Edit, ContainsInstancedReference
		struct FRawDistributionFloat                               Height;                                                  // 0x0068(0x0038) Edit, ContainsInstancedReference
		struct FRawDistributionFloat                               Angle;                                                   // 0x00A0(0x0038) Edit, ContainsInstancedReference
		struct FRawDistributionFloat                               Thickness;                                               // 0x00D8(0x0038) Edit, ContainsInstancedReference

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.ParticleModuleLocationSkelVertSurface
	 * Size -> 0x0060 (FullSize[0x0090] - InheritedSize[0x0030])
	 */
	class UParticleModuleLocationSkelVertSurface : public UParticleModuleLocationBase
	{
	public:
		ELocationSkelVertSurfaceSource                             SourceType;                                              // 0x0030(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_O6ED[0x3];                                   // 0x0031(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FVector                                             UniversalOffset;                                         // 0x0034(0x000C) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              bUpdatePositionEachFrame : 1;                            // 0x0040(0x0001) BIT_FIELD Edit, NoDestructor
		unsigned char                                              bOrientMeshEmitters : 1;                                 // 0x0040(0x0001) BIT_FIELD Edit, NoDestructor
		unsigned char                                              bInheritBoneVelocity : 1;                                // 0x0040(0x0001) BIT_FIELD Edit, NoDestructor
		unsigned char                                              UnknownData_T09Z[0x3];                                   // 0x0041(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FName                                                SkelMeshActorParamName;                                  // 0x0044(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_HA3W[0x4];                                   // 0x004C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class FName>                                        ValidAssociatedBones;                                    // 0x0050(0x0010) Edit, ZeroConstructor
		unsigned char                                              bEnforceNormalCheck : 1;                                 // 0x0060(0x0001) BIT_FIELD Edit, NoDestructor
		unsigned char                                              UnknownData_3XC4[0x3];                                   // 0x0061(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FVector                                             NormalToCompare;                                         // 0x0064(0x000C) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      NormalCheckToleranceDegrees;                             // 0x0070(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      NormalCheckTolerance;                                    // 0x0074(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor
		TArray<int32_t>                                            ValidMaterialIndices;                                    // 0x0078(0x0010) Edit, ZeroConstructor
		unsigned char                                              bInheritVertexColor : 1;                                 // 0x0088(0x0001) BIT_FIELD Edit, NoDestructor
		unsigned char                                              UnknownData_EQWB[0x7];                                   // 0x0089(0x0007) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.ParticleModulePivotOffset
	 * Size -> 0x0008 (FullSize[0x0038] - InheritedSize[0x0030])
	 */
	class UParticleModulePivotOffset : public UParticleModuleLocationBase
	{
	public:
		struct FVector2D                                           PivotOffset;                                             // 0x0030(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.ParticleModuleSourceMovement
	 * Size -> 0x0038 (FullSize[0x0068] - InheritedSize[0x0030])
	 */
	class UParticleModuleSourceMovement : public UParticleModuleLocationBase
	{
	public:
		struct FRawDistributionVector                              SourceMovementScale;                                     // 0x0030(0x0038) Edit, ContainsInstancedReference

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.ParticleModuleMaterialBase
	 * Size -> 0x0000 (FullSize[0x0030] - InheritedSize[0x0030])
	 */
	class UParticleModuleMaterialBase : public UParticleModule
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.ParticleModuleMeshMaterial
	 * Size -> 0x0010 (FullSize[0x0040] - InheritedSize[0x0030])
	 */
	class UParticleModuleMeshMaterial : public UParticleModuleMaterialBase
	{
	public:
		TArray<class UMaterialInterface*>                          MeshMaterials;                                           // 0x0030(0x0010) Edit, ZeroConstructor

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.ParticleModuleOrbitBase
	 * Size -> 0x0008 (FullSize[0x0038] - InheritedSize[0x0030])
	 */
	class UParticleModuleOrbitBase : public UParticleModule
	{
	public:
		unsigned char                                              bUseEmitterTime : 1;                                     // 0x0030(0x0001) BIT_FIELD Edit, NoDestructor
		unsigned char                                              UnknownData_CEQA[0x7];                                   // 0x0031(0x0007) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.ParticleModuleOrbit
	 * Size -> 0x00C8 (FullSize[0x0100] - InheritedSize[0x0038])
	 */
	class UParticleModuleOrbit : public UParticleModuleOrbitBase
	{
	public:
		EOrbitChainMode                                            ChainMode;                                               // 0x0038(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_ODJM[0x7];                                   // 0x0039(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FRawDistributionVector                              OffsetAmount;                                            // 0x0040(0x0038) Edit, ContainsInstancedReference
		struct FOrbitOptions                                       OffsetOptions;                                           // 0x0078(0x0004) Edit
		unsigned char                                              UnknownData_WVSC[0x4];                                   // 0x007C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FRawDistributionVector                              RotationAmount;                                          // 0x0080(0x0038) Edit, ContainsInstancedReference
		struct FOrbitOptions                                       RotationOptions;                                         // 0x00B8(0x0004) Edit
		unsigned char                                              UnknownData_ICRF[0x4];                                   // 0x00BC(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FRawDistributionVector                              RotationRateAmount;                                      // 0x00C0(0x0038) Edit, ContainsInstancedReference
		struct FOrbitOptions                                       RotationRateOptions;                                     // 0x00F8(0x0004) Edit
		unsigned char                                              UnknownData_8TZU[0x4];                                   // 0x00FC(0x0004) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.ParticleModuleOrientationBase
	 * Size -> 0x0000 (FullSize[0x0030] - InheritedSize[0x0030])
	 */
	class UParticleModuleOrientationBase : public UParticleModule
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.ParticleModuleOrientationAxisLock
	 * Size -> 0x0008 (FullSize[0x0038] - InheritedSize[0x0030])
	 */
	class UParticleModuleOrientationAxisLock : public UParticleModuleOrientationBase
	{
	public:
		EParticleAxisLock                                          LockAxisFlags;                                           // 0x0030(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_KL6U[0x7];                                   // 0x0031(0x0007) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.ParticleModuleParameterBase
	 * Size -> 0x0000 (FullSize[0x0030] - InheritedSize[0x0030])
	 */
	class UParticleModuleParameterBase : public UParticleModule
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.ParticleModuleParameterDynamic
	 * Size -> 0x0018 (FullSize[0x0048] - InheritedSize[0x0030])
	 */
	class UParticleModuleParameterDynamic : public UParticleModuleParameterBase
	{
	public:
		TArray<struct FEmitterDynamicParameter>                    DynamicParams;                                           // 0x0030(0x0010) Edit, EditFixedSize, ZeroConstructor, ContainsInstancedReference
		int32_t                                                    UpdateFlags;                                             // 0x0040(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              bUsesVelocity : 1;                                       // 0x0044(0x0001) BIT_FIELD NoDestructor
		unsigned char                                              UnknownData_B2C4[0x3];                                   // 0x0045(0x0003) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.ParticleModuleParameterDynamic_Seeded
	 * Size -> 0x0020 (FullSize[0x0068] - InheritedSize[0x0048])
	 */
	class UParticleModuleParameterDynamic_Seeded : public UParticleModuleParameterDynamic
	{
	public:
		struct FParticleRandomSeedInfo                             RandomSeedInfo;                                          // 0x0048(0x0020) Edit

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.ParticleModuleRequired
	 * Size -> 0x0100 (FullSize[0x0130] - InheritedSize[0x0030])
	 */
	class UParticleModuleRequired : public UParticleModule
	{
	public:
		class UMaterialInterface*                                  Material;                                                // 0x0030(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		struct FVector                                             EmitterOrigin;                                           // 0x0038(0x000C) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		struct FRotator                                            EmitterRotation;                                         // 0x0044(0x000C) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		EParticleScreenAlignment                                   ScreenAlignment;                                         // 0x0050(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_BV1J[0x3];                                   // 0x0051(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		unsigned char                                              bUseLocalSpace : 1;                                      // 0x0054(0x0001) BIT_FIELD Edit, NoDestructor
		unsigned char                                              bKillOnDeactivate : 1;                                   // 0x0054(0x0001) BIT_FIELD Edit, NoDestructor
		unsigned char                                              bKillOnCompleted : 1;                                    // 0x0054(0x0001) BIT_FIELD Edit, NoDestructor
		unsigned char                                              bRequiresSorting : 1;                                    // 0x0054(0x0001) BIT_FIELD Deprecated, NoDestructor
		unsigned char                                              UnknownData_RJCJ[0x3];                                   // 0x0055(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		EParticleSortMode                                          SortMode;                                                // 0x0058(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_TGVT[0x3];                                   // 0x0059(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		unsigned char                                              bUseLegacyEmitterTime : 1;                               // 0x005C(0x0001) BIT_FIELD Edit, NoDestructor
		unsigned char                                              UnknownData_B1D1[0x3];                                   // 0x005D(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      EmitterDuration;                                         // 0x0060(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      EmitterDurationLow;                                      // 0x0064(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              bEmitterDurationUseRange : 1;                            // 0x0068(0x0001) BIT_FIELD Edit, NoDestructor
		unsigned char                                              bDurationRecalcEachLoop : 1;                             // 0x0068(0x0001) BIT_FIELD Edit, NoDestructor
		unsigned char                                              UnknownData_TYF0[0x3];                                   // 0x0069(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int32_t                                                    EmitterLoops;                                            // 0x006C(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		struct FRawDistributionFloat                               SpawnRate;                                               // 0x0070(0x0038) ContainsInstancedReference
		EParticleBurstMethod                                       ParticleBurstMethod;                                     // 0x00A8(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_FLF6[0x7];                                   // 0x00A9(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<struct FParticleBurst>                              BurstList;                                               // 0x00B0(0x0010) ExportObject, ZeroConstructor, NoClear
		float                                                      EmitterDelay;                                            // 0x00C0(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      EmitterDelayLow;                                         // 0x00C4(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              bEmitterDelayUseRange : 1;                               // 0x00C8(0x0001) BIT_FIELD Edit, NoDestructor
		unsigned char                                              bDelayFirstLoopOnly : 1;                                 // 0x00C8(0x0001) BIT_FIELD Edit, NoDestructor
		unsigned char                                              UnknownData_GOJZ[0x3];                                   // 0x00C9(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		EParticleSubUVInterpMethod                                 InterpolationMethod;                                     // 0x00CC(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_FX2Z[0x3];                                   // 0x00CD(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int32_t                                                    SubImages_Horizontal;                                    // 0x00D0(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		int32_t                                                    SubImages_Vertical;                                      // 0x00D4(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              bScaleUV : 1;                                            // 0x00D8(0x0001) BIT_FIELD Edit, NoDestructor
		unsigned char                                              UnknownData_M2AM[0x3];                                   // 0x00D9(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      RandomImageTime;                                         // 0x00DC(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor
		int32_t                                                    RandomImageChanges;                                      // 0x00E0(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              bOverrideSystemMacroUV : 1;                              // 0x00E4(0x0001) BIT_FIELD Edit, NoDestructor
		unsigned char                                              UnknownData_M5UK[0x3];                                   // 0x00E5(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FVector                                             MacroUVPosition;                                         // 0x00E8(0x000C) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      MacroUVRadius;                                           // 0x00F4(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              bUseMaxDrawCount : 1;                                    // 0x00F8(0x0001) BIT_FIELD Edit, NoDestructor
		unsigned char                                              UnknownData_A7LK[0x3];                                   // 0x00F9(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int32_t                                                    MaxDrawCount;                                            // 0x00FC(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		EEmitterNormalsMode                                        EmitterNormalsMode;                                      // 0x0100(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_HLQK[0x3];                                   // 0x0101(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FVector                                             NormalsSphereCenter;                                     // 0x0104(0x000C) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		struct FVector                                             NormalsCylinderDirection;                                // 0x0110(0x000C) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              bOrbitModuleAffectsVelocityAlignment : 1;                // 0x011C(0x0001) BIT_FIELD Edit, NoDestructor
		unsigned char                                              UnknownData_D1EA[0x3];                                   // 0x011D(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class FName>                                        NamedMaterialOverrides;                                  // 0x0120(0x0010) Edit, ZeroConstructor

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.ParticleModuleRotationBase
	 * Size -> 0x0000 (FullSize[0x0030] - InheritedSize[0x0030])
	 */
	class UParticleModuleRotationBase : public UParticleModule
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.ParticleModuleMeshRotation
	 * Size -> 0x0040 (FullSize[0x0070] - InheritedSize[0x0030])
	 */
	class UParticleModuleMeshRotation : public UParticleModuleRotationBase
	{
	public:
		struct FRawDistributionVector                              StartRotation;                                           // 0x0030(0x0038) Edit, ContainsInstancedReference
		unsigned char                                              bInheritParent : 1;                                      // 0x0068(0x0001) BIT_FIELD Edit, NoDestructor
		unsigned char                                              UnknownData_ZTZ7[0x7];                                   // 0x0069(0x0007) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.ParticleModuleMeshRotation_Seeded
	 * Size -> 0x0020 (FullSize[0x0090] - InheritedSize[0x0070])
	 */
	class UParticleModuleMeshRotation_Seeded : public UParticleModuleMeshRotation
	{
	public:
		struct FParticleRandomSeedInfo                             RandomSeedInfo;                                          // 0x0070(0x0020) Edit

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.ParticleModuleRotation
	 * Size -> 0x0038 (FullSize[0x0068] - InheritedSize[0x0030])
	 */
	class UParticleModuleRotation : public UParticleModuleRotationBase
	{
	public:
		struct FRawDistributionFloat                               StartRotation;                                           // 0x0030(0x0038) Edit, ContainsInstancedReference

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.ParticleModuleRotation_Seeded
	 * Size -> 0x0020 (FullSize[0x0088] - InheritedSize[0x0068])
	 */
	class UParticleModuleRotation_Seeded : public UParticleModuleRotation
	{
	public:
		struct FParticleRandomSeedInfo                             RandomSeedInfo;                                          // 0x0068(0x0020) Edit

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.ParticleModuleRotationOverLifetime
	 * Size -> 0x0040 (FullSize[0x0070] - InheritedSize[0x0030])
	 */
	class UParticleModuleRotationOverLifetime : public UParticleModuleRotationBase
	{
	public:
		struct FRawDistributionFloat                               RotationOverLife;                                        // 0x0030(0x0038) Edit, ContainsInstancedReference
		unsigned char                                              Scale : 1;                                               // 0x0068(0x0001) BIT_FIELD Edit, NoDestructor
		unsigned char                                              UnknownData_770F[0x7];                                   // 0x0069(0x0007) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.ParticleModuleRotationRateBase
	 * Size -> 0x0000 (FullSize[0x0030] - InheritedSize[0x0030])
	 */
	class UParticleModuleRotationRateBase : public UParticleModule
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.ParticleModuleMeshRotationRate
	 * Size -> 0x0038 (FullSize[0x0068] - InheritedSize[0x0030])
	 */
	class UParticleModuleMeshRotationRate : public UParticleModuleRotationRateBase
	{
	public:
		struct FRawDistributionVector                              StartRotationRate;                                       // 0x0030(0x0038) Edit, ContainsInstancedReference

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.ParticleModuleRotationRate
	 * Size -> 0x0038 (FullSize[0x0068] - InheritedSize[0x0030])
	 */
	class UParticleModuleRotationRate : public UParticleModuleRotationRateBase
	{
	public:
		struct FRawDistributionFloat                               StartRotationRate;                                       // 0x0030(0x0038) Edit, ContainsInstancedReference

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.ParticleModuleMeshRotationRate_Seeded
	 * Size -> 0x0020 (FullSize[0x0088] - InheritedSize[0x0068])
	 */
	class UParticleModuleMeshRotationRate_Seeded : public UParticleModuleMeshRotationRate
	{
	public:
		struct FParticleRandomSeedInfo                             RandomSeedInfo;                                          // 0x0068(0x0020) Edit

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.ParticleModuleMeshRotationRateMultiplyLife
	 * Size -> 0x0038 (FullSize[0x0068] - InheritedSize[0x0030])
	 */
	class UParticleModuleMeshRotationRateMultiplyLife : public UParticleModuleRotationRateBase
	{
	public:
		struct FRawDistributionVector                              LifeMultiplier;                                          // 0x0030(0x0038) Edit, ContainsInstancedReference

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.ParticleModuleMeshRotationRateOverLife
	 * Size -> 0x0040 (FullSize[0x0070] - InheritedSize[0x0030])
	 */
	class UParticleModuleMeshRotationRateOverLife : public UParticleModuleRotationRateBase
	{
	public:
		struct FRawDistributionVector                              RotRate;                                                 // 0x0030(0x0038) Edit, ContainsInstancedReference
		unsigned char                                              bScaleRotRate : 1;                                       // 0x0068(0x0001) BIT_FIELD Edit, NoDestructor
		unsigned char                                              UnknownData_VL9Y[0x7];                                   // 0x0069(0x0007) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.ParticleModuleRotationRate_Seeded
	 * Size -> 0x0020 (FullSize[0x0088] - InheritedSize[0x0068])
	 */
	class UParticleModuleRotationRate_Seeded : public UParticleModuleRotationRate
	{
	public:
		struct FParticleRandomSeedInfo                             RandomSeedInfo;                                          // 0x0068(0x0020) Edit

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.ParticleModuleRotationRateMultiplyLife
	 * Size -> 0x0038 (FullSize[0x0068] - InheritedSize[0x0030])
	 */
	class UParticleModuleRotationRateMultiplyLife : public UParticleModuleRotationRateBase
	{
	public:
		struct FRawDistributionFloat                               LifeMultiplier;                                          // 0x0030(0x0038) Edit, ContainsInstancedReference

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.ParticleModuleSizeBase
	 * Size -> 0x0000 (FullSize[0x0030] - InheritedSize[0x0030])
	 */
	class UParticleModuleSizeBase : public UParticleModule
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.ParticleModuleSize
	 * Size -> 0x0038 (FullSize[0x0068] - InheritedSize[0x0030])
	 */
	class UParticleModuleSize : public UParticleModuleSizeBase
	{
	public:
		struct FRawDistributionVector                              StartSize;                                               // 0x0030(0x0038) Edit, ContainsInstancedReference

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.ParticleModuleSize_Seeded
	 * Size -> 0x0020 (FullSize[0x0088] - InheritedSize[0x0068])
	 */
	class UParticleModuleSize_Seeded : public UParticleModuleSize
	{
	public:
		struct FParticleRandomSeedInfo                             RandomSeedInfo;                                          // 0x0068(0x0020) Edit

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.ParticleModuleSizeMultiplyLife
	 * Size -> 0x0040 (FullSize[0x0070] - InheritedSize[0x0030])
	 */
	class UParticleModuleSizeMultiplyLife : public UParticleModuleSizeBase
	{
	public:
		struct FRawDistributionVector                              LifeMultiplier;                                          // 0x0030(0x0038) Edit, ContainsInstancedReference
		unsigned char                                              MultiplyX : 1;                                           // 0x0068(0x0001) BIT_FIELD Edit, NoDestructor
		unsigned char                                              MultiplyY : 1;                                           // 0x0068(0x0001) BIT_FIELD Edit, NoDestructor
		unsigned char                                              MultiplyZ : 1;                                           // 0x0068(0x0001) BIT_FIELD Edit, NoDestructor
		unsigned char                                              UnknownData_U4J7[0x7];                                   // 0x0069(0x0007) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.ParticleModuleSizeScale
	 * Size -> 0x0040 (FullSize[0x0070] - InheritedSize[0x0030])
	 */
	class UParticleModuleSizeScale : public UParticleModuleSizeBase
	{
	public:
		struct FRawDistributionVector                              SizeScale;                                               // 0x0030(0x0038) Edit, ContainsInstancedReference
		unsigned char                                              EnableX : 1;                                             // 0x0068(0x0001) BIT_FIELD Edit, NoDestructor
		unsigned char                                              EnableY : 1;                                             // 0x0068(0x0001) BIT_FIELD Edit, NoDestructor
		unsigned char                                              EnableZ : 1;                                             // 0x0068(0x0001) BIT_FIELD Edit, NoDestructor
		unsigned char                                              UnknownData_DOJB[0x7];                                   // 0x0069(0x0007) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.ParticleModuleSizeScaleBySpeed
	 * Size -> 0x0010 (FullSize[0x0040] - InheritedSize[0x0030])
	 */
	class UParticleModuleSizeScaleBySpeed : public UParticleModuleSizeBase
	{
	public:
		struct FVector2D                                           SpeedScale;                                              // 0x0030(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		struct FVector2D                                           MaxScale;                                                // 0x0038(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.ParticleModuleSpawnBase
	 * Size -> 0x0008 (FullSize[0x0038] - InheritedSize[0x0030])
	 */
	class UParticleModuleSpawnBase : public UParticleModule
	{
	public:
		unsigned char                                              bProcessSpawnRate : 1;                                   // 0x0030(0x0001) BIT_FIELD Edit, NoDestructor
		unsigned char                                              bProcessBurstList : 1;                                   // 0x0030(0x0001) BIT_FIELD Edit, NoDestructor
		unsigned char                                              UnknownData_R4M4[0x7];                                   // 0x0031(0x0007) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.ParticleModuleSpawn
	 * Size -> 0x00C0 (FullSize[0x00F8] - InheritedSize[0x0038])
	 */
	class UParticleModuleSpawn : public UParticleModuleSpawnBase
	{
	public:
		struct FRawDistributionFloat                               Rate;                                                    // 0x0038(0x0038) Edit, ContainsInstancedReference
		struct FRawDistributionFloat                               RateScale;                                               // 0x0070(0x0038) Edit, ContainsInstancedReference
		EParticleBurstMethod                                       ParticleBurstMethod;                                     // 0x00A8(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_9NT5[0x7];                                   // 0x00A9(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<struct FParticleBurst>                              BurstList;                                               // 0x00B0(0x0010) Edit, ExportObject, ZeroConstructor, NoClear
		struct FRawDistributionFloat                               BurstScale;                                              // 0x00C0(0x0038) Edit, ContainsInstancedReference

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.ParticleModuleSpawnPerUnit
	 * Size -> 0x0050 (FullSize[0x0088] - InheritedSize[0x0038])
	 */
	class UParticleModuleSpawnPerUnit : public UParticleModuleSpawnBase
	{
	public:
		float                                                      UnitScalar;                                              // 0x0038(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_8XD2[0x4];                                   // 0x003C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FRawDistributionFloat                               SpawnPerUnit;                                            // 0x0040(0x0038) Edit, ContainsInstancedReference
		unsigned char                                              bIgnoreSpawnRateWhenMoving : 1;                          // 0x0078(0x0001) BIT_FIELD Edit, NoDestructor
		unsigned char                                              UnknownData_6FFH[0x3];                                   // 0x0079(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      MovementTolerance;                                       // 0x007C(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      MaxFrameDistance;                                        // 0x0080(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              bIgnoreMovementAlongX : 1;                               // 0x0084(0x0001) BIT_FIELD Edit, NoDestructor
		unsigned char                                              bIgnoreMovementAlongY : 1;                               // 0x0084(0x0001) BIT_FIELD Edit, NoDestructor
		unsigned char                                              bIgnoreMovementAlongZ : 1;                               // 0x0084(0x0001) BIT_FIELD Edit, NoDestructor
		unsigned char                                              UnknownData_TGRW[0x3];                                   // 0x0085(0x0003) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.ParticleModuleSubUVBase
	 * Size -> 0x0000 (FullSize[0x0030] - InheritedSize[0x0030])
	 */
	class UParticleModuleSubUVBase : public UParticleModule
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.ParticleModuleSubUV
	 * Size -> 0x0040 (FullSize[0x0070] - InheritedSize[0x0030])
	 */
	class UParticleModuleSubUV : public UParticleModuleSubUVBase
	{
	public:
		struct FRawDistributionFloat                               SubImageIndex;                                           // 0x0030(0x0038) Edit, ContainsInstancedReference
		unsigned char                                              bUseRealTime : 1;                                        // 0x0068(0x0001) BIT_FIELD Edit, NoDestructor
		unsigned char                                              UnknownData_YQUJ[0x7];                                   // 0x0069(0x0007) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.ParticleModuleSubUVMovie
	 * Size -> 0x0048 (FullSize[0x00B8] - InheritedSize[0x0070])
	 */
	class UParticleModuleSubUVMovie : public UParticleModuleSubUV
	{
	public:
		unsigned char                                              bUseEmitterTime : 1;                                     // 0x0070(0x0001) BIT_FIELD Edit, NoDestructor
		unsigned char                                              UnknownData_4M0Q[0x7];                                   // 0x0071(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FRawDistributionFloat                               FrameRate;                                               // 0x0078(0x0038) Edit, ContainsInstancedReference
		int32_t                                                    StartingFrame;                                           // 0x00B0(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_WD7C[0x4];                                   // 0x00B4(0x0004) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.ParticleModuleTrailBase
	 * Size -> 0x0000 (FullSize[0x0030] - InheritedSize[0x0030])
	 */
	class UParticleModuleTrailBase : public UParticleModule
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.ParticleModuleTrailSource
	 * Size -> 0x0068 (FullSize[0x0098] - InheritedSize[0x0030])
	 */
	class UParticleModuleTrailSource : public UParticleModuleTrailBase
	{
	public:
		ETrail2SourceMethod                                        SourceMethod;                                            // 0x0030(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_TIRD[0x3];                                   // 0x0031(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FName                                                SourceName;                                              // 0x0034(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_NJ3U[0x4];                                   // 0x003C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FRawDistributionFloat                               SourceStrength;                                          // 0x0040(0x0038) Edit, ContainsInstancedReference
		unsigned char                                              bLockSourceStength : 1;                                  // 0x0078(0x0001) BIT_FIELD Edit, NoDestructor
		unsigned char                                              UnknownData_A7VF[0x3];                                   // 0x0079(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int32_t                                                    SourceOffsetCount;                                       // 0x007C(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		TArray<struct FVector>                                     SourceOffsetDefaults;                                    // 0x0080(0x0010) Edit, EditFixedSize, ZeroConstructor
		EParticleSourceSelectionMethod                             SelectionMethod;                                         // 0x0090(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_YN87[0x3];                                   // 0x0091(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		unsigned char                                              bInheritRotation : 1;                                    // 0x0094(0x0001) BIT_FIELD Edit, NoDestructor
		unsigned char                                              UnknownData_FD30[0x3];                                   // 0x0095(0x0003) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.ParticleModuleTypeDataBase
	 * Size -> 0x0000 (FullSize[0x0030] - InheritedSize[0x0030])
	 */
	class UParticleModuleTypeDataBase : public UParticleModule
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.ParticleModuleTypeDataAnimTrail
	 * Size -> 0x0018 (FullSize[0x0048] - InheritedSize[0x0030])
	 */
	class UParticleModuleTypeDataAnimTrail : public UParticleModuleTypeDataBase
	{
	public:
		unsigned char                                              bDeadTrailsOnDeactivate : 1;                             // 0x0030(0x0001) BIT_FIELD Edit, NoDestructor
		unsigned char                                              bEnablePreviousTangentRecalculation : 1;                 // 0x0030(0x0001) BIT_FIELD Edit, NoDestructor
		unsigned char                                              bTangentRecalculationEveryFrame : 1;                     // 0x0030(0x0001) BIT_FIELD Edit, NoDestructor
		unsigned char                                              UnknownData_ZJ1Z[0x3];                                   // 0x0031(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      TilingDistance;                                          // 0x0034(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      DistanceTessellationStepSize;                            // 0x0038(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      TangentTessellationStepSize;                             // 0x003C(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      WidthTessellationStepSize;                               // 0x0040(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_FAU1[0x4];                                   // 0x0044(0x0004) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.ParticleModuleTypeDataBeam2
	 * Size -> 0x00E8 (FullSize[0x0118] - InheritedSize[0x0030])
	 */
	class UParticleModuleTypeDataBeam2 : public UParticleModuleTypeDataBase
	{
	public:
		EBeam2Method                                               BeamMethod;                                              // 0x0030(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_8VGE[0x3];                                   // 0x0031(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int32_t                                                    TextureTile;                                             // 0x0034(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      TextureTileDistance;                                     // 0x0038(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		int32_t                                                    Sheets;                                                  // 0x003C(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		int32_t                                                    MaxBeamCount;                                            // 0x0040(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      Speed;                                                   // 0x0044(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		int32_t                                                    InterpolationPoints;                                     // 0x0048(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              bAlwaysOn : 1;                                           // 0x004C(0x0001) BIT_FIELD Edit, NoDestructor
		unsigned char                                              UnknownData_JTB7[0x3];                                   // 0x004D(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int32_t                                                    UpVectorStepSize;                                        // 0x0050(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		class FName                                                BranchParentName;                                        // 0x0054(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_ASFQ[0x4];                                   // 0x005C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FRawDistributionFloat                               Distance;                                                // 0x0060(0x0038) Edit, ContainsInstancedReference
		EBeamTaperMethod                                           TaperMethod;                                             // 0x0098(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_ILMJ[0x7];                                   // 0x0099(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FRawDistributionFloat                               TaperFactor;                                             // 0x00A0(0x0038) Edit, ContainsInstancedReference
		struct FRawDistributionFloat                               TaperScale;                                              // 0x00D8(0x0038) Edit, ContainsInstancedReference
		unsigned char                                              RenderGeometry : 1;                                      // 0x0110(0x0001) BIT_FIELD Edit, NoDestructor
		unsigned char                                              RenderDirectLine : 1;                                    // 0x0110(0x0001) BIT_FIELD Edit, NoDestructor
		unsigned char                                              RenderLines : 1;                                         // 0x0110(0x0001) BIT_FIELD Edit, NoDestructor
		unsigned char                                              RenderTessellation : 1;                                  // 0x0110(0x0001) BIT_FIELD Edit, NoDestructor
		unsigned char                                              UnknownData_HRGT[0x7];                                   // 0x0111(0x0007) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.ParticleModuleTypeDataGpu
	 * Size -> 0x03E0 (FullSize[0x0410] - InheritedSize[0x0030])
	 */
	class UParticleModuleTypeDataGpu : public UParticleModuleTypeDataBase
	{
	public:
		struct FGPUSpriteEmitterInfo                               EmitterInfo;                                             // 0x0030(0x0280) Transient, ContainsInstancedReference
		struct FGPUSpriteResourceData                              ResourceData;                                            // 0x02B0(0x0150) Transient
		float                                                      CameraMotionBlurAmount;                                  // 0x0400(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_DAV1[0xC];                                   // 0x0404(0x000C) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.ParticleModuleTypeDataMesh
	 * Size -> 0x0070 (FullSize[0x00A0] - InheritedSize[0x0030])
	 */
	class UParticleModuleTypeDataMesh : public UParticleModuleTypeDataBase
	{
	public:
		class UStaticMesh*                                         Mesh;                                                    // 0x0030(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              CastShadows : 1;                                         // 0x0038(0x0001) BIT_FIELD NoDestructor
		unsigned char                                              DoCollisions : 1;                                        // 0x0038(0x0001) BIT_FIELD NoDestructor
		unsigned char                                              UnknownData_W02F[0x3];                                   // 0x0039(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		EMeshScreenAlignment                                       MeshAlignment;                                           // 0x003C(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_AEO0[0x3];                                   // 0x003D(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		unsigned char                                              bOverrideMaterial : 1;                                   // 0x0040(0x0001) BIT_FIELD Edit, NoDestructor
		unsigned char                                              UnknownData_0241[0x3];                                   // 0x0041(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      Pitch;                                                   // 0x0044(0x0004) ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor
		float                                                      Roll;                                                    // 0x0048(0x0004) ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor
		float                                                      Yaw;                                                     // 0x004C(0x0004) ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor
		struct FRawDistributionVector                              RollPitchYawRange;                                       // 0x0050(0x0038) Edit, ContainsInstancedReference
		unsigned char                                              UnknownData_BJ2T[0x8];                                   // 0x0088(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		EParticleAxisLock                                          AxisLockOption;                                          // 0x0090(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_MJCM[0x3];                                   // 0x0091(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		unsigned char                                              bCameraFacing : 1;                                       // 0x0094(0x0001) BIT_FIELD Edit, NoDestructor
		unsigned char                                              UnknownData_99UZ[0x3];                                   // 0x0095(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		EMeshCameraFacingUpAxis                                    CameraFacingUpAxisOption;                                // 0x0098(0x0001) ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor
		EMeshCameraFacingOptions                                   CameraFacingOption;                                      // 0x0099(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_674H[0x2];                                   // 0x009A(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		unsigned char                                              bApplyParticleRotationAsSpin : 1;                        // 0x009C(0x0001) BIT_FIELD Edit, NoDestructor
		unsigned char                                              bFaceCameraDirectionRatherThanPosition : 1;              // 0x009C(0x0001) BIT_FIELD Edit, NoDestructor
		unsigned char                                              UnknownData_EY30[0x3];                                   // 0x009D(0x0003) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.ParticleModuleTypeDataRibbon
	 * Size -> 0x0030 (FullSize[0x0060] - InheritedSize[0x0030])
	 */
	class UParticleModuleTypeDataRibbon : public UParticleModuleTypeDataBase
	{
	public:
		int32_t                                                    MaxTessellationBetweenParticles;                         // 0x0030(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor
		int32_t                                                    SheetsPerTrail;                                          // 0x0034(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		int32_t                                                    MaxTrailCount;                                           // 0x0038(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		int32_t                                                    MaxParticleInTrailCount;                                 // 0x003C(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              bDeadTrailsOnDeactivate : 1;                             // 0x0040(0x0001) BIT_FIELD Edit, NoDestructor
		unsigned char                                              bDeadTrailsOnSourceLoss : 1;                             // 0x0040(0x0001) BIT_FIELD Edit, NoDestructor
		unsigned char                                              bClipSourceSegement : 1;                                 // 0x0040(0x0001) BIT_FIELD Edit, NoDestructor
		unsigned char                                              bEnablePreviousTangentRecalculation : 1;                 // 0x0040(0x0001) BIT_FIELD Edit, NoDestructor
		unsigned char                                              bTangentRecalculationEveryFrame : 1;                     // 0x0040(0x0001) BIT_FIELD Edit, NoDestructor
		unsigned char                                              bSpawnInitialParticle : 1;                               // 0x0040(0x0001) BIT_FIELD Edit, NoDestructor
		unsigned char                                              UnknownData_2P6H[0x3];                                   // 0x0041(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		ETrailsRenderAxisOption                                    RenderAxis;                                              // 0x0044(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_6EKY[0x3];                                   // 0x0045(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      TangentSpawningScalar;                                   // 0x0048(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              bRenderGeometry : 1;                                     // 0x004C(0x0001) BIT_FIELD Edit, NoDestructor
		unsigned char                                              bRenderSpawnPoints : 1;                                  // 0x004C(0x0001) BIT_FIELD Edit, NoDestructor
		unsigned char                                              bRenderTangents : 1;                                     // 0x004C(0x0001) BIT_FIELD Edit, NoDestructor
		unsigned char                                              bRenderTessellation : 1;                                 // 0x004C(0x0001) BIT_FIELD Edit, NoDestructor
		unsigned char                                              UnknownData_NFKR[0x3];                                   // 0x004D(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      TilingDistance;                                          // 0x0050(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      DistanceTessellationStepSize;                            // 0x0054(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              bEnableTangentDiffInterpScale : 1;                       // 0x0058(0x0001) BIT_FIELD Edit, NoDestructor
		unsigned char                                              UnknownData_5AET[0x3];                                   // 0x0059(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      TangentTessellationScalar;                               // 0x005C(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.ParticleModuleVectorFieldBase
	 * Size -> 0x0000 (FullSize[0x0030] - InheritedSize[0x0030])
	 */
	class UParticleModuleVectorFieldBase : public UParticleModule
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.ParticleModuleVectorFieldGlobal
	 * Size -> 0x0010 (FullSize[0x0040] - InheritedSize[0x0030])
	 */
	class UParticleModuleVectorFieldGlobal : public UParticleModuleVectorFieldBase
	{
	public:
		unsigned char                                              bOverrideGlobalVectorFieldTightness : 1;                 // 0x0030(0x0001) BIT_FIELD NoDestructor
		unsigned char                                              UnknownData_UFI8[0x3];                                   // 0x0031(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      GlobalVectorFieldScale;                                  // 0x0034(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      GlobalVectorFieldTightness;                              // 0x0038(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_R748[0x4];                                   // 0x003C(0x0004) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.ParticleModuleVectorFieldLocal
	 * Size -> 0x0038 (FullSize[0x0068] - InheritedSize[0x0030])
	 */
	class UParticleModuleVectorFieldLocal : public UParticleModuleVectorFieldBase
	{
	public:
		class UVectorField*                                        VectorField;                                             // 0x0030(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		struct FVector                                             RelativeTranslation;                                     // 0x0038(0x000C) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		struct FRotator                                            RelativeRotation;                                        // 0x0044(0x000C) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		struct FVector                                             RelativeScale3D;                                         // 0x0050(0x000C) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      Intensity;                                               // 0x005C(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      Tightness;                                               // 0x0060(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              bIgnoreComponentTransform : 1;                           // 0x0064(0x0001) BIT_FIELD Edit, NoDestructor
		unsigned char                                              bTileX : 1;                                              // 0x0064(0x0001) BIT_FIELD Edit, NoDestructor
		unsigned char                                              bTileY : 1;                                              // 0x0064(0x0001) BIT_FIELD Edit, NoDestructor
		unsigned char                                              bTileZ : 1;                                              // 0x0064(0x0001) BIT_FIELD Edit, NoDestructor
		unsigned char                                              UnknownData_TIVE[0x3];                                   // 0x0065(0x0003) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.ParticleModuleVectorFieldRotation
	 * Size -> 0x0018 (FullSize[0x0048] - InheritedSize[0x0030])
	 */
	class UParticleModuleVectorFieldRotation : public UParticleModuleVectorFieldBase
	{
	public:
		struct FVector                                             MinInitialRotation;                                      // 0x0030(0x000C) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		struct FVector                                             MaxInitialRotation;                                      // 0x003C(0x000C) Edit, ZeroConstructor, IsPlainOldData, NoDestructor

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.ParticleModuleVectorFieldRotationRate
	 * Size -> 0x0010 (FullSize[0x0040] - InheritedSize[0x0030])
	 */
	class UParticleModuleVectorFieldRotationRate : public UParticleModuleVectorFieldBase
	{
	public:
		struct FVector                                             RotationRate;                                            // 0x0030(0x000C) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_OKML[0x4];                                   // 0x003C(0x0004) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.ParticleModuleVectorFieldScale
	 * Size -> 0x0008 (FullSize[0x0038] - InheritedSize[0x0030])
	 */
	class UParticleModuleVectorFieldScale : public UParticleModuleVectorFieldBase
	{
	public:
		class UDistributionFloat*                                  VectorFieldScale;                                        // 0x0030(0x0008) Edit, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.ParticleModuleVectorFieldScaleOverLife
	 * Size -> 0x0008 (FullSize[0x0038] - InheritedSize[0x0030])
	 */
	class UParticleModuleVectorFieldScaleOverLife : public UParticleModuleVectorFieldBase
	{
	public:
		class UDistributionFloat*                                  VectorFieldScaleOverLife;                                // 0x0030(0x0008) Edit, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.ParticleModuleVelocityBase
	 * Size -> 0x0008 (FullSize[0x0038] - InheritedSize[0x0030])
	 */
	class UParticleModuleVelocityBase : public UParticleModule
	{
	public:
		unsigned char                                              bInWorldSpace : 1;                                       // 0x0030(0x0001) BIT_FIELD Edit, NoDestructor
		unsigned char                                              bApplyOwnerScale : 1;                                    // 0x0030(0x0001) BIT_FIELD Edit, NoDestructor
		unsigned char                                              UnknownData_PUVB[0x7];                                   // 0x0031(0x0007) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.ParticleModuleVelocity
	 * Size -> 0x0070 (FullSize[0x00A8] - InheritedSize[0x0038])
	 */
	class UParticleModuleVelocity : public UParticleModuleVelocityBase
	{
	public:
		struct FRawDistributionVector                              StartVelocity;                                           // 0x0038(0x0038) Edit, ContainsInstancedReference
		struct FRawDistributionFloat                               StartVelocityRadial;                                     // 0x0070(0x0038) Edit, ContainsInstancedReference

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.ParticleModuleVelocity_Seeded
	 * Size -> 0x0020 (FullSize[0x00C8] - InheritedSize[0x00A8])
	 */
	class UParticleModuleVelocity_Seeded : public UParticleModuleVelocity
	{
	public:
		struct FParticleRandomSeedInfo                             RandomSeedInfo;                                          // 0x00A8(0x0020) Edit

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.ParticleModuleVelocityCone
	 * Size -> 0x0080 (FullSize[0x00B8] - InheritedSize[0x0038])
	 */
	class UParticleModuleVelocityCone : public UParticleModuleVelocityBase
	{
	public:
		struct FRawDistributionFloat                               Angle;                                                   // 0x0038(0x0038) Edit, ContainsInstancedReference
		struct FRawDistributionFloat                               Velocity;                                                // 0x0070(0x0038) Edit, ContainsInstancedReference
		struct FVector                                             Direction;                                               // 0x00A8(0x000C) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_H82U[0x4];                                   // 0x00B4(0x0004) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.ParticleModuleVelocityInheritParent
	 * Size -> 0x0038 (FullSize[0x0070] - InheritedSize[0x0038])
	 */
	class UParticleModuleVelocityInheritParent : public UParticleModuleVelocityBase
	{
	public:
		struct FRawDistributionVector                              Scale;                                                   // 0x0038(0x0038) Edit, ContainsInstancedReference

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.ParticleModuleVelocityOverLifetime
	 * Size -> 0x0040 (FullSize[0x0078] - InheritedSize[0x0038])
	 */
	class UParticleModuleVelocityOverLifetime : public UParticleModuleVelocityBase
	{
	public:
		struct FRawDistributionVector                              VelOverLife;                                             // 0x0038(0x0038) Edit, ContainsInstancedReference
		unsigned char                                              Absolute : 1;                                            // 0x0070(0x0001) BIT_FIELD Edit, ExportObject, NoDestructor
		unsigned char                                              UnknownData_GA2X[0x7];                                   // 0x0071(0x0007) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.ParticleModuleEventSendToGame
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class UParticleModuleEventSendToGame : public UObject
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.ParticleSystemReplay
	 * Size -> 0x0018 (FullSize[0x0040] - InheritedSize[0x0028])
	 */
	class UParticleSystemReplay : public UObject
	{
	public:
		int32_t                                                    ClipIDNumber;                                            // 0x0028(0x0004) Edit, ZeroConstructor, Transient, DuplicateTransient, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_CPES[0x14];                                  // 0x002C(0x0014) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.PhysicsSettings
	 * Size -> 0x0048 (FullSize[0x0070] - InheritedSize[0x0028])
	 */
	class UPhysicsSettings : public UObject
	{
	public:
		float                                                      DefaultGravityZ;                                         // 0x0028(0x0004) Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor
		float                                                      DefaultTerminalVelocity;                                 // 0x002C(0x0004) Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor
		float                                                      DefaultFluidFriction;                                    // 0x0030(0x0004) Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor
		bool                                                       bEnableAsyncScene;                                       // 0x0034(0x0001) Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, AdvancedDisplay
		bool                                                       bEnable2DPhysics;                                        // 0x0035(0x0001) Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor
		ESettingsLockedAxis                                        LockedAxis;                                              // 0x0036(0x0001) Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor
		EFrictionCombineMode                                       FrictionCombineMode;                                     // 0x0037(0x0001) Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor
		float                                                      MaxDepenetrationVelocity;                                // 0x0038(0x0004) Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor
		float                                                      MaxPhysicsDeltaTime;                                     // 0x003C(0x0004) Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor
		bool                                                       bSubstepping;                                            // 0x0040(0x0001) Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_2WWL[0x3];                                   // 0x0041(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      MaxSubstepDeltaTime;                                     // 0x0044(0x0004) Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor
		int32_t                                                    MaxSubsteps;                                             // 0x0048(0x0004) Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor
		float                                                      Server_MaxSubstepDeltaTime;                              // 0x004C(0x0004) Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor
		int32_t                                                    Server_MaxSubsteps;                                      // 0x0050(0x0004) Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor
		float                                                      SyncSceneSmoothingFactor;                                // 0x0054(0x0004) Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, AdvancedDisplay
		float                                                      AsyncSceneSmoothingFactor;                               // 0x0058(0x0004) Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, AdvancedDisplay
		float                                                      InitialAverageFrameRate;                                 // 0x005C(0x0004) Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, AdvancedDisplay
		TArray<struct FPhysicalSurfaceName>                        PhysicalSurfaces;                                        // 0x0060(0x0010) ZeroConstructor, Config

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.PhysicalMaterial
	 * Size -> 0x0050 (FullSize[0x0078] - InheritedSize[0x0028])
	 */
	class UPhysicalMaterial : public UObject
	{
	public:
		float                                                      Friction;                                                // 0x0028(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		EFrictionCombineMode                                       FrictionCombineMode;                                     // 0x002C(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		bool                                                       bOverrideFrictionCombineMode;                            // 0x002D(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_9PZR[0x2];                                   // 0x002E(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      Restitution;                                             // 0x0030(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      Density;                                                 // 0x0034(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      RaiseMassToPower;                                        // 0x0038(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      DestructibleDamageThresholdScale;                        // 0x003C(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		class UPhysicalMaterialPropertyBase*                       PhysicalMaterialProperty;                                // 0x0040(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor
		EPhysicalSurface                                           SurfaceType;                                             // 0x0048(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_RDMX[0x3];                                   // 0x0049(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      TireFrictionScale;                                       // 0x004C(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		TArray<struct FTireFrictionScalePair>                      TireFrictionScales;                                      // 0x0050(0x0010) Edit, ZeroConstructor
		unsigned char                                              UnknownData_CRYH[0x18];                                  // 0x0060(0x0018) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.PhysicalMaterialPropertyBase
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class UPhysicalMaterialPropertyBase : public UObject
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.PhysicsAsset
	 * Size -> 0x00D0 (FullSize[0x00F8] - InheritedSize[0x0028])
	 */
	class UPhysicsAsset : public UObject
	{
	public:
		TArray<class UBodySetup*>                                  BodySetup;                                               // 0x0028(0x0010) ExportObject, ZeroConstructor, ContainsInstancedReference
		TArray<int32_t>                                            BoundsBodies;                                            // 0x0038(0x0010) ZeroConstructor
		TArray<class UPhysicsConstraintTemplate*>                  ConstraintSetup;                                         // 0x0048(0x0010) ExportObject, ZeroConstructor, ContainsInstancedReference
		unsigned char                                              UnknownData_CTNT[0xA0];                                  // 0x0058(0x00A0) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.PhysicsCollisionHandler
	 * Size -> 0x0018 (FullSize[0x0040] - InheritedSize[0x0028])
	 */
	class UPhysicsCollisionHandler : public UObject
	{
	public:
		float                                                      ImpactThreshold;                                         // 0x0028(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      ImpactReFireDelay;                                       // 0x002C(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		class USoundBase*                                          DefaultImpactSound;                                      // 0x0030(0x0008) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      LastImpactSoundTime;                                     // 0x0038(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_1VQW[0x4];                                   // 0x003C(0x0004) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.PhysicsConstraintTemplate
	 * Size -> 0x0218 (FullSize[0x0240] - InheritedSize[0x0028])
	 */
	class UPhysicsConstraintTemplate : public UObject
	{
	public:
		class FName                                                JointName;                                               // 0x0028(0x0008) ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor
		class FName                                                ConstraintBone1;                                         // 0x0030(0x0008) ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor
		class FName                                                ConstraintBone2;                                         // 0x0038(0x0008) ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor
		struct FVector                                             Pos1;                                                    // 0x0040(0x000C) ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor
		struct FVector                                             PriAxis1;                                                // 0x004C(0x000C) ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor
		struct FVector                                             SecAxis1;                                                // 0x0058(0x000C) ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor
		struct FVector                                             Pos2;                                                    // 0x0064(0x000C) ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor
		struct FVector                                             PriAxis2;                                                // 0x0070(0x000C) ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor
		struct FVector                                             SecAxis2;                                                // 0x007C(0x000C) ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor
		unsigned char                                              bEnableProjection : 1;                                   // 0x0088(0x0001) BIT_FIELD Deprecated, NoDestructor
		unsigned char                                              UnknownData_P8UO[0x3];                                   // 0x0089(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      ProjectionLinearTolerance;                               // 0x008C(0x0004) ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor
		float                                                      ProjectionAngularTolerance;                              // 0x0090(0x0004) ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor
		ELinearConstraintMotion                                    LinearXMotion;                                           // 0x0094(0x0001) ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor
		ELinearConstraintMotion                                    LinearYMotion;                                           // 0x0095(0x0001) ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor
		ELinearConstraintMotion                                    LinearZMotion;                                           // 0x0096(0x0001) ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_A0NX[0x1];                                   // 0x0097(0x0001) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      LinearLimitSize;                                         // 0x0098(0x0004) ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor
		unsigned char                                              bLinearLimitSoft : 1;                                    // 0x009C(0x0001) BIT_FIELD Deprecated, NoDestructor
		unsigned char                                              UnknownData_Q45B[0x3];                                   // 0x009D(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      LinearLimitStiffness;                                    // 0x00A0(0x0004) ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor
		float                                                      LinearLimitDamping;                                      // 0x00A4(0x0004) ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor
		unsigned char                                              bLinearBreakable : 1;                                    // 0x00A8(0x0001) BIT_FIELD Deprecated, NoDestructor
		unsigned char                                              UnknownData_LWTN[0x3];                                   // 0x00A9(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      LinearBreakThreshold;                                    // 0x00AC(0x0004) ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor
		unsigned char                                              bSwingLimited : 1;                                       // 0x00B0(0x0001) BIT_FIELD Deprecated, NoDestructor
		unsigned char                                              bTwistLimited : 1;                                       // 0x00B0(0x0001) BIT_FIELD Deprecated, NoDestructor
		unsigned char                                              UnknownData_23GN[0x3];                                   // 0x00B1(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		EAngularConstraintMotion                                   AngularSwing1Motion;                                     // 0x00B4(0x0001) ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor
		EAngularConstraintMotion                                   AngularSwing2Motion;                                     // 0x00B5(0x0001) ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor
		EAngularConstraintMotion                                   AngularTwistMotion;                                      // 0x00B6(0x0001) ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_E9GR[0x1];                                   // 0x00B7(0x0001) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		unsigned char                                              bSwingLimitSoft : 1;                                     // 0x00B8(0x0001) BIT_FIELD Deprecated, NoDestructor
		unsigned char                                              bTwistLimitSoft : 1;                                     // 0x00B8(0x0001) BIT_FIELD Deprecated, NoDestructor
		unsigned char                                              UnknownData_6WUE[0x3];                                   // 0x00B9(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      Swing1LimitAngle;                                        // 0x00BC(0x0004) ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor
		float                                                      Swing2LimitAngle;                                        // 0x00C0(0x0004) ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor
		float                                                      TwistLimitAngle;                                         // 0x00C4(0x0004) ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor
		float                                                      SwingLimitStiffness;                                     // 0x00C8(0x0004) ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor
		float                                                      SwingLimitDamping;                                       // 0x00CC(0x0004) ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor
		float                                                      TwistLimitStiffness;                                     // 0x00D0(0x0004) ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor
		float                                                      TwistLimitDamping;                                       // 0x00D4(0x0004) ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor
		unsigned char                                              bAngularBreakable : 1;                                   // 0x00D8(0x0001) BIT_FIELD Deprecated, NoDestructor
		unsigned char                                              UnknownData_0K7I[0x3];                                   // 0x00D9(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      AngularBreakThreshold;                                   // 0x00DC(0x0004) ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor
		struct FConstraintInstance                                 DefaultInstance;                                         // 0x00E0(0x0160) Edit, ContainsInstancedReference

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.PlatformInterfaceBase
	 * Size -> 0x0010 (FullSize[0x0038] - InheritedSize[0x0028])
	 */
	class UPlatformInterfaceBase : public UObject
	{
	public:
		TArray<struct FDelegateArray>                              AllDelegates;                                            // 0x0028(0x0010) ZeroConstructor, ContainsInstancedReference

	public:
		void PlatformInterfaceDelegate__DelegateSignature(const struct FPlatformInterfaceDelegateResult& Result);
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.CloudStorageBase
	 * Size -> 0x0018 (FullSize[0x0050] - InheritedSize[0x0038])
	 */
	class UCloudStorageBase : public UPlatformInterfaceBase
	{
	public:
		TArray<class FString>                                      LocalCloudFiles;                                         // 0x0038(0x0010) ZeroConstructor
		unsigned char                                              bSuppressDelegateCalls : 1;                              // 0x0048(0x0001) BIT_FIELD NoDestructor
		unsigned char                                              UnknownData_PXYP[0x7];                                   // 0x0049(0x0007) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.InGameAdManager
	 * Size -> 0x0028 (FullSize[0x0060] - InheritedSize[0x0038])
	 */
	class UInGameAdManager : public UPlatformInterfaceBase
	{
	public:
		unsigned char                                              bShouldPauseWhileAdOpen : 1;                             // 0x0038(0x0001) BIT_FIELD NoDestructor
		unsigned char                                              UnknownData_IZ37[0x7];                                   // 0x0039(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class FScriptDelegate>                              ClickedBannerDelegates;                                  // 0x0040(0x0010) ZeroConstructor, ContainsInstancedReference
		TArray<class FScriptDelegate>                              ClosedAdDelegates;                                       // 0x0050(0x0010) ZeroConstructor, ContainsInstancedReference

	public:
		void OnUserClosedAdvertisement__DelegateSignature();
		void OnUserClickedBanner__DelegateSignature();
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.MicroTransactionBase
	 * Size -> 0x0030 (FullSize[0x0068] - InheritedSize[0x0038])
	 */
	class UMicroTransactionBase : public UPlatformInterfaceBase
	{
	public:
		TArray<struct FPurchaseInfo>                               AvailableProducts;                                       // 0x0038(0x0010) ZeroConstructor
		class FString                                              LastError;                                               // 0x0048(0x0010) ZeroConstructor
		class FString                                              LastErrorSolution;                                       // 0x0058(0x0010) ZeroConstructor

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.TwitterIntegrationBase
	 * Size -> 0x0000 (FullSize[0x0038] - InheritedSize[0x0038])
	 */
	class UTwitterIntegrationBase : public UPlatformInterfaceBase
	{
	public:
		bool TwitterRequest(const class FString& URL, TArray<class FString> ParamKeysAndValues, ETwitterRequestMethod RequestMethod, int32_t AccountIndex);
		bool ShowTweetUI(const class FString& InitialMessage, const class FString& URL, const class FString& Picture);
		void Init();
		int32_t GetNumAccounts();
		class FString GetAccountName(int32_t AccountIndex);
		bool CanShowTweetUI();
		bool AuthorizeAccounts();
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.PlatformInterfaceWebResponse
	 * Size -> 0x0088 (FullSize[0x00B0] - InheritedSize[0x0028])
	 */
	class UPlatformInterfaceWebResponse : public UObject
	{
	public:
		class FString                                              OriginalURL;                                             // 0x0028(0x0010) ZeroConstructor
		int32_t                                                    ResponseCode;                                            // 0x0038(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor
		int32_t                                                    Tag;                                                     // 0x003C(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor
		class FString                                              StringResponse;                                          // 0x0040(0x0010) ZeroConstructor
		TArray<unsigned char>                                      BinaryResponse;                                          // 0x0050(0x0010) ZeroConstructor
		unsigned char                                              UnknownData_XHYA[0x50];                                  // 0x0060(0x0050) MISSED OFFSET (PADDING)

	public:
		int32_t GetNumHeaders();
		class FString GetHeaderValue(const class FString& HeaderName);
		void GetHeader(int32_t HeaderIndex, class FString* Header, class FString* Value);
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.ChildConnection
	 * Size -> 0x0008 (FullSize[0x34340] - InheritedSize[0x34338])
	 */
	class UChildConnection : public UNetConnection
	{
	public:
		class UNetConnection*                                      Parent;                                                  // 0x34338(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.Polys
	 * Size -> 0x0018 (FullSize[0x0040] - InheritedSize[0x0028])
	 */
	class UPolys : public UObject
	{
	public:
		unsigned char                                              UnknownData_NX1I[0x18];                                  // 0x0028(0x0018) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.ReflectionCaptureData
	 * Size -> 0x0058 (FullSize[0x0080] - InheritedSize[0x0028])
	 */
	class UReflectionCaptureData : public UObject
	{
	public:
		class FString                                              ComponentName;                                           // 0x0028(0x0010) ZeroConstructor
		unsigned char                                              UnknownData_47MA[0x48];                                  // 0x0038(0x0048) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.RendererSettings
	 * Size -> 0x0120 (FullSize[0x0148] - InheritedSize[0x0028])
	 */
	class URendererSettings : public UObject
	{
	public:
		unsigned char                                              bMobileHDR : 1;                                          // 0x0028(0x0001) BIT_FIELD Edit, Config, NoDestructor
		unsigned char                                              bOcclusionCulling : 1;                                   // 0x0028(0x0001) BIT_FIELD Edit, Config, NoDestructor
		unsigned char                                              UnknownData_KD8Q[0x3];                                   // 0x0029(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      MinScreenRadiusForLights;                                // 0x002C(0x0004) Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor
		float                                                      MinScreenRadiusForEarlyZPass;                            // 0x0030(0x0004) Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor
		float                                                      MinScreenRadiusForCSMdepth;                              // 0x0034(0x0004) Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor
		unsigned char                                              bPrecomputedVisibilityWarning : 1;                       // 0x0038(0x0001) BIT_FIELD Edit, Config, NoDestructor
		unsigned char                                              bTextureStreaming : 1;                                   // 0x0038(0x0001) BIT_FIELD Edit, Config, NoDestructor
		unsigned char                                              bUseDXT5NormalMaps : 1;                                  // 0x0038(0x0001) BIT_FIELD Edit, Config, NoDestructor
		unsigned char                                              bAllowStaticLighting : 1;                                // 0x0038(0x0001) BIT_FIELD Edit, Config, NoDestructor
		unsigned char                                              bUseNormalMapsForStaticLighting : 1;                     // 0x0038(0x0001) BIT_FIELD Edit, Config, NoDestructor
		unsigned char                                              bGBuffer : 1;                                            // 0x0038(0x0001) BIT_FIELD Edit, Config, NoDestructor
		unsigned char                                              bGenerateMeshDistanceFields : 1;                         // 0x0038(0x0001) BIT_FIELD Edit, Config, NoDestructor
		unsigned char                                              UnknownData_F6R8[0x3];                                   // 0x0039(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      DistanceFieldPenumbraSize;                               // 0x003C(0x0004) Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor
		float                                                      TessellationAdaptivePixelsPerTriangle;                   // 0x0040(0x0004) Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor
		unsigned char                                              bSeparateTranslucency : 1;                               // 0x0044(0x0001) BIT_FIELD Edit, Config, NoDestructor
		unsigned char                                              UnknownData_TFP5[0x3];                                   // 0x0045(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		ECustomDepth                                               CustomDepth;                                             // 0x0048(0x0001) Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_LAI8[0x3];                                   // 0x0049(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		unsigned char                                              bDefaultFeatureBloom : 1;                                // 0x004C(0x0001) BIT_FIELD Edit, Config, NoDestructor
		unsigned char                                              bDefaultFeatureAmbientOcclusion : 1;                     // 0x004C(0x0001) BIT_FIELD Edit, Config, NoDestructor
		unsigned char                                              bDefaultFeatureAutoExposure : 1;                         // 0x004C(0x0001) BIT_FIELD Edit, Config, NoDestructor
		unsigned char                                              bDefaultFeatureMotionBlur : 1;                           // 0x004C(0x0001) BIT_FIELD Edit, Config, NoDestructor
		unsigned char                                              bDefaultFeatureLensFlare : 1;                            // 0x004C(0x0001) BIT_FIELD Edit, Config, NoDestructor
		unsigned char                                              UnknownData_053Y[0x3];                                   // 0x004D(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		EAntiAliasingMethodUI                                      DefaultFeatureAntiAliasing;                              // 0x0050(0x0001) Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor
		EDefaultBackBufferPixelFormat                              DefaultBackBufferPixelFormat;                            // 0x0051(0x0001) Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, AdvancedDisplay
		unsigned char                                              UnknownData_KC9U[0x2];                                   // 0x0052(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		unsigned char                                              bEarlyZPassMovable : 1;                                  // 0x0054(0x0001) BIT_FIELD Edit, Config, NoDestructor
		unsigned char                                              UnknownData_GLLQ[0x3];                                   // 0x0055(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		EClearSceneOptions                                         ClearSceneMethod;                                        // 0x0058(0x0001) Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor
		ECompositingSampleCount                                    EditorPrimitiveMSAA;                                     // 0x0059(0x0001) Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_N049[0x2];                                   // 0x005A(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      WireframeCullThreshold;                                  // 0x005C(0x0004) Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor
		EUIScalingRule                                             UIScaleRule;                                             // 0x0060(0x0001) Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_HIXC[0x7];                                   // 0x0061(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FRuntimeFloatCurve                                  UIScaleCurve;                                            // 0x0068(0x0070) Edit, Config
		struct FRuntimeFloatCurve                                  UIScaleCurveX;                                           // 0x00D8(0x0070) Edit, Config

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.ReporterBase
	 * Size -> 0x0008 (FullSize[0x0030] - InheritedSize[0x0028])
	 */
	class UReporterBase : public UObject
	{
	public:
		unsigned char                                              UnknownData_I7GQ[0x8];                                   // 0x0028(0x0008) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.ReporterGraph
	 * Size -> 0x0070 (FullSize[0x00A0] - InheritedSize[0x0030])
	 */
	class UReporterGraph : public UReporterBase
	{
	public:
		unsigned char                                              UnknownData_OL3N[0x70];                                  // 0x0030(0x0070) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.ReverbEffect
	 * Size -> 0x0030 (FullSize[0x0058] - InheritedSize[0x0028])
	 */
	class UReverbEffect : public UObject
	{
	public:
		float                                                      Density;                                                 // 0x0028(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      Diffusion;                                               // 0x002C(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      Gain;                                                    // 0x0030(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      GainHF;                                                  // 0x0034(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      DecayTime;                                               // 0x0038(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      DecayHFRatio;                                            // 0x003C(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      ReflectionsGain;                                         // 0x0040(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      ReflectionsDelay;                                        // 0x0044(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      LateGain;                                                // 0x0048(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      LateDelay;                                               // 0x004C(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      AirAbsorptionGainHF;                                     // 0x0050(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      RoomRolloffFactor;                                       // 0x0054(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.Rig
	 * Size -> 0x0020 (FullSize[0x0048] - InheritedSize[0x0028])
	 */
	class URig : public UObject
	{
	public:
		TArray<struct FTransformBase>                              TransformBases;                                          // 0x0028(0x0010) Edit, EditFixedSize, ZeroConstructor
		TArray<struct FNode>                                       Nodes;                                                   // 0x0038(0x0010) Edit, EditFixedSize, ZeroConstructor

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.RuntimeMovieScenePlayerInterface
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class URuntimeMovieScenePlayerInterface : public UInterface
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.SaveGameSummary
	 * Size -> 0x0018 (FullSize[0x0040] - InheritedSize[0x0028])
	 */
	class USaveGameSummary : public UObject
	{
	public:
		class FName                                                BaseLevel;                                               // 0x0028(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor
		class FString                                              Description;                                             // 0x0030(0x0010) ZeroConstructor

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.SCS_Node
	 * Size -> 0x0070 (FullSize[0x0098] - InheritedSize[0x0028])
	 */
	class USCS_Node : public UObject
	{
	public:
		class UActorComponent*                                     ComponentTemplate;                                       // 0x0028(0x0008) ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor
		class FName                                                VariableName;                                            // 0x0030(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor
		class FName                                                CategoryName;                                            // 0x0038(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor
		class FName                                                AttachToName;                                            // 0x0040(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor
		class FName                                                ParentComponentOrVariableName;                           // 0x0048(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor
		class FName                                                ParentComponentOwnerClassName;                           // 0x0050(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor
		bool                                                       bIsParentComponentNative;                                // 0x0058(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_XIDQ[0x7];                                   // 0x0059(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class USCS_Node*>                                   ChildNodes;                                              // 0x0060(0x0010) ZeroConstructor
		TArray<struct FBPVariableMetaDataEntry>                    MetaDataArray;                                           // 0x0070(0x0010) Edit, ZeroConstructor
		bool                                                       bIsFalseRoot;                                            // 0x0080(0x0001) ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor
		bool                                                       bIsNative;                                               // 0x0081(0x0001) ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_G454[0x2];                                   // 0x0082(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FName                                                NativeComponentName;                                     // 0x0084(0x0008) ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor
		bool                                                       bVariableNameAutoGenerated;                              // 0x008C(0x0001) ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_MOAF[0xB];                                   // 0x008D(0x000B) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.Selection
	 * Size -> 0x0030 (FullSize[0x0058] - InheritedSize[0x0028])
	 */
	class USelection : public UObject
	{
	public:
		unsigned char                                              UnknownData_66WV[0x30];                                  // 0x0028(0x0030) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.SimpleConstructionScript
	 * Size -> 0x0030 (FullSize[0x0058] - InheritedSize[0x0028])
	 */
	class USimpleConstructionScript : public UObject
	{
	public:
		TArray<class USCS_Node*>                                   RootNodes;                                               // 0x0028(0x0010) ZeroConstructor
		class USCS_Node*                                           DefaultSceneRootNode;                                    // 0x0038(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor
		class USCS_Node*                                           RootNode;                                                // 0x0040(0x0008) ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor
		TArray<class USCS_Node*>                                   ActorComponentNodes;                                     // 0x0048(0x0010) ZeroConstructor, Deprecated

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.DestructibleMesh
	 * Size -> 0x00B8 (FullSize[0x0380] - InheritedSize[0x02C8])
	 */
	class UDestructibleMesh : public USkeletalMesh
	{
	public:
		struct FDestructibleParameters                             DefaultDestructibleParameters;                           // 0x02C8(0x0078) Edit
		class UPhysicalMaterial*                                   DestructiblePhysicalMaterial;                            // 0x0340(0x0008) ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor
		ESleepFamily                                               PhysicsSleepFamily;                                      // 0x0348(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_83TN[0x7];                                   // 0x0349(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<struct FFractureEffect>                             FractureEffects;                                         // 0x0350(0x0010) Edit, EditFixedSize, ZeroConstructor
		class UBodySetup*                                          BodySetup;                                               // 0x0360(0x0008) Edit, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_N7Q7[0x18];                                  // 0x0368(0x0018) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.SkeletalMeshSocket
	 * Size -> 0x0038 (FullSize[0x0060] - InheritedSize[0x0028])
	 */
	class USkeletalMeshSocket : public UObject
	{
	public:
		class FName                                                SocketName;                                              // 0x0028(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor
		class FName                                                BoneName;                                                // 0x0030(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor
		struct FVector                                             RelativeLocation;                                        // 0x0038(0x000C) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor
		struct FRotator                                            RelativeRotation;                                        // 0x0044(0x000C) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor
		struct FVector                                             RelativeScale;                                           // 0x0050(0x000C) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              bRotateBoneScaleForSocket : 1;                           // 0x005C(0x0001) BIT_FIELD Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor
		unsigned char                                              UnknownData_FTJH[0x3];                                   // 0x005D(0x0003) MISSED OFFSET (PADDING)

	public:
		void InitializeSocketFromLocation(class USkeletalMeshComponent* SkelComp, const struct FVector& WorldLocation, const struct FVector& WorldNormal);
		struct FVector GetSocketLocation(class USkeletalMeshComponent* SkelComp);
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.SkyLightData
	 * Size -> 0x00A0 (FullSize[0x00C8] - InheritedSize[0x0028])
	 */
	class USkyLightData : public UObject
	{
	public:
		class FString                                              ComponentName;                                           // 0x0028(0x0010) ZeroConstructor
		unsigned char                                              UnknownData_ZFTS[0x90];                                  // 0x0038(0x0090) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.SlateBrushAsset
	 * Size -> 0x0078 (FullSize[0x00A0] - InheritedSize[0x0028])
	 */
	class USlateBrushAsset : public UObject
	{
	public:
		struct FSlateBrush                                         Brush;                                                   // 0x0028(0x0078) Edit

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.SoundBase
	 * Size -> 0x0030 (FullSize[0x0058] - InheritedSize[0x0028])
	 */
	class USoundBase : public UObject
	{
	public:
		class FName                                                SoundClass;                                              // 0x0028(0x0008) ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor
		class USoundClass*                                         SoundClassObject;                                        // 0x0030(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              bDebug : 1;                                              // 0x0038(0x0001) BIT_FIELD Edit, NoDestructor
		unsigned char                                              bForceStopFarthestThenOldest : 1;                        // 0x0038(0x0001) BIT_FIELD Transient, NoDestructor
		unsigned char                                              UnknownData_8Q8X[0x3];                                   // 0x0039(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		EMaxConcurrentResolutionRule                               MaxConcurrentResolutionRule;                             // 0x003C(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_508B[0x3];                                   // 0x003D(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int32_t                                                    MaxConcurrentPlayCount;                                  // 0x0040(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      Duration;                                                // 0x0044(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, AssetRegistrySearchable
		class USoundAttenuation*                                   AttenuationSettings;                                     // 0x0048(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_7AJ4[0x8];                                   // 0x0050(0x0008) MISSED OFFSET (PADDING)

	public:
		float GetDuration();
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.DialogueSoundWaveProxy
	 * Size -> 0x0018 (FullSize[0x0070] - InheritedSize[0x0058])
	 */
	class UDialogueSoundWaveProxy : public USoundBase
	{
	public:
		unsigned char                                              UnknownData_F91K[0x18];                                  // 0x0058(0x0018) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.SoundCue
	 * Size -> 0x0088 (FullSize[0x00E0] - InheritedSize[0x0058])
	 */
	class USoundCue : public USoundBase
	{
	public:
		unsigned char                                              bOverrideAttenuation : 1;                                // 0x0058(0x0001) BIT_FIELD Edit, NoDestructor
		unsigned char                                              UnknownData_DJAK[0x7];                                   // 0x0059(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class USoundNode*                                          FirstNode;                                               // 0x0060(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      VolumeMultiplier;                                        // 0x0068(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable
		float                                                      PitchMultiplier;                                         // 0x006C(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable
		struct FAttenuationSettings                                AttenuationOverrides;                                    // 0x0070(0x0034) Edit
		unsigned char                                              SubtitleColorIndex;                                      // 0x00A4(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_QZV0[0x3];                                   // 0x00A5(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<struct FSubtitleCue>                                Subtitles;                                               // 0x00A8(0x0010) Edit, BlueprintVisible, ZeroConstructor
		TArray<struct FLocalizedSpokenText>                        LocalizedSpokenTexts;                                    // 0x00B8(0x0010) Edit, BlueprintVisible, ZeroConstructor
		struct FStringAssetReference                               AnimTexture;                                             // 0x00C8(0x0010) Edit, BlueprintVisible, ZeroConstructor
		unsigned char                                              UnknownData_6ULK[0x8];                                   // 0x00D8(0x0008) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.SoundGroups
	 * Size -> 0x0060 (FullSize[0x0088] - InheritedSize[0x0028])
	 */
	class USoundGroups : public UObject
	{
	public:
		TArray<struct FSoundGroup>                                 SoundGroupProfiles;                                      // 0x0028(0x0010) ZeroConstructor, Config
		unsigned char                                              UnknownData_I6QI[0x50];                                  // 0x0038(0x0050) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.SoundWave
	 * Size -> 0x01A8 (FullSize[0x0200] - InheritedSize[0x0058])
	 */
	class USoundWave : public USoundBase
	{
	public:
		int32_t                                                    CompressionQuality;                                      // 0x0058(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable
		unsigned char                                              bLooping : 1;                                            // 0x005C(0x0001) BIT_FIELD Edit, NoDestructor
		unsigned char                                              bStreamingReserved : 1;                                  // 0x005C(0x0001) BIT_FIELD Edit, NoDestructor
		unsigned char                                              bReallyUseStreamingReserved : 1;                         // 0x005C(0x0001) BIT_FIELD Edit, NoDestructor
		unsigned char                                              UnknownData_B5N1[0x3];                                   // 0x005D(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int32_t                                                    StreamingPriority;                                       // 0x0060(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_TMV4 : 3;                                    // 0x0064(0x0001) BIT_FIELD (PADDING)
		unsigned char                                              bMature : 1;                                             // 0x0064(0x0001) BIT_FIELD Edit, BlueprintReadOnly, NoDestructor, AssetRegistrySearchable
		unsigned char                                              bManualWordWrap : 1;                                     // 0x0064(0x0001) BIT_FIELD Edit, BlueprintReadOnly, NoDestructor
		unsigned char                                              bSingleLine : 1;                                         // 0x0064(0x0001) BIT_FIELD Edit, BlueprintReadOnly, NoDestructor
		unsigned char                                              UnknownData_V38L : 1;                                    // 0x0064(0x0001) BIT_FIELD (PADDING)
		unsigned char                                              bApplyRadioFilterOverride : 1;                           // 0x0064(0x0001) BIT_FIELD Edit, NoDestructor
		unsigned char                                              bForceAllowStreaming : 1;                                // 0x0065(0x0001) BIT_FIELD Edit, NoDestructor
		unsigned char                                              UnknownData_7ZL3[0x2];                                   // 0x0066(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		ESoundGroup                                                SoundGroup;                                              // 0x0068(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_P1V7[0x7];                                   // 0x0069(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FString                                              SpokenText;                                              // 0x0070(0x0010) Edit, ZeroConstructor
		TArray<struct FLocalizedSpokenText>                        LocalizedSpokenTexts;                                    // 0x0080(0x0010) Edit, ZeroConstructor
		unsigned char                                              SubtitleColorIndex;                                      // 0x0090(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_FF3V[0x3];                                   // 0x0091(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      Volume;                                                  // 0x0094(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      Pitch;                                                   // 0x0098(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		int32_t                                                    NumChannels;                                             // 0x009C(0x0004) Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, AssetRegistrySearchable
		int32_t                                                    SampleRate;                                              // 0x00A0(0x0004) Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, AssetRegistrySearchable
		int32_t                                                    RawPCMDataSize;                                          // 0x00A4(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor
		TArray<struct FSubtitleCue>                                Subtitles;                                               // 0x00A8(0x0010) ZeroConstructor, Transient
		TArray<struct FLocalizedSubtitle>                          LocalizedSubtitles;                                      // 0x00B8(0x0010) ZeroConstructor, Transient
		unsigned char                                              UnknownData_CWKS[0x138];                                 // 0x00C8(0x0138) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.SoundWaveStreaming
	 * Size -> 0x0018 (FullSize[0x0218] - InheritedSize[0x0200])
	 */
	class USoundWaveStreaming : public USoundWave
	{
	public:
		unsigned char                                              UnknownData_NVJ5[0x18];                                  // 0x0200(0x0018) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.SoundClass
	 * Size -> 0x0060 (FullSize[0x0088] - InheritedSize[0x0028])
	 */
	class USoundClass : public UObject
	{
	public:
		struct FSoundClassProperties                               Properties;                                              // 0x0028(0x0024) Edit
		unsigned char                                              UnknownData_NRM8[0x4];                                   // 0x004C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class USoundClass*>                                 ChildClasses;                                            // 0x0050(0x0010) Edit, ZeroConstructor
		TArray<struct FPassiveSoundMixModifier>                    PassiveSoundMixModifiers;                                // 0x0060(0x0010) Edit, ZeroConstructor
		TArray<class FName>                                        ChildClassNames;                                         // 0x0070(0x0010) ZeroConstructor, Deprecated
		class USoundClass*                                         ParentClass;                                             // 0x0080(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.SoundMix
	 * Size -> 0x0050 (FullSize[0x0078] - InheritedSize[0x0028])
	 */
	class USoundMix : public UObject
	{
	public:
		unsigned char                                              bApplyEQ : 1;                                            // 0x0028(0x0001) BIT_FIELD Edit, NoDestructor, AssetRegistrySearchable
		unsigned char                                              UnknownData_UXIS[0x3];                                   // 0x0029(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      EQPriority;                                              // 0x002C(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		struct FAudioEQEffect                                      EQSettings;                                              // 0x0030(0x0028) Edit
		TArray<struct FSoundClassAdjuster>                         SoundClassEffects;                                       // 0x0058(0x0010) Edit, ZeroConstructor
		float                                                      InitialDelay;                                            // 0x0068(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      FadeInTime;                                              // 0x006C(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      Duration;                                                // 0x0070(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      FadeOutTime;                                             // 0x0074(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.SoundNodeAttenuation
	 * Size -> 0x0060 (FullSize[0x0098] - InheritedSize[0x0038])
	 */
	class USoundNodeAttenuation : public USoundNode
	{
	public:
		class USoundAttenuation*                                   AttenuationSettings;                                     // 0x0038(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		struct FAttenuationSettings                                AttenuationOverrides;                                    // 0x0040(0x0034) Edit
		unsigned char                                              bOverrideAttenuation : 1;                                // 0x0074(0x0001) BIT_FIELD Edit, NoDestructor
		unsigned char                                              bAttenuate : 1;                                          // 0x0074(0x0001) BIT_FIELD Deprecated, NoDestructor
		unsigned char                                              bSpatialize : 1;                                         // 0x0074(0x0001) BIT_FIELD Deprecated, NoDestructor
		unsigned char                                              UnknownData_W04F[0x3];                                   // 0x0075(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      dBAttenuationAtMax;                                      // 0x0078(0x0004) ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor
		ESoundDistanceModel                                        DistanceAlgorithm;                                       // 0x007C(0x0001) ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor
		ESoundDistanceCalc                                         DistanceType;                                            // 0x007D(0x0001) ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_ADG7[0x2];                                   // 0x007E(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      RadiusMin;                                               // 0x0080(0x0004) ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor
		float                                                      RadiusMax;                                               // 0x0084(0x0004) ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor
		unsigned char                                              bAttenuateWithLPF : 1;                                   // 0x0088(0x0001) BIT_FIELD Deprecated, NoDestructor
		unsigned char                                              UnknownData_QUUN[0x3];                                   // 0x0089(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      LPFRadiusMin;                                            // 0x008C(0x0004) ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor
		float                                                      LPFRadiusMax;                                            // 0x0090(0x0004) ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_Y9T1[0x4];                                   // 0x0094(0x0004) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.SoundNodeBranch
	 * Size -> 0x0008 (FullSize[0x0040] - InheritedSize[0x0038])
	 */
	class USoundNodeBranch : public USoundNode
	{
	public:
		class FName                                                BoolParameterName;                                       // 0x0038(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.SoundNodeConcatenator
	 * Size -> 0x0010 (FullSize[0x0048] - InheritedSize[0x0038])
	 */
	class USoundNodeConcatenator : public USoundNode
	{
	public:
		TArray<float>                                              InputVolume;                                             // 0x0038(0x0010) Edit, EditFixedSize, ZeroConstructor

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.SoundNodeDelay
	 * Size -> 0x0008 (FullSize[0x0040] - InheritedSize[0x0038])
	 */
	class USoundNodeDelay : public USoundNode
	{
	public:
		float                                                      DelayMin;                                                // 0x0038(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      DelayMax;                                                // 0x003C(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.SoundNodeDeprecated
	 * Size -> 0x0000 (FullSize[0x0038] - InheritedSize[0x0038])
	 */
	class USoundNodeDeprecated : public USoundNode
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.SoundNodeAmbient
	 * Size -> 0x0040 (FullSize[0x0078] - InheritedSize[0x0038])
	 */
	class USoundNodeAmbient : public USoundNodeDeprecated
	{
	public:
		unsigned char                                              bAttenuate : 1;                                          // 0x0038(0x0001) BIT_FIELD NoDestructor
		unsigned char                                              bSpatialize : 1;                                         // 0x0038(0x0001) BIT_FIELD NoDestructor
		unsigned char                                              UnknownData_S7CG[0x3];                                   // 0x0039(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      dBAttenuationAtMax;                                      // 0x003C(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor
		ESoundDistanceModel                                        DistanceModel;                                           // 0x0040(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_212V[0x3];                                   // 0x0041(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      RadiusMin;                                               // 0x0044(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      RadiusMax;                                               // 0x0048(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              bAttenuateWithLPF : 1;                                   // 0x004C(0x0001) BIT_FIELD NoDestructor
		unsigned char                                              UnknownData_5KXH[0x3];                                   // 0x004D(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      LPFRadiusMin;                                            // 0x0050(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      LPFRadiusMax;                                            // 0x0054(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      PitchMin;                                                // 0x0058(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      PitchMax;                                                // 0x005C(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      VolumeMin;                                               // 0x0060(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      VolumeMax;                                               // 0x0064(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor
		TArray<struct FAmbientSoundSlot>                           SoundSlots;                                              // 0x0068(0x0010) ZeroConstructor

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.SoundNodeAmbientNonLoop
	 * Size -> 0x0008 (FullSize[0x0080] - InheritedSize[0x0078])
	 */
	class USoundNodeAmbientNonLoop : public USoundNodeAmbient
	{
	public:
		float                                                      DelayMin;                                                // 0x0078(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      DelayMax;                                                // 0x007C(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.SoundNodeAmbientNonLoopToggle
	 * Size -> 0x0000 (FullSize[0x0080] - InheritedSize[0x0080])
	 */
	class USoundNodeAmbientNonLoopToggle : public USoundNodeAmbientNonLoop
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.SoundNodeConcatenatorRadio
	 * Size -> 0x0000 (FullSize[0x0038] - InheritedSize[0x0038])
	 */
	class USoundNodeConcatenatorRadio : public USoundNodeDeprecated
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.SoundNodeWave
	 * Size -> 0x00A0 (FullSize[0x00D8] - InheritedSize[0x0038])
	 */
	class USoundNodeWave : public USoundNodeDeprecated
	{
	public:
		int32_t                                                    CompressionQuality;                                      // 0x0038(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable
		unsigned char                                              bLoopingSound : 1;                                       // 0x003C(0x0001) BIT_FIELD Edit, NoDestructor
		unsigned char                                              UnknownData_GDCX[0x3];                                   // 0x003D(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FString                                              SpokenText;                                              // 0x0040(0x0010) Edit, ZeroConstructor
		float                                                      Volume;                                                  // 0x0050(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor
		float                                                      Pitch;                                                   // 0x0054(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor
		float                                                      Duration;                                                // 0x0058(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, AssetRegistrySearchable
		int32_t                                                    NumChannels;                                             // 0x005C(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, AssetRegistrySearchable
		int32_t                                                    SampleRate;                                              // 0x0060(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, AssetRegistrySearchable
		int32_t                                                    RawPCMDataSize;                                          // 0x0064(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor
		TArray<struct FSubtitleCue>                                Subtitles;                                               // 0x0068(0x0010) Edit, BlueprintReadOnly, ZeroConstructor
		unsigned char                                              bMature : 1;                                             // 0x0078(0x0001) BIT_FIELD Edit, BlueprintReadOnly, NoDestructor, AssetRegistrySearchable
		unsigned char                                              bManualWordWrap : 1;                                     // 0x0078(0x0001) BIT_FIELD Edit, BlueprintReadOnly, NoDestructor
		unsigned char                                              bSingleLine : 1;                                         // 0x0078(0x0001) BIT_FIELD Edit, BlueprintReadOnly, NoDestructor
		unsigned char                                              UnknownData_Y1UT[0x7];                                   // 0x0079(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<struct FLocalizedSubtitle>                          LocalizedSubtitles;                                      // 0x0080(0x0010) ZeroConstructor
		unsigned char                                              UnknownData_66BW[0x48];                                  // 0x0090(0x0048) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.SoundNodeDialoguePlayer
	 * Size -> 0x0028 (FullSize[0x0060] - InheritedSize[0x0038])
	 */
	class USoundNodeDialoguePlayer : public USoundNode
	{
	public:
		struct FDialogueWaveParameter                              DialogueWaveParameter;                                   // 0x0038(0x0020) Edit
		unsigned char                                              bLooping : 1;                                            // 0x0058(0x0001) BIT_FIELD Edit, NoDestructor
		unsigned char                                              UnknownData_NPMF[0x7];                                   // 0x0059(0x0007) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.SoundNodeDistanceCrossFade
	 * Size -> 0x0010 (FullSize[0x0048] - InheritedSize[0x0038])
	 */
	class USoundNodeDistanceCrossFade : public USoundNode
	{
	public:
		TArray<struct FDistanceDatum>                              CrossFadeInput;                                          // 0x0038(0x0010) Edit, ExportObject, EditFixedSize, ZeroConstructor

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.SoundNodeParamCrossFade
	 * Size -> 0x0008 (FullSize[0x0050] - InheritedSize[0x0048])
	 */
	class USoundNodeParamCrossFade : public USoundNodeDistanceCrossFade
	{
	public:
		class FName                                                ParamName;                                               // 0x0048(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.SoundNodeDoppler
	 * Size -> 0x0008 (FullSize[0x0040] - InheritedSize[0x0038])
	 */
	class USoundNodeDoppler : public USoundNode
	{
	public:
		float                                                      DopplerIntensity;                                        // 0x0038(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_L48C[0x4];                                   // 0x003C(0x0004) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.SoundNodeEnveloper
	 * Size -> 0x0118 (FullSize[0x0150] - InheritedSize[0x0038])
	 */
	class USoundNodeEnveloper : public USoundNode
	{
	public:
		float                                                      LoopStart;                                               // 0x0038(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      LoopEnd;                                                 // 0x003C(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      DurationAfterLoop;                                       // 0x0040(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		int32_t                                                    LoopCount;                                               // 0x0044(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              bLoopIndefinitely : 1;                                   // 0x0048(0x0001) BIT_FIELD Edit, NoDestructor
		unsigned char                                              bLoop : 1;                                               // 0x0048(0x0001) BIT_FIELD Edit, NoDestructor
		unsigned char                                              UnknownData_B26A[0x7];                                   // 0x0049(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UDistributionFloatConstantCurve*                     VolumeInterpCurve;                                       // 0x0050(0x0008) ExportObject, ZeroConstructor, InstancedReference, Deprecated, IsPlainOldData, NoDestructor
		class UDistributionFloatConstantCurve*                     PitchInterpCurve;                                        // 0x0058(0x0008) ExportObject, ZeroConstructor, InstancedReference, Deprecated, IsPlainOldData, NoDestructor
		struct FRuntimeFloatCurve                                  VolumeCurve;                                             // 0x0060(0x0070) Edit
		struct FRuntimeFloatCurve                                  PitchCurve;                                              // 0x00D0(0x0070) Edit
		float                                                      PitchMin;                                                // 0x0140(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      PitchMax;                                                // 0x0144(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      VolumeMin;                                               // 0x0148(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      VolumeMax;                                               // 0x014C(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.SoundNodeGroupControl
	 * Size -> 0x0010 (FullSize[0x0048] - InheritedSize[0x0038])
	 */
	class USoundNodeGroupControl : public USoundNode
	{
	public:
		TArray<int32_t>                                            GroupSizes;                                              // 0x0038(0x0010) Edit, EditFixedSize, ZeroConstructor

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.SoundNodeLooping
	 * Size -> 0x0000 (FullSize[0x0038] - InheritedSize[0x0038])
	 */
	class USoundNodeLooping : public USoundNode
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.SoundNodeMature
	 * Size -> 0x0000 (FullSize[0x0038] - InheritedSize[0x0038])
	 */
	class USoundNodeMature : public USoundNode
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.SoundNodeMixer
	 * Size -> 0x0010 (FullSize[0x0048] - InheritedSize[0x0038])
	 */
	class USoundNodeMixer : public USoundNode
	{
	public:
		TArray<float>                                              InputVolume;                                             // 0x0038(0x0010) Edit, ExportObject, EditFixedSize, ZeroConstructor

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.SoundNodeModulator
	 * Size -> 0x0010 (FullSize[0x0048] - InheritedSize[0x0038])
	 */
	class USoundNodeModulator : public USoundNode
	{
	public:
		float                                                      PitchMin;                                                // 0x0038(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      PitchMax;                                                // 0x003C(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      VolumeMin;                                               // 0x0040(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      VolumeMax;                                               // 0x0044(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.SoundNodeModulatorContinuous
	 * Size -> 0x00B0 (FullSize[0x00E8] - InheritedSize[0x0038])
	 */
	class USoundNodeModulatorContinuous : public USoundNode
	{
	public:
		struct FModulatorContinuousParams                          PitchModulationParams;                                   // 0x0038(0x0020) Edit
		struct FModulatorContinuousParams                          VolumeModulationParams;                                  // 0x0058(0x0020) Edit
		struct FRawDistributionFloat                               PitchModulation;                                         // 0x0078(0x0038) Deprecated, ContainsInstancedReference
		struct FRawDistributionFloat                               VolumeModulation;                                        // 0x00B0(0x0038) Deprecated, ContainsInstancedReference

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.SoundNodeOscillator
	 * Size -> 0x0028 (FullSize[0x0060] - InheritedSize[0x0038])
	 */
	class USoundNodeOscillator : public USoundNode
	{
	public:
		unsigned char                                              bModulateVolume : 1;                                     // 0x0038(0x0001) BIT_FIELD Edit, NoDestructor
		unsigned char                                              bModulatePitch : 1;                                      // 0x0038(0x0001) BIT_FIELD Edit, NoDestructor
		unsigned char                                              UnknownData_P6SO[0x3];                                   // 0x0039(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      AmplitudeMin;                                            // 0x003C(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      AmplitudeMax;                                            // 0x0040(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      FrequencyMin;                                            // 0x0044(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      FrequencyMax;                                            // 0x0048(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      OffsetMin;                                               // 0x004C(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      OffsetMax;                                               // 0x0050(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      CenterMin;                                               // 0x0054(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      CenterMax;                                               // 0x0058(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_DX1K[0x4];                                   // 0x005C(0x0004) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.SoundNodeRandom
	 * Size -> 0x0030 (FullSize[0x0068] - InheritedSize[0x0038])
	 */
	class USoundNodeRandom : public USoundNode
	{
	public:
		TArray<float>                                              Weights;                                                 // 0x0038(0x0010) Edit, EditFixedSize, ZeroConstructor
		int32_t                                                    PreselectAtLevelLoad;                                    // 0x0048(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              bRandomizeWithoutReplacement : 1;                        // 0x004C(0x0001) BIT_FIELD Edit, NoDestructor
		unsigned char                                              UnknownData_JUG5[0x3];                                   // 0x004D(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<bool>                                               HasBeenUsed;                                             // 0x0050(0x0010) ZeroConstructor, Transient
		int32_t                                                    NumRandomUsed;                                           // 0x0060(0x0004) ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_USAH[0x4];                                   // 0x0064(0x0004) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.SoundNodeSoundClass
	 * Size -> 0x0008 (FullSize[0x0040] - InheritedSize[0x0038])
	 */
	class USoundNodeSoundClass : public USoundNode
	{
	public:
		class USoundClass*                                         SoundClassOverride;                                      // 0x0038(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.SoundNodeSwitch
	 * Size -> 0x0008 (FullSize[0x0040] - InheritedSize[0x0038])
	 */
	class USoundNodeSwitch : public USoundNode
	{
	public:
		class FName                                                IntParameterName;                                        // 0x0038(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.SoundNodeWaveParam
	 * Size -> 0x0008 (FullSize[0x0040] - InheritedSize[0x0038])
	 */
	class USoundNodeWaveParam : public USoundNode
	{
	public:
		class FName                                                WaveParameterName;                                       // 0x0038(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.SoundNodeWavePlayer
	 * Size -> 0x0010 (FullSize[0x0048] - InheritedSize[0x0038])
	 */
	class USoundNodeWavePlayer : public USoundNode
	{
	public:
		class USoundWave*                                          SoundWave;                                               // 0x0038(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              bLooping : 1;                                            // 0x0040(0x0001) BIT_FIELD Edit, NoDestructor
		unsigned char                                              UnknownData_GBDF[0x7];                                   // 0x0041(0x0007) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.StaticMesh
	 * Size -> 0x0120 (FullSize[0x0148] - InheritedSize[0x0028])
	 */
	class UStaticMesh : public UObject
	{
	public:
		unsigned char                                              UnknownData_EZ0Q[0x20];                                  // 0x0028(0x0020) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		unsigned char                                              bRequiresCPUAccess : 1;                                  // 0x0048(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		unsigned char                                              bReallyDoesWantLightMapUVs : 1;                          // 0x0048(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		unsigned char                                              UnknownData_5LYM[0x7];                                   // 0x0049(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class UMaterialInterface*>                          Materials;                                               // 0x0050(0x0010) ZeroConstructor
		unsigned char                                              bIgnoreTriReductions : 1;                                // 0x0060(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		unsigned char                                              bPreventLODStreamingOnWindows : 1;                       // 0x0060(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor
		unsigned char                                              UnknownData_PELM[0x3];                                   // 0x0061(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int32_t                                                    LightMapResolution;                                      // 0x0064(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		int32_t                                                    LightMapCoordinateIndex;                                 // 0x0068(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay
		unsigned char                                              UnknownData_721Z[0x4];                                   // 0x006C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UBodySetup*                                          BodySetup;                                               // 0x0070(0x0008) Edit, ExportObject, ZeroConstructor, Transient, InstancedReference, DuplicateTransient, IsPlainOldData, NoDestructor
		unsigned char                                              UseFullPrecisionUVs : 1;                                 // 0x0078(0x0001) BIT_FIELD Deprecated, NoDestructor
		unsigned char                                              bUseMaximumStreamingTexelRatio : 1;                      // 0x0078(0x0001) BIT_FIELD Edit, NoDestructor, AdvancedDisplay
		unsigned char                                              bStripComplexCollisionForConsole : 1;                    // 0x0078(0x0001) BIT_FIELD Deprecated, NoDestructor
		unsigned char                                              bHasNavigationData : 1;                                  // 0x0078(0x0001) BIT_FIELD Edit, NoDestructor, AdvancedDisplay
		unsigned char                                              bUseDistanceFieldTexture : 1;                            // 0x0078(0x0001) BIT_FIELD Edit, NoDestructor
		unsigned char                                              bOnlyLoadDistanceFieldsOnInteriorLightingMaps : 1;       // 0x0078(0x0001) BIT_FIELD Edit, NoDestructor
		unsigned char                                              bForceAllowMeshStreaming : 1;                            // 0x0078(0x0001) BIT_FIELD Edit, NoDestructor
		unsigned char                                              bAllowDistanceFieldOnLowEnd : 1;                         // 0x0078(0x0001) BIT_FIELD Edit, NoDestructor
		unsigned char                                              bHighQualityDistanceField : 1;                           // 0x0079(0x0001) BIT_FIELD Edit, NoDestructor
		unsigned char                                              bForceUseDistanceFieldResolution : 1;                    // 0x0079(0x0001) BIT_FIELD Edit, NoDestructor
		unsigned char                                              UnknownData_KT4X[0x2];                                   // 0x007A(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		EDistanceFieldTwoSidedOverride                             DistanceFieldTwoSidedOverride;                           // 0x007C(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_1VVZ[0x3];                                   // 0x007D(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		unsigned char                                              bAllowLODStreamingTransient : 1;                         // 0x0080(0x0001) BIT_FIELD Transient, NoDestructor
		unsigned char                                              bCastFarShadow : 1;                                      // 0x0080(0x0001) BIT_FIELD NoDestructor
		unsigned char                                              bAllowLODStreaming : 1;                                  // 0x0080(0x0001) BIT_FIELD Edit, NoDestructor
		unsigned char                                              bConsoleDropLOD0 : 1;                                    // 0x0080(0x0001) BIT_FIELD Edit, NoDestructor
		unsigned char                                              bConsoleDropLOD0onLowMemPlatform : 1;                    // 0x0080(0x0001) BIT_FIELD Edit, NoDestructor
		unsigned char                                              UnknownData_L14N[0x3];                                   // 0x0081(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      DistanceFieldRuntimeQuality;                             // 0x0084(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_X9OA[0x30];                                  // 0x0088(0x0030) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      StreamingDistanceMultiplier;                             // 0x00B8(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay
		float                                                      LpvBiasMultiplier;                                       // 0x00BC(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_08DF[0x30];                                  // 0x00C0(0x0030) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class UStaticMeshSocket*>                           Sockets;                                                 // 0x00F0(0x0010) ZeroConstructor
		unsigned char                                              UnknownData_YJRE[0x20];                                  // 0x0100(0x0020) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int32_t                                                    ElementToIgnoreForTexFactor;                             // 0x0120(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, Protected
		unsigned char                                              UnknownData_9W75[0x4];                                   // 0x0124(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class UAssetUserData*>                              AssetUserData;                                           // 0x0128(0x0010) Edit, ExportObject, ZeroConstructor, ContainsInstancedReference, AdvancedDisplay, Protected
		class UNavCollision*                                       NavCollision;                                            // 0x0138(0x0008) Edit, ExportObject, ZeroConstructor, Transient, EditConst, InstancedReference, DuplicateTransient, IsPlainOldData, NoDestructor
		class FName                                                CustomTag;                                               // 0x0140(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.StaticMeshSocket
	 * Size -> 0x0040 (FullSize[0x0068] - InheritedSize[0x0028])
	 */
	class UStaticMeshSocket : public UObject
	{
	public:
		class FName                                                SocketName;                                              // 0x0028(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor
		struct FVector                                             RelativeLocation;                                        // 0x0030(0x000C) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		struct FRotator                                            RelativeRotation;                                        // 0x003C(0x000C) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		struct FVector                                             RelativeScale;                                           // 0x0048(0x000C) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_4A6R[0x4];                                   // 0x0054(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FString                                              Tag;                                                     // 0x0058(0x0010) Edit, BlueprintVisible, ZeroConstructor

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.SubsurfaceProfile
	 * Size -> 0x0028 (FullSize[0x0050] - InheritedSize[0x0028])
	 */
	class USubsurfaceProfile : public UObject
	{
	public:
		struct FSubsurfaceProfileStruct                            Settings;                                                // 0x0028(0x0024) Edit
		unsigned char                                              UnknownData_RYDO[0x4];                                   // 0x004C(0x0004) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.TextPropertyTestObject
	 * Size -> 0x0078 (FullSize[0x00A0] - InheritedSize[0x0028])
	 */
	class UTextPropertyTestObject : public UObject
	{
	public:
		class FText                                                DefaultedText;                                           // 0x0028(0x0018) ELEMENT_SIZE_MISMATCH
		unsigned char                                              UnknownData_6C4I[0x10];                                  // 0x0040(0x0010) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY
		class FText                                                UndefaultedText;                                         // 0x0050(0x0018) ELEMENT_SIZE_MISMATCH
		unsigned char                                              UnknownData_X6I3[0x10];                                  // 0x0068(0x0010) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY
		class FText                                                TransientText;                                           // 0x0078(0x0018) ELEMENT_SIZE_MISMATCH
		unsigned char                                              UnknownData_BQ5S[0x10];                                  // 0x0090(0x0010) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.Texture2D
	 * Size -> 0x00B0 (FullSize[0x0160] - InheritedSize[0x00B0])
	 */
	class UTexture2D : public UTexture
	{
	public:
		int32_t                                                    RequestedMips;                                           // 0x00B0(0x0004) ZeroConstructor, Transient, IsPlainOldData, NonTransactional, NoDestructor
		int32_t                                                    ResidentMips;                                            // 0x00B4(0x0004) ZeroConstructor, Transient, IsPlainOldData, NonTransactional, NoDestructor
		int32_t                                                    StreamingIndex;                                          // 0x00B8(0x0004) ZeroConstructor, Transient, DuplicateTransient, IsPlainOldData, NonTransactional, NoDestructor
		int32_t                                                    FirstResourceMemMip;                                     // 0x00BC(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_19GR[0x4];                                   // 0x00C0(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int32_t                                                    SizeX;                                                   // 0x00C4(0x0004) ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor
		int32_t                                                    SizeY;                                                   // 0x00C8(0x0004) ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor
		int32_t                                                    OriginalSizeX;                                           // 0x00CC(0x0004) ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor
		int32_t                                                    OriginalSizeY;                                           // 0x00D0(0x0004) ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor
		struct FIntPoint                                           ImportedSize;                                            // 0x00D4(0x0008) ZeroConstructor
		float                                                      ForceMipLevelsToBeResidentTimestamp;                     // 0x00DC(0x0004) ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		unsigned char                                              bTemporarilyDisableStreaming : 1;                        // 0x00E0(0x0001) BIT_FIELD Transient, NoDestructor
		unsigned char                                              bDisableDerivedDataCache : 1;                            // 0x00E0(0x0001) BIT_FIELD Deprecated, NoDestructor
		unsigned char                                              bIsStreamable : 1;                                       // 0x00E0(0x0001) BIT_FIELD Transient, NonTransactional, NoDestructor
		unsigned char                                              bHasCancelationPending : 1;                              // 0x00E0(0x0001) BIT_FIELD Transient, NonTransactional, NoDestructor
		unsigned char                                              bForceMiplevelsToBeResident : 1;                         // 0x00E0(0x0001) BIT_FIELD Transient, NoDestructor
		unsigned char                                              bGlobalForceMipLevelsToBeResident : 1;                   // 0x00E0(0x0001) BIT_FIELD Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay
		unsigned char                                              UnknownData_U1N7[0x3];                                   // 0x00E1(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		EPixelFormat                                               Format;                                                  // 0x00E4(0x0001) ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor
		ETextureAddress                                            AddressX;                                                // 0x00E5(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, AdvancedDisplay
		ETextureAddress                                            AddressY;                                                // 0x00E6(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, AdvancedDisplay
		unsigned char                                              UnknownData_1CX5[0x79];                                  // 0x00E7(0x0079) MISSED OFFSET (PADDING)

	public:
		int32_t Blueprint_GetSizeY();
		int32_t Blueprint_GetSizeX();
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.LightMapTexture2D
	 * Size -> 0x0008 (FullSize[0x0168] - InheritedSize[0x0160])
	 */
	class ULightMapTexture2D : public UTexture2D
	{
	public:
		unsigned char                                              UnknownData_RFVF[0x8];                                   // 0x0160(0x0008) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.ShadowMapTexture2D
	 * Size -> 0x0008 (FullSize[0x0168] - InheritedSize[0x0160])
	 */
	class UShadowMapTexture2D : public UTexture2D
	{
	public:
		EShadowMapFlags                                            ShadowmapFlags;                                          // 0x0160(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_XQ5T[0x7];                                   // 0x0161(0x0007) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.TextureLightProfile
	 * Size -> 0x0008 (FullSize[0x0168] - InheritedSize[0x0160])
	 */
	class UTextureLightProfile : public UTexture2D
	{
	public:
		float                                                      Brightness;                                              // 0x0160(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable
		float                                                      TextureMultiplier;                                       // 0x0164(0x0004) Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.Texture2DDynamic
	 * Size -> 0x0018 (FullSize[0x00C8] - InheritedSize[0x00B0])
	 */
	class UTexture2DDynamic : public UTexture
	{
	public:
		unsigned char                                              UnknownData_M1JC[0x8];                                   // 0x00B0(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		EPixelFormat                                               Format;                                                  // 0x00B8(0x0001) ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_ELR4[0xF];                                   // 0x00B9(0x000F) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.TextureCube
	 * Size -> 0x0058 (FullSize[0x0108] - InheritedSize[0x00B0])
	 */
	class UTextureCube : public UTexture
	{
	public:
		unsigned char                                              UnknownData_C4R1[0x58];                                  // 0x00B0(0x0058) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.CanvasRenderTarget2D
	 * Size -> 0x0010 (FullSize[0x0108] - InheritedSize[0x00F8])
	 */
	class UCanvasRenderTarget2D : public UTextureRenderTarget2D
	{
	public:
		class FScriptMulticastDelegate                             OnCanvasRenderTargetUpdate;                              // 0x00F8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable

	public:
		void UpdateResource();
		void ReceiveUpdate(class UCanvas* Canvas, int32_t Width, int32_t Height);
		void OnCanvasRenderTargetUpdate__DelegateSignature(class UCanvas* Canvas, int32_t Width, int32_t Height);
		void GetSize(int32_t* Width, int32_t* Height);
		class UCanvasRenderTarget2D* STATIC_CreateCanvasRenderTarget2D(class UClass* CanvasRenderTarget2DClass, int32_t Width, int32_t Height);
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.TextureRenderTargetCube
	 * Size -> 0x0020 (FullSize[0x00D8] - InheritedSize[0x00B8])
	 */
	class UTextureRenderTargetCube : public UTextureRenderTarget
	{
	public:
		int32_t                                                    SizeX;                                                   // 0x00B8(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable
		struct FLinearColor                                        ClearColor;                                              // 0x00BC(0x0010) ZeroConstructor, IsPlainOldData, NoDestructor
		EPixelFormat                                               OverrideFormat;                                          // 0x00CC(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_G9UD[0x3];                                   // 0x00CD(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		unsigned char                                              bHDR : 1;                                                // 0x00D0(0x0001) BIT_FIELD Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AssetRegistrySearchable
		unsigned char                                              bForceLinearGamma : 1;                                   // 0x00D0(0x0001) BIT_FIELD NoDestructor
		unsigned char                                              UnknownData_B7ST[0x7];                                   // 0x00D1(0x0007) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.ThumbnailInfo
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class UThumbnailInfo : public UObject
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.TimelineTemplate
	 * Size -> 0x0070 (FullSize[0x0098] - InheritedSize[0x0028])
	 */
	class UTimelineTemplate : public UObject
	{
	public:
		float                                                      TimelineLength;                                          // 0x0028(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		ETimelineLengthMode                                        LengthMode;                                              // 0x002C(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_SOVE[0x3];                                   // 0x002D(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		unsigned char                                              bAutoPlay : 1;                                           // 0x0030(0x0001) BIT_FIELD Edit, NoDestructor
		unsigned char                                              bLoop : 1;                                               // 0x0030(0x0001) BIT_FIELD Edit, NoDestructor
		unsigned char                                              bReplicated : 1;                                         // 0x0030(0x0001) BIT_FIELD Edit, BlueprintVisible, NoDestructor
		unsigned char                                              bValidatedAsWired : 1;                                   // 0x0030(0x0001) BIT_FIELD NoDestructor
		unsigned char                                              UnknownData_Q3CA[0x7];                                   // 0x0031(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<struct FTTEventTrack>                               EventTracks;                                             // 0x0038(0x0010) ZeroConstructor
		TArray<struct FTTFloatTrack>                               FloatTracks;                                             // 0x0048(0x0010) ZeroConstructor
		TArray<struct FTTVectorTrack>                              VectorTracks;                                            // 0x0058(0x0010) ZeroConstructor
		TArray<struct FTTLinearColorTrack>                         LinearColorTracks;                                       // 0x0068(0x0010) ZeroConstructor
		TArray<struct FBPVariableMetaDataEntry>                    MetaDataArray;                                           // 0x0078(0x0010) Edit, ZeroConstructor
		struct FGuid                                               TimelineGuid;                                            // 0x0088(0x0010) ZeroConstructor, DuplicateTransient

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.TouchInterface
	 * Size -> 0x0030 (FullSize[0x0058] - InheritedSize[0x0028])
	 */
	class UTouchInterface : public UObject
	{
	public:
		TArray<struct FTouchInputControl>                          Controls;                                                // 0x0028(0x0010) Edit, ZeroConstructor
		float                                                      ActiveOpacity;                                           // 0x0038(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      InactiveOpacity;                                         // 0x003C(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      TimeUntilDeactive;                                       // 0x0040(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      TimeUntilReset;                                          // 0x0044(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      ActivationDelay;                                         // 0x0048(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		bool                                                       bPreventRecenter;                                        // 0x004C(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_0BWP[0x3];                                   // 0x004D(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      StartupDelay;                                            // 0x0050(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_LGWY[0x4];                                   // 0x0054(0x0004) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.UserDefinedEnum
	 * Size -> 0x0010 (FullSize[0x0068] - InheritedSize[0x0058])
	 */
	class UUserDefinedEnum : public UEnum
	{
	public:
		TArray<class FText>                                        DisplayNames;                                            // 0x0058(0x0010) ZeroConstructor

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.UserDefinedStruct
	 * Size -> 0x0000 (FullSize[0x00A8] - InheritedSize[0x00A8])
	 */
	class UUserDefinedStruct : public UScriptStruct
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.VectorField
	 * Size -> 0x0020 (FullSize[0x0048] - InheritedSize[0x0028])
	 */
	class UVectorField : public UObject
	{
	public:
		struct FBox                                                Bounds;                                                  // 0x0028(0x001C) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      Intensity;                                               // 0x0044(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.VectorFieldAnimated
	 * Size -> 0x0040 (FullSize[0x0088] - InheritedSize[0x0048])
	 */
	class UVectorFieldAnimated : public UVectorField
	{
	public:
		class UTexture2D*                                          Texture;                                                 // 0x0048(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		EVectorFieldConstructionOp                                 ConstructionOp;                                          // 0x0050(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_MCH3[0x3];                                   // 0x0051(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int32_t                                                    VolumeSizeX;                                             // 0x0054(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		int32_t                                                    VolumeSizeY;                                             // 0x0058(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		int32_t                                                    VolumeSizeZ;                                             // 0x005C(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		int32_t                                                    SubImagesX;                                              // 0x0060(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		int32_t                                                    SubImagesY;                                              // 0x0064(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		int32_t                                                    FrameCount;                                              // 0x0068(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      FramesPerSecond;                                         // 0x006C(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              bLoop : 1;                                               // 0x0070(0x0001) BIT_FIELD Edit, NoDestructor
		unsigned char                                              UnknownData_27CW[0x7];                                   // 0x0071(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UVectorFieldStatic*                                  NoiseField;                                              // 0x0078(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      NoiseScale;                                              // 0x0080(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      NoiseMax;                                                // 0x0084(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.VectorFieldStatic
	 * Size -> 0x0060 (FullSize[0x00A8] - InheritedSize[0x0048])
	 */
	class UVectorFieldStatic : public UVectorField
	{
	public:
		int32_t                                                    SizeX;                                                   // 0x0048(0x0004) Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor
		int32_t                                                    SizeY;                                                   // 0x004C(0x0004) Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor
		int32_t                                                    SizeZ;                                                   // 0x0050(0x0004) Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_N4XB[0x54];                                  // 0x0054(0x0054) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.VehicleWheel
	 * Size -> 0x00B8 (FullSize[0x00E0] - InheritedSize[0x0028])
	 */
	class UVehicleWheel : public UObject
	{
	public:
		class UStaticMesh*                                         CollisionMesh;                                           // 0x0028(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		bool                                                       bDontCreateShape;                                        // 0x0030(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
		bool                                                       bAutoAdjustCollisionSize;                                // 0x0031(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_AC3T[0x2];                                   // 0x0032(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FVector                                             Offset;                                                  // 0x0034(0x000C) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      ShapeRadius;                                             // 0x0040(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      ShapeWidth;                                              // 0x0044(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      Mass;                                                    // 0x0048(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      DampingRate;                                             // 0x004C(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      SteerAngle;                                              // 0x0050(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		bool                                                       bAffectedByHandbrake;                                    // 0x0054(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_3LUZ[0x3];                                   // 0x0055(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UTireType*                                           TireType;                                                // 0x0058(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      LatStiffMaxLoad;                                         // 0x0060(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      LatStiffValue;                                           // 0x0064(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      LongStiffValue;                                          // 0x0068(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      SuspensionForceOffset;                                   // 0x006C(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      SuspensionMaxRaise;                                      // 0x0070(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      SuspensionMaxDrop;                                       // 0x0074(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      SuspensionNaturalFrequency;                              // 0x0078(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      SuspensionDampingRatio;                                  // 0x007C(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      MaxBrakeTorque;                                          // 0x0080(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		float                                                      MaxHandBrakeTorque;                                      // 0x0084(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor
		class UWheeledVehicleMovementComponent*                    VehicleSim;                                              // 0x0088(0x0008) ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor
		int32_t                                                    WheelIndex;                                              // 0x0090(0x0004) ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		float                                                      DebugLongSlip;                                           // 0x0094(0x0004) ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		float                                                      DebugLatSlip;                                            // 0x0098(0x0004) ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		float                                                      DebugNormalizedTireLoad;                                 // 0x009C(0x0004) ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		float                                                      DebugWheelTorque;                                        // 0x00A0(0x0004) ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		float                                                      DebugLongForce;                                          // 0x00A4(0x0004) ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		float                                                      DebugLatForce;                                           // 0x00A8(0x0004) ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		struct FVector                                             Location;                                                // 0x00AC(0x000C) ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		struct FVector                                             OldLocation;                                             // 0x00B8(0x000C) ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		struct FVector                                             Velocity;                                                // 0x00C4(0x000C) ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_ZEIG[0x10];                                  // 0x00D0(0x0010) MISSED OFFSET (PADDING)

	public:
		float GetSuspensionOffset();
		float GetSteerAngle();
		float GetRotationAngle();
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.VertexAnimBase
	 * Size -> 0x0008 (FullSize[0x0030] - InheritedSize[0x0028])
	 */
	class UVertexAnimBase : public UObject
	{
	public:
		class USkeletalMesh*                                       BaseSkelMesh;                                            // 0x0028(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.MorphTarget
	 * Size -> 0x0010 (FullSize[0x0040] - InheritedSize[0x0030])
	 */
	class UMorphTarget : public UVertexAnimBase
	{
	public:
		unsigned char                                              UnknownData_P3RE[0x10];                                  // 0x0030(0x0010) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.VertexAnimation
	 * Size -> 0x0018 (FullSize[0x0048] - InheritedSize[0x0030])
	 */
	class UVertexAnimation : public UVertexAnimBase
	{
	public:
		int32_t                                                    NumAnimatedVerts;                                        // 0x0030(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_B69L[0x14];                                  // 0x0034(0x0014) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class Engine.WorldComposition
	 * Size -> 0x0068 (FullSize[0x0090] - InheritedSize[0x0028])
	 */
	class UWorldComposition : public UObject
	{
	public:
		unsigned char                                              UnknownData_WHB6[0x20];                                  // 0x0028(0x0020) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class ULevelStreaming*>                             TilesStreaming;                                          // 0x0048(0x0010) ZeroConstructor, Transient
		double                                                     TilesStreamingTimeThreshold;                             // 0x0058(0x0008) ZeroConstructor, Config, IsPlainOldData, NoDestructor
		TArray<struct FEditorTileInitialState>                     TileInitialState;                                        // 0x0060(0x0010) ZeroConstructor
		TArray<class ATileStreamingVolume*>                        TileVolumes;                                             // 0x0070(0x0010) ZeroConstructor, Transient
		double                                                     LastTimeSwitchedContainedVolumes;                        // 0x0080(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor
		unsigned char                                              UnknownData_MWRY[0x8];                                   // 0x0088(0x0008) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};


	


};
 

#ifdef _MSC_VER
	#pragma pack(pop)
#endif
